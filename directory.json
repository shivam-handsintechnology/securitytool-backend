{
  "data": [
    {
      "name": "app",
      "type": "file",
      "extension": ".js",
      "content": "// All Neccesary functions\r\nconst apirouter = require('./src/routes')\r\nconst checkVerification = require('./src/middlewares/verifyClient')\r\nvar express = require(\"express\");\r\nconst path = require('path')\r\nvar cors = require(\"cors\"), hpp = require('hpp'), morgan = require('morgan'), helmet = require('helmet'), bodyParser = require('body-parser')\r\nconst dotenv = require(\"dotenv\")\r\nconst { DBConnection, corsOptions } = require(\"./src/config/connection\");\r\nconst { AllowedDomainsModel } = require('./src/models/AllowedDomainsModel');\r\nconst JsSnippetController = require('./src/controllers/JsSnippetController');\r\nvar cluster = require(\"cluster\"), os = require(\"os\"), numCPUs = os.cpus().length, process = require(\"process\");\r\ndotenv.config();\r\nvar app = express();\r\nvar server = require(\"http\").createServer(app);\r\napp.enable('trust proxy');\r\napp.use(bodyParser.json({ limit: \"50mb\" }));\r\napp.get('/protected', checkVerification, JsSnippetController.JsSnippet);\r\napp.use(hpp());\r\napp.use(cors())\r\napp.use(helmet())\r\napp.use(morgan('dev'))\r\napp.disable('x-powered-by');\r\napp.disable('etag');\r\n// const AutoProtectCode = require('./auto')\r\n// AutoProtectCode(app, domain = 'autotest.handsintechnology.in', appid = \"6f891635-cb99-4d8c-80bb-7a4261ec9997\")\r\napp.use(apirouter)\r\nconst PortNumber = 20000;\r\nif (cluster.isPrimary) {\r\n  console.log(`Primary ${process.pid} is running`);\r\n  // Fork workers.\r\n  for (let i = 0; i < numCPUs; i++) {\r\n    cluster.fork();\r\n  }\r\n  cluster.on(\"exit\", (worker, code, signal) => {\r\n    console.log(code, signal);\r\n    console.log(`worker ${worker.process.pid} died`);\r\n    cluster.fork();\r\n  });\r\n} else {\r\n  server.listen(PortNumber, async function (req, res) {\r\n    DBConnection(process.env.MONGO_URI)\r\n    console.log(\"Server started at port\", PortNumber);\r\n  });\r\n  console.log(`Worker ${process.pid} started`);\r\n}\r\n\r\n// \r\nconst baseUrl = \"http://localhost:20000/api/client\";\r\nconst HostValidator = (app, sid, appid) => {\r\n  return async (req, res, next) => {\r\n    const allowedDomain = await Ialloweddomain(sid, appid);\r\n    req.app = app;\r\n    req.domain = sid;\r\n    req.appid = appid;\r\n    req.alloweddomain = allowedDomain;\r\n    next();\r\n  };\r\n};\r\nconst Ialloweddomain = async (hostname, appid) => {\r\n  try {\r\n    const response = await useCustomFetch(\r\n      `${baseUrl}/alloweddomains?sid=${hostname}&appid=${appid}`\r\n    );\r\n    console.log({ alloweddomains: response })\r\n    if (response.status === 200) {\r\n      return { allowed: true };\r\n    } else {\r\n      return { allowed: false };\r\n    }\r\n  } catch (error) {\r\n    if (error) {\r\n      console.log(error)\r\n      return { allowed: false };\r\n    }\r\n  }\r\n};\r\n// Call Middleware For Secure Your Application\r\nfunction isExpressApplication(app) {\r\n  return (\r\n    app &&\r\n    typeof app === \"function\" &&\r\n    app.hasOwnProperty(\"use\") &&\r\n    app.hasOwnProperty(\"get\")\r\n  );\r\n}\r\napp.post(\"/scan\", async (req, res) => {\r\n  const { hostname } = req.body\r\n  const alloweddomains = await AllowedDomainsModel.findOne(\r\n    { domain: host },\r\n    { _id: 0 }\r\n  ).lean();\r\n  if (alloweddomains) {\r\n\r\n    return res.json({ status: true })\r\n  } else {\r\n    // Person is not verified, send an error response or redirect\r\n    return res.json({ status: false })\r\n  }\r\n})\r\nconst fs = require('fs');\r\n\r\n\r\nfunction scanDirectory(directoryPath, result = []) {\r\n  // Read the content of the directory\r\n  const files = fs.readdirSync(directoryPath);\r\n\r\n  // Iterate through each file in the directory\r\n  files.forEach(file => {\r\n    // Exclude specific files and folders\r\n    if (file === '.env' || file === 'package.json' || file === 'node_modules' || file === '.git' || file === '.gitignore' || file === __filename || file === 'package-lock.json' || file === 'yarn.lock' || file === \"directory.json\") {\r\n      return;\r\n    }\r\n\r\n    const filePath = path.join(directoryPath, file);\r\n\r\n    // Check if it's a directory\r\n    if (fs.statSync(filePath).isDirectory()) {\r\n      // Recursively scan subdirectories\r\n      scanDirectory(filePath, result);\r\n    } else {\r\n      // Get file extension and name\r\n      const fileExtension = path.extname(file);\r\n      const fileName = path.basename(file, fileExtension);\r\n\r\n      // Read file content\r\n      const fileContent = fs.readFileSync(filePath, 'utf-8');\r\n\r\n      // Add file information to the result array\r\n      result.push({\r\n        name: fileName,\r\n        type: 'file',\r\n        extension: fileExtension,\r\n        content: fileContent,\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\n// Specify the directory path you want to scan\r\nconst directoryPath = process.cwd();\r\n\r\n// Initialize an empty array to store the results\r\nconst jsonData = [];\r\n\r\n// Call the function to scan the directory\r\nscanDirectory(directoryPath, jsonData);\r\n\r\n// Convert the result to JSON\r\nconst jsonString = JSON.stringify({ data: jsonData }, null, 2);\r\nfs.writeFileSync('directory.json', jsonString, 'utf-8');\r\n// Print the JSON data\r\nconsole.log(jsonString);\r\n"
    },
    {
      "name": "securitytool server details",
      "type": "file",
      "extension": ".txt",
      "content": "\r\nCloudPanel\r\nhttps://server.strategytool.io/login\r\nserver.strategytool.io\r\nusername:shivam1306\r\npassword:sadashiv@612\r\n"
    },
    {
      "name": "codeinject",
      "type": "file",
      "extension": ".js",
      "content": "const https = require('https');\n\nconst API_KEY = 'd55435107bbfb1235bdeb3457aa0cc7ca48ce7cba06aeb2fd8b3e8cc82096187'; // Replace with your VirusTotal API key\nconst domain = 'healthkart.com';\n\n// Function to make a request to the VirusTotal API and scan the domain for viruses\n// function scanDomain() {\n//   const timestamp = Math.floor(Date.now() / 1000);\n//   const url = `https://www.virustotal.com/vtapi/v2/domain/report?apikey=${API_KEY}&domain=${domain}&date=${timestamp}`;\n//   const options = {\n//     method: 'GET'\n//   };\n//   // Make the request\n//   const request = https.request(url, options, (response) => {\n//     const chunks = [];\n\n//     // Collect the response data in chunks\n//     response.on('data', (chunk) => {\n//       chunks.push(chunk);\n//     });\n\n//     // When the response is complete, concatenate the chunks into a single buffer\n//     response.on('end', () => {\n//       const buffer = Buffer.concat(chunks);\n\n//       // Parse the JSON response\n//       const result = JSON.parse(buffer.toString());\n\n//       if (result.response_code !== 1) {\n//         console.log(`The domain ${domain} could not be scanned.`);\n//         return;\n//       }\n\n//       if (result.detected_urls.length > 0) {\n//         console.log(`The domain ${domain} contains a virus!`);\n//         console.log(`The following URLs were detected as malicious:`);\n//         for (const url of result.detected_urls) {\n//           console.log(url.url);\n//         }\n//       } else {\n//         console.log(`The domain ${domain} is clean.`);\n//       }\n//     });\n//   });\n\n//   // Handle errors\n//   request.on('error', (error) => {\n//     console.error(error);\n//   });\n\n//   request.end();\n// }\n// scanDomain()\nconst puppeteer = require('puppeteer');\n\nasync function runTest(url) {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  await page.goto(url);\n  const metrics = await page.metrics();\n  const requests = await page.evaluate(() => window.performance.getEntriesByType(\"resource\").length);\n  await browser.close();\n  return { metrics, requests };\n}\nconst GetMatrix=async()=>{\n const result=await   runTest(\"https://www.healthkart.com/\")\n console.log(JSON.stringify(result.metrics))\n console.log(result.requests)\n}\n// GetMatrix()\nconst clamd = require('clamdjs');\n\nconst scanDomain = async (domain) => {\n  const scanner = clamd.createScanner('127.0.0.1', 3310);\n  const ip = await dnsLookup(domain);\n  try {\n    const result = await scanner.scanIp(ip);\n    console.log(`Scan result for ${domain}: ${result}`);\n  } catch (error) {\n    console.error(`Error scanning ${domain}: ${error}`);\n  } finally {\n    scanner.close();\n  }\n};\n\nconst dnsLookup = async (domain) => {\n  const { promisify } = require('util');\n  const dns = require('dns');\n  const lookup = promisify(dns.lookup);\n  try {\n    const { address } = await lookup(domain);\n    return address;\n  } catch (error) {\n    console.error(`Error looking up IP address for ${domain}: ${error}`);\n    return null;\n  }\n};\n\nscanDomain('healthkart.com');\n"
    },
    {
      "name": "connection",
      "type": "file",
      "extension": ".js",
      "content": "const mongoose = require('mongoose');\nconst IndectionsTypeModel = require(\"../models/IndecTIonSTypeModel\")\nconst Injectionstype = require(\"../utils/Injectionstype.json\")\n// Custom function to generate a slug\nfunction generateSlug(title) {\n  // Remove non-alphanumeric characters and replace spaces with hyphens\n  const cleanedSlug = title.replace(/[^\\w\\s]/gi, '').trim().replace(/\\s+/g, '-').toLowerCase();\n  return cleanedSlug;\n}\nasync function DBConnection(mongouri) {\n  try {\n    await mongoose.set('strictQuery', false);\n    await mongoose.connect(mongouri\n      , {\n        useNewUrlParser: true,\n        useUnifiedTopology: true,\n      }).then(async () => {\n        await IndectionsTypeModel.insertMany(Injectionstype.data, { ordered: false })\n        console.log(\"mongodb connected\")\n      }).catch((e) => console.log(e.message))\n  } catch (error) {\n    console.error(error.message);\n  }\n\n}\nvar whitelist = ['http://localhost:3000', 'http://localhost:5000']\nvar corsOptions = {\n  origin: function (origin, callback) {\n    if (typeof (origin) == \"undefined\") {\n      callback(null, true)\n    }\n    else if (whitelist.indexOf(origin) !== -1) {\n      callback(null, true)\n    } else {\n      callback(new Error('Not allowed by CORS'))\n    }\n  }\n}\nmodule.exports = { DBConnection, corsOptions }"
    },
    {
      "name": "constant",
      "type": "file",
      "extension": ".js",
      "content": "module.exports = {\n    secret: \"secret-key\",\n    key:\"pwd@1234\",\n    FIREBASE_PROJECT_ID: process.env.FIREBASE_PROJECT_ID,\n    FIREBASE_PRIVATE_KEY_ID: process.env.FIREBASE_PRIVATE_KEY_ID,\n    FIREBASE_PRIVATE_KEY:process.env.FIREBASE_PRIVATE_KEY && process.env.FIREBASE_PRIVATE_KEY.replace(/\\\\n/g, \"\\n\"),\n    FIREBASE_CLIENT_EMAIL: process.env.FIREBASE_CLIENT_EMAIL,\n    FIREBASE_CLIENT_ID: process.env.FIREBASE_CLIENT_ID,\n    FIREBASE_AUTH_URI: process.env.FIREBASE_AUTH_URI,\n    FIREBASE_TOKEN_URI: process.env.FIREBASE_TOKEN_URI,\n    FIREBASE_AUTH_CERT_URL: process.env.FIREBASE_AUTH_CERT_URL,\n    FIREBASE_CLIENT_CERT_URL: process.env.FIREBASE_CLIENT_CERT_URL\n  };"
    },
    {
      "name": "db",
      "type": "file",
      "extension": ".json",
      "content": "{\n    \"username\": \"handsinsecurity\",\n    \"password\": \"YxGDj8InSbMpXLia\",\n    \"cluster\": \"cluster0.xvqvt5s\",\n    \"dbname\": \"security\"\n}"
    },
    {
      "name": "keys",
      "type": "file",
      "extension": ".js",
      "content": "module.exports = {\n    googleClientID:\n      \"200245150083-cfgtfsupklmokrvvvfr30cdpvtf0lb6m.apps.googleusercontent.com\",\n    googleClientSecret: \"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\",\n    mongoURI: \"mongodb+srv://handsinsecurity:YxGDj8InSbMpXLia@cluster0.xvqvt5s.mongodb.net/security\",\n    cookieKey: \"hsdghsdghsd\",\n    FACEBOOK_APP_ID: \"GyFu8JttpR\",\n    FACEBOOK_APP_SECRET: \"GyFu8JttpR\",\n    FRONTEND_HOST:\"http://localhost:3000/\"\n  };"
    },
    {
      "name": "Security-fetch-api",
      "type": "file",
      "extension": ".js",
      "content": "module.exports={\n    internetDbVpnCatcherApi:\"https://internetdb.shodan.io/\",\n    \n}"
    },
    {
      "name": "securitytoolconfig",
      "type": "file",
      "extension": ".js",
      "content": "\nconst mongoURI=\"mongodb+srv://handsinsecurity:YxGDj8InSbMpXLia@cluster0.xvqvt5s.mongodb.net/security\"\nmodule.exports = {\n    mongoURI,\n  };"
    },
    {
      "name": "DomainController",
      "type": "file",
      "extension": ".js",
      "content": "const { checkDomainAvailability } = require(\"../utilities/functions/functions\");\r\nconst { sendResponse } = require(\"../utils/dataHandler\");\r\nconst UserModel = require('../models/User');\r\nconst { default: mongoose } = require(\"mongoose\");\r\nmodule.exports = {\r\n    addDomain: async (req, res) => {\r\n        try {\r\n            console.log(req.user)\r\n            const { domain } = req.body;\r\n            const result = await checkDomainAvailability(domain);\r\n            if (result) {\r\n                let existdomain = await UserModel.findOne({ _id: req.user.id, domain: { $in: [domain] } });\r\n                if (existdomain) {\r\n                    return sendResponse(res, 404, \"Domain already exist\");\r\n                } else {\r\n                    await UserModel.findOneAndUpdate({ _id: req.user.id }, { $push: { domain } });\r\n                    return sendResponse(res, 200, \"Domain added successfully\");\r\n                }\r\n\r\n            }\r\n            return sendResponse(res, 404, \"Domain not found\");\r\n        } catch (error) {\r\n            return sendResponse(res, 500, error.message);\r\n\r\n        }\r\n    },\r\n    getAllDomains: async (req, res) => {\r\n        try {\r\n            console.log(req.user)\r\n            let { page, limit } = req.query;\r\n            page = parseInt(page);\r\n            limit = parseInt(limit);\r\n\r\n            const startIndex = (page - 1) * limit;\r\n            let count = await UserModel.aggregate([\r\n                { $match: { _id: mongoose.Types.ObjectId(req.user.id) } },\r\n                { $project: { \"domain\": { \"$size\": \"$domain\" } } }\r\n            ]);\r\n            const data = await UserModel.aggregate([\r\n                { $match: { _id: mongoose.Types.ObjectId(req.user.id) } },\r\n                { $project: { \"domain\": { \"$slice\": [\"$domain\", startIndex, limit] } } },\r\n                { $unwind: \"$domain\" }\r\n\r\n            ]);\r\n\r\n            console.log(data)\r\n            if (data.length === 0) {\r\n\r\n                return sendResponse(res, 404, \"Records are not found\");\r\n            }\r\n            return sendResponse(res, 200, \"Fetch all domains\", { data, totalPages: count[0]?.domain });\r\n        } catch (error) {\r\n            console.error(error);\r\n            return sendResponse(res, 500, error.message);\r\n        }\r\n    },\r\n    deleteDomain: async (req, res) => {\r\n        try {\r\n            const { domain } = req.query;\r\n            const deleteSelectedDomain = await UserModel.findByIdAndUpdate({ _id: mongoose.Types.ObjectId(req.user.id), domain: { $in: [domain] } }, { $pull: { domain } });\r\n\r\n            if (deleteSelectedDomain) {\r\n                return sendResponse(res, 200, \"Deleted domain\");\r\n            }\r\n            return sendResponse(res, 404, \"Domain not found\");\r\n        } catch (error) {\r\n            console.error(error);\r\n            return sendResponse(res, 500, error.message);\r\n        }\r\n    },\r\n    updateDomain: async (req, res) => {\r\n        try {\r\n            const { domain, newDomain } = req.body;\r\n            const updateDomain = await UserModel.findOneAndUpdate({ domain }, { domain: newDomain })\r\n            if (updateDomain) {\r\n                return sendResponse(res, 200, \"Domain updated successfully\");\r\n            }\r\n            return sendResponse(res, 404, \"Domain not found\");\r\n        } catch (error) {\r\n            console.error(error);\r\n            return sendResponse(res, 500, error.message);\r\n        }\r\n    }\r\n\r\n};\r\n"
    },
    {
      "name": "EmailHarvesting.controller",
      "type": "file",
      "extension": ".js",
      "content": "// const { default: axios } = require(\"axios\")\nconst { sensitiveinfoinbodyModel } = require(\"../../models/SensitiveInfoInBodyModel\")\nconst { EmailVerifyModel, CrticalInformationInurl } = require(\"../../models/sensitivekeywordsModel\")\nconst { sendResponse } = require(\"../../utils/dataHandler\")\nconst { errorHandler } = require(\"../../utils/errorHandler\")\nexports.EmailHarvestingData = (req, res) => {\n   EmailVerifyModel.find({}).then((r) => {\n      if (r.length === 0) return sendResponse(res, 404, \"NotFound\", r)\n      if (r.length > 0) return sendResponse(res, 200, \"emasil harveting\", r)\n   }).catch((e) => {\n      return errorHandler(res, 500, \"Error\", e.message)\n   })\n}\nexports.SensitiveInfoInBody = (req, res) => {\n   sensitiveinfoinbodyModel.find({}).then((r) => {\n      console.log(r.length)\n      if (r.length === 0) return sendResponse(res, 404, \"NotFound\", r)\n      if (r.length > 0) return sendResponse(res, 200, \"emasil harveting\", r)\n   }).catch((e) => {\n      return errorHandler(res, 500, \"Error\", e.message)\n   })\n}\nexports.SensitiveinfoInUrl = (req, res) => {\n   CrticalInformationInurl.find({}).then((r) => {\n      console.log(r.length)\n      if (r.length === 0) return sendResponse(res, 404, \"NotFound\", r)\n      if (r.length > 0) return sendResponse(res, 200, \"sensitivekeywordsFoundModel\", r)\n   }).catch((e) => {\n      return errorHandler(res, 500, \"Error\", e.message)\n   })\n}\nexports.DefaultWebPage = async (req, res) => {\n\n   try {\n      const url = `${req.protocol}://${req.hostname}:${req.socket.localPort}`;\n      console.log({ url });\n      await axios.get(url)\n         .then((d) => {\n            return sendResponse(res, 200, \"Default web page present in browser\", {\n               DefaulWebPage: \"Default web page present in browser\"\n            });\n         })\n         .catch((e) => {\n            if (e.response.status === 404) {\n               return sendResponse(res, 200, \"Default web page not present in browser\", {\n                  DefaulWebPage: \"Default web page not present in browser\"\n               });\n            }\n         });\n   } catch (error) {\n      console.error(error);\n      return errorHandler(res);\n   }\n}\n"
    },
    {
      "name": "IP.controller",
      "type": "file",
      "extension": ".js",
      "content": "const WhitelistModels = require('../models/WhitelistModel');\r\nconst BlacklistModel = require('../models/BlacklistModel');\r\nconst { sendResponse } = require('../utils/dataHandler');\r\nconst { validateIPaddress } = require('../helpers/Validators');\r\n\r\n\r\nmodule.exports = {\r\n    addIP: async function (req, res) {\r\n        const { ip } = req.body;\r\n        const valid = await validateIPaddress(ip);\r\n\r\n        if (!valid) {\r\n            return sendResponse(res, 406, 'Please enter a valid IP address');\r\n        }\r\n\r\n        if (!ip) {\r\n            return sendResponse(res, 406, 'Please enter any IP address');\r\n        }\r\n\r\n        const exist = await WhitelistModels.findOne({ ip });\r\n\r\n        if (exist) {\r\n            return sendResponse(res, 401, 'Entered IP is already exist');\r\n        } else {\r\n            await WhitelistModels.create({ ip });\r\n            return sendResponse(res, 200, 'Added successfully');\r\n        }\r\n    },\r\n    getAllIPs: async function (req, res) {\r\n        try {\r\n            const data = await WhitelistModels.find({}, { _id: 0 });\r\n\r\n            if (data.length === 0) {\r\n                return sendResponse(res, 404, 'Records are not found');\r\n            } else {\r\n                return sendResponse(res, 200, 'Fetch all IPs', data);\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n            return sendResponse(res, 500, error.message);\r\n        }\r\n    },\r\n    deleteIP: async function (req, res) {\r\n        try {\r\n            const { ip } = req.query;\r\n            const deleteSelectedIP = await WhitelistModels.findOneAndDelete({ ip });\r\n\r\n            if (deleteSelectedIP) {\r\n                return sendResponse(res, 200, 'Deleted IP address');\r\n            } else {\r\n                return sendResponse(res, 404, 'IP address not found');\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n            return sendResponse(res, 500, error.message);\r\n        }\r\n    },\r\n    AddBlackListIp: async (req, res) => {\r\n        const { ip } = req.body\r\n        const valid = await validateIPaddress(ip)\r\n        if (!valid) {\r\n            return sendResponse(res, 406, \"Please enter valid ip address\")\r\n        }\r\n        if (!ip) {\r\n            return sendResponse(res, 406, \"Please enter any ip address\")\r\n        }\r\n        const exist = await BlacklistModel.findOne({ ip })\r\n        if (exist) {\r\n            return sendResponse(res, 401, \"Enter Ip is Already Exist\")\r\n        }\r\n        else if (!exist) {\r\n            await BlacklistModel.create({ ip })\r\n            return sendResponse(res, 200, \"Added Successfully\")\r\n        }\r\n        // switch(true){\r\n        //     case exist:\r\n        //         return sendResponse(res,401,\"Enter Ip is Already Exist\")\r\n        //         break;\r\n\r\n        // }\r\n        console.log()\r\n    },\r\n    BlackList: async (req, res) => {\r\n        try {\r\n            const data = await BlacklistModel.find({}, { _id: 0 })\r\n            if (data.length === 0) {\r\n                return sendResponse(res, 404, \"Records Are not Found\")\r\n            }\r\n            if (data.length > 0) {\r\n                return sendResponse(res, 200, \"fetch all ips\", data)\r\n            }\r\n        } catch (error) {\r\n            console.log(error)\r\n            return sendResponse(res, 500, error.message)\r\n        }\r\n\r\n    },\r\n    DeleteBlackListip: async (req, res) => {\r\n        try {\r\n            console.log(req.query)\r\n            const { ip } = req.query\r\n            console.log({ delete: ip })\r\n            const deleteselectedip = await BlacklistModel.findOneAndDelete({ ip })\r\n            if (deleteselectedip) {\r\n                return sendResponse(res, 200, \"delete ip address\")\r\n            }\r\n            return false\r\n            return sendResponse(res, 200, \"delete ip address\")\r\n        } catch (error) {\r\n            console.error(error)\r\n            return sendResponse(res, 500, error.message)\r\n        }\r\n\r\n    },\r\n}"
    },
    {
      "name": "JsSnippetController",
      "type": "file",
      "extension": ".js",
      "content": "const path=require('path')\r\nmodule.exports={\r\n    JsSnippet: (req, res) => {\r\n        // Resolve the path to the protected JavaScript file\r\n        const filePath = path.join(process.cwd(), 'src', 'public', 'protect.js');\r\n        // Send the file as the response\r\n        res.sendFile(filePath);\r\n      }\r\n}"
    },
    {
      "name": "middlwaresController",
      "type": "file",
      "extension": ".js",
      "content": "\nconst { default: mongoose } = require('mongoose')\nconst { middlewareModel } = require('../models/midlwaresModel')\nconst { sendResponse } = require('../utils/dataHandler')\nconst getMiddlewareController = async (req, res) => {\n  try {\n    const data = await middlewareModel.aggregate([\n      {\n        $match: {\n          user: mongoose.Types.ObjectId(req.user.id)\n        }\n      },\n      {\n        $project: {\n          appid: 0,\n          _id: 0,\n          user: 0,\n          createdAt: 0,\n          updatedAt: 0,\n          BlockUserMiddlware: 0,\n          ldapInjectionDetectorMiddlware: 0,\n          __v: 0\n        }\n      }\n    ])\n    if (data) {\n      sendResponse(res, 200, \"data fetch successfully\", data[0])\n    } else {\n      sendResponse(res, 404, \"data Not Found\")\n    }\n  } catch (error) {\n    console.error(error)\n  }\n}\nconst getMiddlewareControllerForClient = async (req, res) => {\n  try {\n    if (req.query.appid) {\n\n      const data = await middlewareModel.findOne({ appid: req.query.appid })\n      if (data) {\n        sendResponse(res, 200, \"data fetch successfully\", data)\n      } else {\n        sendResponse(res, 404, \"Your App id Not matched\")\n      }\n    } else {\n      return sendResponse(res, 404, \"Please enter appid\")\n    }\n\n  } catch (error) {\n    console.error(error)\n  }\n}\nconst findAndUpdateMiddlewareController = async (req, res) => {\n  console.log(req.body)\n  const body = req.body\n  try {\n    const data = await middlewareModel.findOneAndUpdate({ user: req.user.id }, body, { new: true }).select(\"-__v -appid -_id -user -createdAt -updatedAt -BlockUserMiddlware -ldapInjectionDetectorMiddlware\")\n    if (data) {\n      const message = Object.keys(req.body).toString().replace('Middlware', '') + \" \" + \"updated successfully\"\n      sendResponse(res, 200, message, data)\n      setTimeout(() => {\n        process.exit()\n      }, 5000);\n    } else {\n      sendResponse(res, 404, \"data Not Found\")\n    }\n\n  } catch (error) {\n    console.error(error)\n  }\n}\nconst middlwareController = {\n  findAndUpdateMiddlewareController,\n  getMiddlewareController,\n  getMiddlewareControllerForClient\n}\nmodule.exports = middlwareController"
    },
    {
      "name": "npmpackageinstaller",
      "type": "file",
      "extension": ".js",
      "content": "   //    const filelocation=__dirname +\"\\\\sample.json\"\n                    //    console.log({filelocation})\n                    //    const domain='sercuritytool.handsintechnology.in'\n                    //    const { exec } = require('child_process');\n                    //    // Read the contents of the sample.json file\n                    //     const contents = fs.readFileSync(filelocation, 'utf-8');\n                    //     // Parse the contents as JSON\n                    //     const data = JSON.parse(contents);\n                    //     // Extract the package names from the dependencies and devDependencies sections\n                    //     const packages = [\n                    //     ...Object.keys(data.dependencies || {}),\n                    //     ...Object.keys(data.devDependencies || {})\n                    //     ];\n                    //                     // Run the npm install command with the package names\n                    //     exec(`npm install --force  ${packages.join(' ')}`, (error, stdout, stderr) => {\n                    //         if (error) {\n                    //         console.error(`exec error: ${error}`);\n                    //         return ;\n                    //         }\n                        \n                    //         console.log(`stdout: ${stdout}`);\n                    //         console.error(`stderr: ${stderr}`);\n                    //     });\n                    //     const username = \"shivam\";\n                    //     const password = \"shivam123\";\n                    //     const cluster = \"cluster0.7ohdwhm\";\n                    //     const dbname = \"netflix-clone\";\n                    //     const mongouri=`mongodb+srv://${username}:${password}@${cluster}.mongodb.net/${dbname}` \n                    //      console.log(req.body)"
    },
    {
      "name": "sample",
      "type": "file",
      "extension": ".json",
      "content": "{\n    \"dependencies\": {\n        \"cookie-parser\": \"^1.4.6\",\n        \"cors\": \"^2.8.5\",\n        \"crypto-js\": \"^4.1.1\",\n        \"dotenv\": \"^16.0.3\",\n        \"ejs\": \"^3.1.8\",\n        \"express\": \"^4.18.2\",\n        \"express-fileupload\": \"^1.4.0\",\n        \"express-rate-limit\": \"^6.7.0\",\n        \"express-session\": \"^1.17.3\",\n        \"express-validator\": \"^6.14.2\",\n        \"helmet\": \"^6.0.1\",\n        \"https\": \"^1.0.0\",\n        \"jsonwebtoken\": \"^9.0.0\",\n        \"mongoose\": \"^6.7.5\",\n        \"morgan\": \"^1.10.0\",\n        \"node-device-detector\": \"^2.0.11\"\n      },\n    \"devDependencies\": {\n      \"nodemon\": \"^2.0.14\"\n    }\n  }"
    },
    {
      "name": "ServerChecker.controller",
      "type": "file",
      "extension": ".js",
      "content": "const http = require('http');\nconst mongoose = require('mongoose')\nconst { sendResponse } = require('../utils/dataHandler');\nconst { errorHandler } = require('../utils/errorHandler');\nconst ResponseCodesLoginPageModels = require('../models/ResponseCodesLoginPageModels');\nconst ServerErrorResponseCodes = require('../models/ServerErrorResponseCodes');\nconst { PasswordValidateModel } = require('../models/PasswordVaildateModel');\nconst { hasRobotsTxt } = require('../utils/functions');\nconst { ClientLoagsModel } = require('../models/ClientLoagsModel');\nmodule.exports = {\n  getRobotsTxt: async (req, res) => {\n    try {\n\n      await hasRobotsTxt(req.query.domain).then((d) => {\n        return sendResponse(res, 200, d, d)\n      }).catch((err) => {\n        return sendResponse(res, 500, err, err)\n      }\n      )\n      // return sendResponse(res, 200, d, d)\n\n\n    } catch (err) {\n      console.log(\"errorr\", err)\n      errorHandler(res, 500, err)\n    }\n  }\n  ,\n  PasswordValidatorController: async (req, res) => {\n    try {\n\n      const PasswordValidatordata = await PasswordValidateModel.findOne({}, { _id: 0, __v: 0 })\n      const data = {\n        PasswordValidatordata,\n      };\n      return sendResponse(res, 200, \"data fetch\", data);\n    } catch (error) {\n      console.error(error);\n      return res.status(500).send(`Error: ${error.message}`);\n    }\n  },\n\n  ResponseCodesLoginController: async (req, res) => {\n    try {\n      const PasswordValidatordata = await ResponseCodesLoginPageModels.find({}, { _id: 0, __v: 0, createdAt: 0, updatedAt: 0 })\n      return sendResponse(res, 200, \"data fetch\", PasswordValidatordata)\n    } catch (error) {\n      console.error(error);\n      res.write(`Error: ${error}`);\n    }\n  },\n  ServerErrorResponseCodesController: async (req, res) => {\n    try {\n      const PasswordValidatordata = await ServerErrorResponseCodes.find({}, { _id: 0, __v: 0, createdAt: 0, updatedAt: 0 })\n      return sendResponse(res, 200, \"data fetch\", PasswordValidatordata)\n    } catch (error) {\n      console.error(error);\n      res.write(`Error: ${error}`);\n    }\n  },\n  sessionData: async (req, res) => {\n    try {\n      console.log(\"user_id\", req.user.id)\n      let data = await ClientLoagsModel.aggregate([\n        { $match: { user: mongoose.Types.ObjectId(req.user.id) } },\n        { $project: { \"LogsData\": 1 } }\n      ]);\n      if (data.length === 0) {\n        return sendResponse(res, 404, \"Records are not found\");\n      }\n      // Combine duplicate properties and merge their values into arrays\n      const originalLogsData = data[0].LogsData.reduce((accumulator, current) => {\n        Object.entries(current).forEach(([key, value]) => {\n          if (accumulator[key]) {\n            if (!Array.isArray(accumulator[key])) {\n              accumulator[key] = [accumulator[key]];\n            }\n            accumulator[key].push(value.toString());\n          } else {\n            accumulator[key] = value;\n          }\n        });\n\n        return accumulator;\n      }, {});\n      const cleanedLogsData = Object.fromEntries(\n        Object.entries(originalLogsData).map(([key, value]) => {\n          // Use a Set to track unique values\n          const uniqueValues = new Set(Array.isArray(value) ? value : [value]);\n          const cleanedArray = Array.from(uniqueValues);\n          return [key, cleanedArray];\n        })\n      );\n      let sessionobj = {}\n      if (cleanedLogsData) {\n        if (cleanedLogsData.session) {\n          // Session token being passed in other areas apart from a cookie\n          sessionobj[\"Session token being passed in other areas apart from a cookie\"] = \"No\"\n          if (cleanedLogsData.session.includes(\"Session token being passed in other areas apart from a cookie\")) {\n            sessionobj[\"Session token being passed in other areas apart from a cookie\"] = \"Yes\"\n          }\n          // An adversary can hijack user sessions by session fixation\n          sessionobj[\"An adversary can hijack user sessions by session fixation\"] = \"\"\n          if (cleanedLogsData.session.includes(\"Regularly regenerating session IDs to prevent session fixation attack\")) {\n            sessionobj[\"An adversary can hijack user sessions by session fixation\"] = \"No\"\n          } else {\n            sessionobj[\"An adversary can hijack user sessions by session fixation\"] = \"Yes\"\n\n          }\n          // Session does not expire on closing the browser\n          sessionobj[\"Session does not expire on closing the browser\"] = \"No\"\n          if (cleanedLogsData.session.includes(\"Session does not expire on closing the browser\")) {\n            sessionobj[\"Session does not expire on closing the browser\"] = \"Yes\"\n          }\n          // Session time-out is high (or) not implemented\n          let stringvalue = \"\"\n          //  Session \n          if (cleanedLogsData.session.includes(\"Session_time_out is Normal\")) {\n            stringvalue += \"Session Time Out is Normal\" + \",\"\n          }\n          if (cleanedLogsData.session.includes(\"Session_time_out is Low\")) {\n            stringvalue += \"Session Time Out is Low\" + \",\"\n          }\n          if (cleanedLogsData.session.includes(\"Session_time_out is High\")) {\n            stringvalue += \"Session Time Out is High\" + \",\"\n          }\n          if (cleanedLogsData.session.includes(\"Session is Infinite\")) {\n            stringvalue += \"Session is Infinite\" + \",\"\n          }\n          if (cleanedLogsData.session.includes(\"Not Implemented\")) {\n            stringvalue += \"Not Implemented\" + \",\"\n          }\n          if (cleanedLogsData.session.includes(\"Session Found\")) {\n            stringvalue += \"Session Found\" + \",\"\n          }\n          sessionobj[\"Session time-out is high (or) not implemented\"] = stringvalue\n        }\n      }\n      return sendResponse(res, 200, \"Fetch all domains\", { LogsData: cleanedLogsData, sessionobj });\n    } catch (error) {\n      return sendResponse(res, 500, error.message);\n\n    }\n  }\n\n}"
    },
    {
      "name": "ServerFileinfoController",
      "type": "file",
      "extension": ".js",
      "content": ""
    },
    {
      "name": "Sqllogs.controller",
      "type": "file",
      "extension": ".js",
      "content": "const { default: mongoose } = require('mongoose')\nconst { Project_Security_Logs } = require('../models/Project_Security_Logs')\nconst { sendResponse } = require('../utils/dataHandler')\nconst { errorHandler } = require('../utils/errorHandler')\nconst getAllSqllLogs = async (req, res) => {\n    try {\n        // Get total count of users\n        const { page, limit, type } = req.query;\n        let obj = {}\n        if (type) {\n            obj[\"type\"] = type\n        }\n        const totalCount = await Project_Security_Logs.countDocuments(obj);\n        //console.log({ totalCount })\n        // Convert page and limit to numbers\n        const pageNumber = totalCount > 10 ? parseInt(page) || 1 : 1;\n        const limitNumber = parseInt(limit) || 10;\n        // Calculate the skip value\n        const skip = (pageNumber - 1) * limitNumber;\n        const pipeline = [\n            {\n                $match: obj,\n            },\n            // Pagination\n            { $sort: { createdAt: -1 } },\n            { $skip: skip },\n            { $limit: limitNumber },\n            // Sort by username in ascending order\n        ];\n        const data = await Project_Security_Logs.aggregate(pipeline)\n        sendResponse(res, 200, \"data fetch successfully\", {\n            data,\n            totalCount,\n            currentPage: pageNumber,\n            totalPages: Math.ceil(totalCount / limitNumber)\n        })\n    } catch (error) {\n        errorHandler(res, error)\n    }\n}\nconst getSingleSqllLogs = async (req, res) => {\n    try {\n        const ip = req.body.ip\n        if (ip) {\n            const data = await Project_Security_Logs.findOne({ ip })\n            sendResponse(res, 200, \"data fetch successfully\", data)\n        } else {\n            sendResponse(res, 404, \"plesae enter valid id\")\n        }\n    } catch (error) {\n        errorHandler(res, error)\n    }\n}\nconst getSingleSqllLogsCount = async (req, res) => {\n    try {\n        const alltypesinjection = require(\"../utils/Injectionstype.json\").data\n        const typeTitles = alltypesinjection.map(entry => entry.slug);\n        // const data = await Project_Security_Logs.find().where({ type: req.query.type }).count()\n        // const data = await Project_Security_Logs.aggregate([\n\n        //     {\n        //         $match: { user: mongoose.Types.ObjectId(req.user.id) }\n        //     },\n        //     { $unwind: \"$data\" },\n        //     {\n        //         $match: { \"$data.type\": { $in: typeTitles } }\n        //     },\n        //     {\n        //         $facet: {\n        //             counts: [\n        //                 {\n        //                     $group: {\n        //                         _id: \"$title\",\n        //                         count: { $sum: 1 }\n        //                     }\n        //                 }\n        //             ]\n        //         }\n        //     },\n        //     {\n        //         $project: {\n        //             combinedCounts: {\n        //                 $map: {\n        //                     input: typeTitles,\n        //                     as: \"typeTitle\",\n        //                     in: {\n        //                         title: \"$$typeTitle\",\n        //                         count: {\n        //                             $ifNull: [\n        //                                 { $arrayElemAt: [{ $filter: { input: \"$counts\", as: \"c\", cond: { $eq: [\"$$c._id\", \"$$typeTitle\"] } } }, 0] },\n        //                                 { _id: \"$$typeTitle\", count: 0 }\n        //                             ]\n        //                         }\n        //                     }\n        //                 }\n        //             }\n        //         }\n        //     },\n        //     {\n        //         $unwind: \"$combinedCounts\"\n        //     },\n        //     {\n        //         $replaceRoot: { newRoot: \"$combinedCounts\" }\n        //     }\n        // ])\n        // if (data) {\n        //     sendResponse(res, 200, \"data fetch successfully\", data)\n        // } else {\n        //     errorHandler(res, 404, \"data not found\")\n        // }\n\n        res.json({\n            message: 'okay'\n        })\n\n    } catch (error) {\n        errorHandler(res, error)\n    }\n}\nconst deleteSingleSqllLogs = async (req, res) => {\n    try {\n        const ip = req.body.ip\n        console.log(ip)\n\n        const data = await Project_Security_Logs.findOneAndDelete({ ip })\n        if (data) {\n            sendResponse(res, 200, \"data deleted successfully\", data)\n        } else {\n            sendResponse(res, 404, \"please enter valid id\", data)\n        }\n\n    } catch (error) {\n        errorHandler(res, error)\n    }\n}\nconst deleteAllSqllLogs = async (req, res) => {\n    const ip = req.body.ip\n    if (req.body.ip == \"\") {\n        console.log(\"empty\")\n    }\n    console.log(ip)\n    try {\n        if (ip) {\n            const data = await Project_Security_Logs.deleteMany({ ip: ip })\n            sendResponse(res, 200, \"data deleted  successfully\", data)\n        } else {\n            errorHandler(res, 404, \"data not found\")\n        }\n    } catch (error) {\n        errorHandler(res, error)\n    }\n}\n\nconst Sqllogs = {\n    deleteAllSqllLogs,\n    getAllSqllLogs,\n    getSingleSqllLogs,\n    deleteSingleSqllLogs,\n    getSingleSqllLogsCount,\n}\nmodule.exports = Sqllogs"
    },
    {
      "name": "UserController",
      "type": "file",
      "extension": ".js",
      "content": "const User = require(\"../models/User\")\nconst jwt = require(\"jsonwebtoken\");\nconst { sendResponse } = require(\"../utils/dataHandler\");\nconst { errorHandler } = require(\"../utils/errorHandler\");\nconst crypto = require('crypto');\nconst { checkDomainAvailability, validatePassword } = require(\"../utilities/functions/functions\");\nvar CryptoJS = require(\"crypto-js\");\nconst { middlewareModel } = require(\"../models/midlwaresModel\");\nconst { v4: uuidv4 } = require('uuid');\nconst { ValidateUserSignUp, ValidateUserLogin } = require(\"../helpers/Validators\");\nconst key = \"12345678911012121234567891101212\"\nconst searchFilesRemotely = async (remotePath, searchTerm, ssh) => {\n  try {\n    const response = await ssh.execCommand(`find ${remotePath} -type f -exec grep -l \"${searchTerm}\" {} +`);\n    const files = response.stdout.split('\\n').filter(Boolean);\n    const searchResults = searchInFiles(ssh, files, searchTerm);\n    const directories = files.filter(file => file.endsWith('/'));\n    for (const directory of directories) {\n      const subdirectory = directory.slice(remotePath.length);\n      await searchFilesRemotely(config, `${remotePath}${subdirectory}`, searchTerm);\n    }\n    return searchResults\n\n  } catch (error) {\n    return error\n  }\n};\nconst searchInFiles = async (ssh, files, searchTerm) => {\n  const searchResults = [];\n\n  for (const file of files) {\n    try {\n      const response = await ssh.execCommand(`grep -rnw \"${file}\" -e \"${searchTerm}\" --exclude-dir=\"/node_modules\" --exclude-dir=\"./nvm\"  --exclude-dir=\"/nvm\"  --exclude-dir=\"./node_modules\"`);\n\n      if (response.stdout) {\n        if (!file.includes('node_modules')) {\n          const lines = response.stdout.split('\\n');\n          lines.forEach(async (line, index) => {\n            const match = line.match(/(var|const|let)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*=\\s*express\\(/);\n            if (match) {\n              const variableName = match[2];\n              const nextLine = lines[index + 1];\n              const filePath = file.replace(/\"/g, '\\\\\"');\n              const modifiedContent = `${line}\\nconsole.log(\"je\")`;\n\n              if (filePath && nextLine) {\n                const escapedFilePath = filePath.replace(/\"/g, '\\\\\"');\n                const escapedContent = modifiedContent.replace(/\"/g, '\\\\\"').replace(/\\$/g, '\\\\$');\n                const insertLineCommand = `sed -i \"/${line.replace(/\"/g, '\\\\\"')}/{n;a ${escapedContent}\" \"${escapedFilePath}\"`;\n                await ssh.execCommand(insertLineCommand);\n              }\n              searchResults.push({\n                file,\n                line,\n                variableName,\n                modifiedContent\n              });\n            }\n          });\n        }\n\n      }\n    } catch (err) {\n      console.error(`Error searching file ${file}:`, err);\n    }\n  }\n\n  return searchResults;\n};\n\nconst SetUp = async (req, res) => {\n  const { NodeSSH } = require('node-ssh');\n  const ssh = new NodeSSH();\n  const run = async () => {\n    try {\n      await ssh.connect({\n        host: '81.0.246.139',\n        port: 22,\n        username: 'handsintechnology-autotest',\n        password: 'sadashiv@612',\n      });\n\n      console.log('SSH connection established');\n      const pwdCommand = 'pwd';\n      const findAppCommand = 'find . \\\\( -path \"./node_modules\" -o -path \"./nvm\" -o -path \"./tmp\" \\\\) -prune -o -type f -name \"app.js\" -exec dirname {} \\\\;';\n      const findServerCommand = 'find . \\\\( -path \"./node_modules\" -o -path \"./nvm\" -o -path \"./tmp\" \\\\) -prune -o -type f -name \"server.js\" -exec dirname {} \\\\;';\n      const getPackageJsonCommand = 'find . \\\\( -path \"./node_modules\" -o -path \"./nvm\" -o -path \"./tmp\" \\\\) -prune -o -type f -name \"package.json\" -exec cat {} \\\\;';\n      const commandResult = await ssh.execCommand(pwdCommand);\n      if (commandResult.code === 0) {\n        const directoryPath = commandResult.stdout.trim();\n        const d = await searchFilesRemotely(directoryPath, \"express()\", ssh)\n        console.log(d)\n        return false\n        //    \n        const findAppResult = await ssh.execCommand(`cd ${directoryPath} && ${findAppCommand}`);\n        const appDirectory = findAppResult.stdout.trim();\n\n        if (appDirectory !== '') {\n          const getPackageJsonResult = await ssh.execCommand(`cd ${appDirectory} && ${getPackageJsonCommand}`);\n          const packageJsonContent = JSON.parse(getPackageJsonResult.stdout);\n          console.log({ packageJsonContent })\n          if (packageJsonContent && packageJsonContent.scripts?.start) {\n            const start = packageJsonContent.scripts?.start\n            if (start.includes('node')) {\n              console.log('start script:', start);\n            }\n\n          }\n          return false\n          const installCommand = `cd ${appDirectory} && npm i auto-protect-node && npm install pm2`;\n          const installResult = await ssh.execCommand(installCommand);\n          console.log(installResult);\n\n          const restartCommand = `cd ${appDirectory} && npx pm2 restart app.js`;\n          const restartResult = await ssh.execCommand(restartCommand);\n          console.log(restartResult);\n        } else {\n          const findServerResult = await ssh.execCommand(`cd ${directoryPath} && ${findServerCommand}`);\n          const serverDirectory = findServerResult.stdout.trim();\n\n          if (serverDirectory !== '') {\n            const getPackageJsonResult = await ssh.execCommand(`cd ${serverDirectory} && ${getPackageJsonCommand}`);\n            const packageJsonContent = JSON.parse(getPackageJsonResult.stdout);\n            console.log({ packageJsonContent })\n            const installCommand = `cd ${serverDirectory} && npm i auto-protect-node && npm install pm2`;\n            const installResult = await ssh.execCommand(installCommand);\n            console.log(installResult);\n            const restartCommand = `cd ${serverDirectory} && npx pm2 restart server.js`;\n            const restartResult = await ssh.execCommand(restartCommand);\n            console.log(restartResult);\n          } else {\n            console.log('app.js or server.js not found');\n          }\n        }\n      } else {\n        console.error(`Failed to execute command: ${commandResult.stderr}`);\n      }\n    } catch (err) {\n      console.error('Error connecting to SSH:', err);\n    } finally {\n      ssh.dispose(); // Close the SSH connection\n    }\n  };\n  run();\n}\n// Register\nRegister = async (req, res) => {\n  try {\n    // const isValidHostname = await checkDomainAvailability(req.body.domain);\n    const { containsSpecialCharacter, containsLowercase, containsUppercase, containsNumber } = await validatePassword(req.body.password)\n    if (!containsSpecialCharacter) {\n      return sendResponse(res, 406, \"Please enter password 1 Special charater\");\n    }\n    else if (!containsLowercase) {\n      return sendResponse(res, 406, \"Please enter password 1  Lowercase letter\",);\n    }\n    else if (!containsUppercase) {\n      return sendResponse(res, 406, \"Please enter password 1  Uppercase letter\",);\n    }\n    else if (!containsNumber) {\n      return sendResponse(res, 406, \"Please enter password 1  Number letter\",);\n    }\n    const error = ValidateUserSignUp(req.body)\n    if (error) {\n      return sendResponse(res, 400, error,);\n    }\n    const user = await User.findOne({ email: req.body.email })\n    if (user) {\n      return sendResponse(res, 409, \"Domain is already registered\", {});\n    }\n    else if (!user) {\n      const appid = uuidv4(); // ⇨ '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'\n      var encrypted = CryptoJS.AES.encrypt(req.body.password, key).toString();\n      const user = await User.create({\n        email: req.body.email,\n        password: encrypted,\n        appid\n      });\n      await middlewareModel.create({\n        user: user._id,\n        appid,\n        SqlDetectorMiddlware: true,\n        BotMiddleware: true,\n        VpnProtectMiddlware: true,\n        SpamMiddleware: true,\n        xssInjectionDetectorMiddlware: true,\n        checkHTMLMiddlware: true,\n        NosqlDetectorMiddlware: true,\n        commandlineinjectionMiddlware: true,\n        ldapInjectionDetectorMiddlware: false,\n        BlockUserMiddlware: true\n      })\n      const token = jwt.sign({ id: user._id, appid: user.appid }, process.env.JWT_SECRET, { expiresIn: \"1d\" })\n      return sendResponse(res, 200, \"logibn successfully\", { token, appid: user.appid });\n    }\n  } catch (error) {\n    console.log(error)\n    return errorHandler(res)\n  }\n}\n// Roles\n\n// Login\n\nLogin = async (req, res) => {\n  try {\n    const error = ValidateUserLogin(req.body)\n    if (error) {\n      return sendResponse(res, 400, error,);\n    }\n\n    const user = await User.findOne({ email: req.body.email })\n    if (user) {\n      console.log(user.password)\n      var bytes = CryptoJS.AES.decrypt(user.password, key);\n      var decrypted = bytes.toString(CryptoJS.enc.Utf8);\n      if (decrypted == req.body.password) {\n        const token = jwt.sign({ id: user._id, appid: user.appid }, process.env.JWT_SECRET, { expiresIn: \"1d\" })\n        return sendResponse(res, 200, \"login successfully\", { token, appid: user.appid });\n      } else {\n        return sendResponse(res, 406, \"please enter valid credentials\")\n      }\n    }\n    else if (!user) {\n      return sendResponse(res, 404, \"user does not exist\");\n    }\n\n  } catch (error) {\n    console.log(error)\n    return errorHandler(res)\n  }\n\n}\n\n\n// =\nGoogleRegister = async (req, res) => {\n  try {\n    const { token } = req.body\n    const ticket = await client.verifyIdToken({\n      idToken: token,\n      audience: GOOGLE_CLIENT_ID,\n    });\n    const profile = ticket.getPayload()\n    const UserExists = await User.findOne({ email: profile.email })\n    if (UserExists) {\n      // Create token\n      const token = jwt.sign(\n        { user_id: UserExists._id, isAdmin: UserExists.isAdmin, email: UserExists.email },\n        process.env.JWT_SECRET,\n        {\n          expiresIn: \"2h\",\n        }\n      );\n\n      const tokenuser = {\n        firstName: UserExists.firstName,\n        lastName: UserExists.lastName,\n        picture: UserExists.picture,\n        email: UserExists.email,\n        accessToken: token\n      }\n\n      return res.status(200).send(tokenuser)\n    } else {\n      const user = await User.create({\n        firstName: profile.given_name,\n        lastName: profile.family_name,\n        picture: profile.picture,\n        email: profile.email,\n      })\n\n      // Create token\n      const token = jwt.sign(\n        { user_id: user._id, isAdmin: user.isAdmin, email: user.email },\n        process.env.JWT_SECRET,\n        {\n          expiresIn: \"1m\",\n        }\n      );\n\n      const tokenuser = {\n        firstName: user.firstName,\n        lastName: user.lastName,\n        picture: user.picture,\n        email: user.email,\n        accessToken: token\n\n      }\n      // Getting the set Headers\n      // Printing those headers\n\n      return res.status(200).send(tokenuser)\n    }\n  } catch (error) {\n    return { error: \"Invalid user detected. Please try again\" };\n  }\n\n}\nLogout = async (req, res) => {\n  try {\n    const authHeader = req.headers.authorization;\n    if (!authHeader) {\n      Authenticate = false;\n      return sendResponse(res, 403, \"missing authorization\", { Authenticate })\n    }\n    const [authType, token] = authHeader.split(' ');\n\n    jwt.destroy(token)\n    sendResponse(res, 200, \"logout successfully\")\n  } catch (error) {\n    console.log({ error });\n    return errorHandler(res)\n  }\n}\n\n// =\nFBCustomerLogin = async function (req, res, next) {\n  const {\n    userID,\n    accessToken,\n  } = req.body;\n\n  let fbUrl = `https://graph.facebook.com/${userID}?fields=id,name,email,picture&access_token=${accessToken}`;\n  const response = await fetch(fbUrl, {\n    method: \"GET\",\n  })\n  const data = await response.json()\n  const { email, name, picture } = data\n\n  var values = name.split(\" \");\n  var firstName = values[0];\n  var lastName = name.substr(name.indexOf(' ') + 1);\n  var profilepic = picture.data.url\n  const UserExists = await User.findOne({ email })\n  if (UserExists) {\n    // Create token\n    const token = jwt.sign(\n      { user_id: UserExists._id, isAdmin: UserExists.isAdmin, email: UserExists.email },\n      process.env.JWT_SECRET,\n      {\n        expiresIn: \"1m\",\n      }\n    );\n\n    const tokenuser = {\n      firstName: UserExists.firstName,\n      lastName: UserExists.lastName,\n      picture: UserExists.picture,\n      email: UserExists.email,\n      accessToken: token\n\n    }\n\n    // Getting the set Headers\n    const headers = response.getHeaders();\n\n    // Printing those headers\n\n    return res.status(200).send(tokenuser)\n  } else {\n    const user = await User.create({\n      firstName,\n      lastName,\n      picture: picture.data.url,\n      email,\n    })\n\n    // Create token\n    const token = jwt.sign(\n      { user_id: user._id, isAdmin: user.isAdmin, email: user.email },\n      process.env.JWT_SECRET,\n      {\n        expiresIn: \"1m\",\n      }\n    );\n\n    const tokenuser = {\n      firstName: user.firstName,\n      lastName: user.lastName,\n      picture: user.picture,\n      email: user.email,\n      accessToken: token\n\n    }\n\n    // Getting the set Headers\n    const headers = response.getHeaders();\n\n    // Printing those headers\n\n    return res.status(200).send(tokenuser)\n  }\n};\n//   \nconst Profile = async (req, res) => {\n  try {\n    const user = await User.findById(req.user.id).select(\"email\")\n    if (user) {\n      return sendResponse(res, 200, \"Fetch user\", user);\n    } else {\n      return sendResponse(res, 404, \"User not found\");\n    }\n  }\n  catch (error) {\n    console.log(error)\n    return errorHandler(res)\n  }\n}\nconst UserController = {\n  Login,\n  Logout,\n  Register,\n  GoogleRegister,\n  FBCustomerLogin,\n  SetUp,\n  Profile\n}\n\nmodule.exports = {\n  UserController\n}\n"
    },
    {
      "name": "vulnurability.controller copy",
      "type": "file",
      "extension": ".js",
      "content": "\r\nconst axios = require('axios');\r\nconst NodeCache = require(\"node-cache\");\r\nconst cache = new NodeCache({ stdTTL: 60 }); // Cache with a TTL of 60 seconds\r\nconst url = require('url')\r\nconst mongoose = require(\"mongoose\");\r\nconst { scanXSSvulnerability, scanRedirectvulnerability, scanSessionvulnerability, scanSQLvulnerability, scanHardCodedData, scanHardPasswordHashing, scanDirectoryOptionMethod, ScanDangerousMethods, DefaultWebPage, checkDirectoryListing, scanWebsite, generateWebsiteReport, } = require(\"../../utils/scanClientData\");\r\nconst { CallEmailVerify, checkDomainAvailability, hashttpParametersPollutionavailable, Nodeversion } = require(\"../../utilities/functions/functions\");\r\nconst { Project_Security_Logs } = require(\"../../models/Project_Security_Logs\");\r\nconst { PasswordKeyModel } = require(\"../../models/PasswordKeysModel\");\r\nconst { CrticalInformationInurl, EmailVerifyModel, } = require(\"../../models/sensitivekeywordsModel\");\r\nconst { isHashedPassword, checkForSensitiveInfoInBody, CheckPasswordKeyText, CreatStatusCodesDetails, } = require(\"../../utils/functions\");\r\nconst { sensitivedata, passwordkeys, } = require(\"../../sensitive/availableapikeys\");\r\nconst { ServerReportModel } = require(\"../../models/ServerModels\");\r\nconst { ClientLoagsModel } = require(\"../../models/ClientLoagsModel\");\r\nconst { sensitiveinfoinbodyModel } = require(\"../../models/SensitiveInfoInBodyModel\");\r\nconst { SSLverifier } = require(\"../../utils/Downtimemonitor\");\r\nconst { sendResponse } = require(\"../../utils/dataHandler\");\r\nconst { errorHandler } = require(\"../../utils/errorHandler\");\r\nconst User = require(\"../../models/User\");\r\nconst { NodeVersionModel } = require(\"../../models/NodeVersionModel\");\r\nconst { httpParameterPollutionModel } = require('../../models/httpParameterPollutionModel');\r\nconst { PasswordValidateModel } = require('../../models/PasswordVaildateModel');\r\nconst SensitiveInfoInBodyModel = require('../../models/SensitiveInfoInBodyModel');\r\nconst { getEndpoints } = require('../../helpers/getEndpoint');\r\n\r\nmodule.exports = {\r\n    httpparameterpollution: async (req, res) => {\r\n        try {\r\n            const data = await httpParameterPollutionModel.findOne({ appid: req.user.appid, isPolluted: true })\r\n            if (!data) {\r\n                return sendResponse(res, 200, \"http parameter pollution is not availble\", \"http parameter pollution is not availble\")\r\n            }\r\n            return sendResponse(res, 200, \"fetch data\", \"http parameter pollution is not availble\")\r\n\r\n        }\r\n        catch (error) {\r\n            console.error(\"Error retrieving allowed domains:\", error.message);\r\n            return errorHandler(error.message)\r\n        }\r\n    },\r\n    sslverify: async (req, res) => {\r\n        try {\r\n            const hostname = req.query.hostname\r\n            if (hostname) {\r\n                // console.log(\"get hostname\", hostname)\r\n                const data = await SSLverifier(hostname)\r\n                // console.log(\"get data\", data)\r\n                return sendResponse(res, 200, \"fetch ssl \", data)\r\n            } else {\r\n                return sendResponse(res, 200, \"Hostname is required\", {})\r\n            }\r\n            // Example usage\r\n        } catch (error) {\r\n            console.error(\"Error retrieving allowed domains:\", error.message);\r\n            return errorHandler(res.message)\r\n        }\r\n    },\r\n    alloweddomains: async (req, res) => {\r\n\r\n        try {\r\n\r\n            const appid = req.body.appid;\r\n            const application = req.body.application\r\n            const hostname = req.body.hostname\r\n            // const params = req.body.params\r\n            const nodejsveresion = req.body.nodejsveresion\r\n            const fileContent = req.body.fileContent\r\n            console.log(\"application\", application)\r\n            const middlewares = application?.filter((layer) => layer.name !== \"router\" && layer.name !== \"bound dispatch\" && layer.name !== \"jsonParser\" && layer.name !== \"<anonymous>\" && layer.name !== \"urlencodedParser\" && layer.name !== \"expressInit\" && layer.name !== \"query\" && layer.name !== \"Middleware\")?.map((layer) => layer.name) || [];\r\n            // Person is verified, proceed to serve the file\r\n\r\n            const alloweddomains = await User.findOne(\r\n                { domain: { $in: [hostname] }, appid },\r\n                { password: 0, createdAt: 0, updatedAt: 0 }\r\n            ).lean();\r\n\r\n            if (alloweddomains) {\r\n                return res.status(200).json(alloweddomains);\r\n            } else {\r\n                return res.status(404).json(\"please enter valid details\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error retrieving allowed domains:\", error);\r\n            return res.status(500).json(\"Internal server error\");\r\n        }\r\n    },\r\n    createuserdetails: async (req, res) => {\r\n        try {\r\n            let { UserRawData, ip, type, appid } = req.body;\r\n            ip = \"206.84.234.30\"\r\n            const update = UserRawData;\r\n            const alloweddomains = await User.findOne(\r\n                { appid },\r\n                { password: 0, createdAt: 0, updatedAt: 0 }\r\n            ).lean();\r\n            if (alloweddomains) {\r\n                const finduser = await Project_Security_Logs.findOne({ user: mongoose.Types.ObjectId(alloweddomains._id), 'data.ip': ip });\r\n\r\n                if (finduser) {\r\n                    // Update existing element in the array\r\n                    await Project_Security_Logs.findOneAndUpdate(\r\n                        { user: mongoose.Types.ObjectId(alloweddomains._id), 'data.ip': ip },\r\n                        {\r\n                            $set: {\r\n                                ...update,\r\n                                ip: \"data.$.ip\",\r\n                            }\r\n                        },\r\n                    );\r\n                } else {\r\n                    // Add a new element to the array\r\n                    let d = await Project_Security_Logs.findOneAndUpdate(\r\n                        { user: mongoose.Types.ObjectId(alloweddomains._id) },\r\n                        {\r\n                            $push: {\r\n                                data: {\r\n                                    ...update,\r\n                                    ip,\r\n                                    // other fields to initialize for the new element\r\n                                }\r\n                            }\r\n                        }\r\n                    );\r\n                    console.log({ d })\r\n                }\r\n\r\n\r\n            } else {\r\n                res.status(403).json(\"you are not allowed\");\r\n            }\r\n        } catch (error) {\r\n            console.log(\"createuserdetails\", error)\r\n\r\n        }\r\n        //  return  res.status(200).json(\"Ok\")\r\n    },\r\n    responsecodeavailableornot: async (req, res) => {\r\n        try {\r\n            let { data, hostname, url, appid } = req.body;\r\n            const alloweddomains = await User.findOne(\r\n                { appid },\r\n                { password: 0, createdAt: 0, updatedAt: 0 }\r\n            ).lean();\r\n            if (alloweddomains) {\r\n                if (data.resoponsecodedata.code) {\r\n                    await CreatStatusCodesDetails(\r\n                        data.resoponsecodedata.code,\r\n                        data.resoponsecodedata.phrase,\r\n                        url,\r\n                        hostname,\r\n                        id = alloweddomains._id\r\n                    );\r\n                }\r\n                sendResponse(res, 200, \"fetch\", \"ok\")\r\n            } else {\r\n                errorHandler(res, 403, \"you are not allowed\");\r\n            }\r\n        } catch (error) {\r\n            errorHandler(res, 500, error.message)\r\n        }\r\n    },\r\n    emailverify: async (req, res) => {\r\n        try {\r\n            var { emailid, hostname, url, appid } = req.body;\r\n\r\n            const alloweddomains = await User.findOne(\r\n                { appid },\r\n                { password: 0, createdAt: 0, updatedAt: 0 }\r\n            ).lean();\r\n            if (alloweddomains) {\r\n                if (emailid) {\r\n                    await CallEmailVerify(email = emailid, hostname);\r\n                    res.status(200).json(\"workflow\");\r\n                } else {\r\n                    res.status(404).send(\"not found\");\r\n                }\r\n            } else {\r\n                res.status(403).json(\"you are not allowed\");\r\n            }\r\n        } catch (error) {\r\n            return res.status(500).json({ message: \"Internal Server Error\" });\r\n        }\r\n    },\r\n    passwordkeys: async (req, res) => {\r\n        try {\r\n            const data = await PasswordKeyModel.find(\r\n                {},\r\n                { passwordkey: 1, exist: true }\r\n            );\r\n            const values = data.map((v) => v.passwordkey);\r\n            return res.status(200).json({ passwordkeys: values });\r\n        } catch (error) {\r\n            return res.status(500).json({ message: \"Internal Server Error\" });\r\n        }\r\n    },\r\n    sensitivekeysandPasswordValidate: async (req, res) => {\r\n        try {\r\n            var { hostname, currentData, appid } = req.body;\r\n            const alloweddomains = await User.findOne(\r\n                { appid },\r\n                { password: 0, createdAt: 0, updatedAt: 0 }\r\n            ).lean();\r\n            if (alloweddomains) {\r\n                const sensitivedatainbody = await checkForSensitiveInfoInBody(\r\n                    currentData,\r\n                    sensitivedata\r\n                );\r\n                const password = await CheckPasswordKeyText(currentData, passwordkeys);\r\n                if (password) {\r\n                    const HashedPassword = await isHashedPassword(password);\r\n                    const existingMessage = await PasswordValidateModel.findOne({\r\n                        user: mongoose.Types.ObjectId(alloweddomains._id),\r\n                        hostname,\r\n                    });\r\n                    if (existingMessage) {\r\n                        // console.log(\"Found existing HashedPassword in Db\");\r\n                        await PasswordValidateModel.findOneAndUpdate(\r\n                            { user: mongoose.Types.ObjectId(alloweddomains._id), hostname },\r\n                            { HashedPassword: HashedPassword.message }\r\n                        );\r\n                    } else {\r\n                        // console.log(\"Create New HashedPassword in Db\");\r\n                        await PasswordValidateModel.create({\r\n                            _id: alloweddomains._id,\r\n                            hostname: hostname,\r\n                            HashedPassword: HashedPassword.message,\r\n                        });\r\n                    }\r\n                }\r\n                if (sensitivedatainbody) {\r\n                    const existingMessage = await SensitiveInfoInBodyModel.findOne(\r\n                        { user: mongoose.Types.ObjectId(alloweddomains._id), hostname, sensitivekeys: sensitivedatainbody },\r\n                        { exist: true }\r\n                    );\r\n                    if (existingMessage) {\r\n                        // Handle matching hostname and sensitive key\r\n                        // console.log(\"Found existing sensitivedata in body\");\r\n                    } else {\r\n                        // console.log(\"Create New sensitivedata in body\");\r\n                        await SensitiveInfoInBodyModel.create({\r\n                            user: mongoose.Types.ObjectId(alloweddomains._id),\r\n                            hostname,\r\n                            sensitivekeys: sensitivedatainbody,\r\n                        });\r\n                        // Return success response for creating new data\r\n                        res.status(200).json({ succes: true });\r\n                    }\r\n                } else {\r\n                    res.status(200).json({ sucess: true });\r\n                }\r\n            } else {\r\n                res.status(403).json(\"you are not allowed\");\r\n            }\r\n        } catch (error) {\r\n            // console.log(\"sensitive error\", error);\r\n        }\r\n    },\r\n    sensitivekeysinurl: async (req, res) => {\r\n        try {\r\n            // console.log(req.body)\r\n            let { data, url, hostname, appid } = req.body;\r\n\r\n            const alloweddomains = await User.findOne(\r\n                { appid },\r\n                { password: 0, createdAt: 0, updatedAt: 0 }\r\n            ).lean();\r\n            if (alloweddomains) {\r\n                const sensitivekey = await checkForSensitiveInfoInBody(\r\n                    data,\r\n                    sensitivedata\r\n                );\r\n                if (sensitivekey) {\r\n                    const existingMessage = await CrticalInformationInurl.findOne(\r\n                        {\r\n                            user: mongoose.Types.ObjectId(alloweddomains._id),\r\n                            hostname,\r\n                            sensitivekeys: sensitivekey,\r\n                        },\r\n                        { _id: 0 }\r\n                    );\r\n                    // console.log({ existingMessage });\r\n                    if (existingMessage) {\r\n                        // console.log(\"Found existing sensitive key in URL\");\r\n                    } else {\r\n                        // console.log(\"Creating new sensitive key in URL\");\r\n                        const d = await CrticalInformationInurl.create({\r\n                            user: alloweddomains._id,\r\n                            hostname,\r\n                            url,\r\n                            sensitivekeys: sensitivekey,\r\n                        });\r\n                        // console.log(d);\r\n                        // Return success response for creating new data\r\n                        return res.status(201).json({ success: true });\r\n                    }\r\n                } else {\r\n                    // Return response indicating that no sensitive key was found\r\n                    return res.status(200).json({ sensitivekey: false });\r\n                }\r\n            } else {\r\n                res.status(403).json(\"you are not allowed\");\r\n            }\r\n            //\r\n        } catch (error) {\r\n            // console.log({ sensitivekeysinurlerror: error });\r\n            // Handle the error routerropriately\r\n            return res.status(500).json({ error: \"Internal Server Error\" });\r\n        }\r\n    },\r\n    scanhardcodedata: async (req, res) => {\r\n        try {\r\n            const { fileName, content, sid, appid } = req.body;\r\n            //\r\n            const alloweddomains = await User.findOne(\r\n                { appid },\r\n                { password: 0, createdAt: 0, updatedAt: 0 }\r\n            ).lean();\r\n            if (alloweddomains) {\r\n                var HardCodedData = await scanHardCodedData(content, fileName);\r\n                if (HardCodedData.length > 0) {\r\n                    return res.status(200).json({ HardCodedData });\r\n                } else {\r\n                    return res.sendStatus(204);\r\n                }\r\n            } else {\r\n                res.status(403).json(\"you are not allowed\");\r\n            }\r\n        } catch (error) {\r\n            return res.status(500).json({ message: \"Internal Server Error\" });\r\n            console.log(\"scanhardcodedata\", error)\r\n\r\n        }\r\n    },\r\n    scanpasswordhashing: async (req, res) => {\r\n        try {\r\n            const { fileName, content, sid, appid } = req.body;\r\n            const alloweddomains = await User.findOne(\r\n                { appid },\r\n                { password: 0, createdAt: 0, updatedAt: 0 }\r\n            ).lean();\r\n            if (alloweddomains) {\r\n                var PasswordHashing = await scanHardPasswordHashing(content, fileName);\r\n                if (PasswordHashing.length > 0) {\r\n\r\n                    return res.status(200).json({ PasswordHashing: PasswordHashing })\r\n                } else {\r\n                    return res.status(200).json({ PasswordHashing: \"Password Hashing is not found\" });\r\n                }\r\n            } else {\r\n                res.status(403).json(\"you are not allowed\");\r\n            }\r\n        } catch (error) {\r\n            return res.status(500).json({ message: \"Internal Server Error\" });\r\n            console.log(\"scanpasswordhashing\", error)\r\n        }\r\n    },\r\n    optionmethodvulnerability: async (req, res) => {\r\n        try {\r\n            const { routes, hostname, appid } = req.body;\r\n            const alloweddomains = await User.findOne(\r\n                { appid },\r\n                { password: 0, createdAt: 0, updatedAt: 0 }\r\n            ).lean();\r\n            if (alloweddomains) {\r\n                const OptionMethod = await scanDirectoryOptionMethod(routes, hostname);\r\n                res.json({ OptionMethod });\r\n            } else {\r\n                res.status(403).json(\"you are not allowed\");\r\n            }\r\n        } catch (error) {\r\n            return res.status(500).json({ message: \"Internal Server Error\" });\r\n        }\r\n    },\r\n    dangerousemethodvulnerability: async (req, res) => {\r\n        try {\r\n            const { routes, hostname, appid } = req.body;\r\n\r\n            //\r\n            const alloweddomains = await User.findOne(\r\n                { appid },\r\n                { password: 0, createdAt: 0, updatedAt: 0 }\r\n            ).lean();\r\n            if (alloweddomains) {\r\n                const DangerousMethods = await ScanDangerousMethods(routes, hostname);\r\n                res.json({ DangerousMethods });\r\n            } else {\r\n                res.status(403).json(\"you are not allowed\");\r\n            }\r\n        } catch (error) {\r\n            return res.status(500).json({ message: \"Internal Server Error\" });\r\n        }\r\n    },\r\n    defaultwebpagevulnerability: async (req, res) => {\r\n        try {\r\n            const { routes, hostname, appid } = req.body;\r\n            const alloweddomains = await User.findOne(\r\n                { appid },\r\n                { password: 0, createdAt: 0, updatedAt: 0 }\r\n            ).lean();\r\n            if (alloweddomains) {\r\n\r\n                const dwp = await DefaultWebPage(routes, hostname);\r\n                return res.json({ dwp: dwp.toString() });\r\n            } else {\r\n                return res.status(403).json(\"you are not allowed\");\r\n            }\r\n        } catch (error) {\r\n            return res.status(500).json({ message: \"Internal Server Error\" });\r\n        }\r\n    },\r\n    nodeconfiguration: async (req, res) => {\r\n        try {\r\n            const { nodejsveresion, hostname, appid, params } = req.body;\r\n            // console.log({ params })\r\n            const alloweddomains = await User.findOne(\r\n                { appid },\r\n                { password: 0, createdAt: 0, updatedAt: 0 }\r\n            ).lean();\r\n            if (alloweddomains) {\r\n                await hashttpParametersPollutionavailable(params, appid)\r\n                var version = nodejsveresion\r\n                version = version.replace(/^./, \"\")\r\n                version = parseInt(version)\r\n                const nodejslatestserverresonse = await axios.get('https://nodejs.org/dist/index.json');\r\n                const versions = nodejslatestserverresonse.data;\r\n                const ltsVersions = versions.filter(version => version.lts);\r\n                // Get the latest LTS version\r\n                let latest_version = ltsVersions[0].version;\r\n                latest_version = latest_version.replace(/^./, \"\")\r\n                latest_version = parseInt(latest_version)\r\n                // console.log(latest_version)\r\n                isolderversion = version < latest_version ? \"older version\" : \"latest version\"\r\n                const data = await Nodeversion(appid, isolderversion)\r\n                return res.json({ Nodejs_version: data, });\r\n            } else {\r\n                return res.status(403).json(\"you are not allowed\");\r\n            }\r\n        } catch (error) {\r\n            return res.status(500).json({ message: \"Internal Server Error\" });\r\n        }\r\n    },\r\n    xssvulnerability: async (req, res) => {\r\n        try {\r\n            const { fileName, content, sid, appid } = req.body;\r\n            const alloweddomains = await User.findOne(\r\n                { appid },\r\n                { password: 0, createdAt: 0, updatedAt: 0 }\r\n            ).lean();\r\n            if (alloweddomains) {\r\n                const xss = await scanXSSvulnerability(content, fileName);\r\n                res.json({ xss });\r\n            } else {\r\n                res.status(403).json(\"you are not allowed\");\r\n            }\r\n        } catch (error) {\r\n            return res.status(500).json({ message: \"Internal Server Error\" });\r\n        }\r\n    },\r\n    redirectvulnerability: async (req, res) => {\r\n        try {\r\n            const { fileName, content, sid, appid } = req.body;\r\n            const alloweddomains = await User.findOne(\r\n                { appid },\r\n                { password: 0, createdAt: 0, updatedAt: 0 }\r\n            ).lean();\r\n            if (alloweddomains) {\r\n                const redirect = await scanRedirectvulnerability(content, fileName);\r\n                res.json({ redirect });\r\n            } else {\r\n                res.status(403).json(\"you are not allowed\");\r\n            }\r\n        } catch (error) {\r\n            return res.status(500).json({ message: \"Internal Server Error\" });\r\n        }\r\n    },\r\n    sessionvulnerability: async (req, res) => {\r\n        try {\r\n            const { fileName, content, sid, middlewares, appid } = req.body;\r\n            const alloweddomains = await User.findOne(\r\n                { appid },\r\n                { password: 0, createdAt: 0, updatedAt: 0 }\r\n            ).lean();\r\n            if (alloweddomains) {\r\n                const session = await scanSessionvulnerability(content, fileName, middlewares);\r\n                // console.log(\"fafafaf\", session)\r\n                res.json({ session });\r\n            } else {\r\n                res.status(403).json(\"you are not allowed\");\r\n            }\r\n        } catch (error) {\r\n            return res.status(500).json({ message: \"Internal Server Error\" });\r\n\r\n        }\r\n    },\r\n    sqlvulnerability: async (req, res) => {\r\n        try {\r\n            const { fileName, content, sid, appid } = req.body;\r\n            const alloweddomains = await User.findOne(\r\n                { appid },\r\n                { password: 0, createdAt: 0, updatedAt: 0 }\r\n            ).lean();\r\n            if (alloweddomains) {\r\n                const sql = await scanSQLvulnerability(content, fileName);\r\n                res.json({ sql });\r\n            } else {\r\n                res.status(403).json(\"you are not allowed\");\r\n            }\r\n        } catch (error) {\r\n            return res.status(500).json({ message: \"Internal Server Error\" });\r\n        }\r\n    },\r\n    addlogsdata: async (req, res) => {\r\n        try {\r\n            const { logs, sid, appid } = req.body;\r\n            const alloweddomains = await User.findOne(\r\n                { appid },\r\n                { password: 0, createdAt: 0, updatedAt: 0 }\r\n            ).lean();\r\n            if (alloweddomains) {\r\n                const finduser = await ClientLoagsModel.findOne({ user: mongoose.Types.ObjectId(alloweddomains._id), hostname: sid });\r\n                // console.log({ ClientLoagsModel: finduser })\r\n                if (finduser) {\r\n                    const updatedata = await ClientLoagsModel.findOneAndUpdate(\r\n                        { user: mongoose.Types.ObjectId(alloweddomains._id), hostname: sid },\r\n                        { LogsData: logs }\r\n                    );\r\n                    res.json(updatedata);\r\n                } else if (!finduser) {\r\n                    const newdata = await ClientLoagsModel.create({\r\n                        user: mongoose.Types.ObjectId(alloweddomains._id),\r\n                        LogsData: logs,\r\n                        hostname: sid,\r\n                    });\r\n                    res.json(newdata);\r\n                }\r\n            } else {\r\n                res.status(403).json(\"you are not allowed\");\r\n            }\r\n        } catch (error) {\r\n            // console.log\r\n        }\r\n    },\r\n    logsdata: async (req, res) => {\r\n        try {\r\n            const { sid, appid, } = req.query;\r\n            function deleteDuplicate(a) { a = a.toString().replace(/ /g, \",\"); a = a.replace(/[ ]/g, \"\").split(\",\"); for (var b = [], c = 0; c < a.length; c++)-1 == b.indexOf(a[c]) && b.push(a[c]); b = b.join(\", \"); return b = b.replace(/,/g, \" \") };\r\n            const results = []\r\n            const alloweddomains = await User.findOne(\r\n                { appid },\r\n                { password: 0, createdAt: 0, updatedAt: 0 }\r\n            ).lean();\r\n            if (alloweddomains) {\r\n                const finduser = await ClientLoagsModel.findOne({ user: mongoose.Types.ObjectId(alloweddomains._id), hostname: sid });\r\n                if (finduser) {\r\n                    var passwordHashing = \"\"\r\n                    var xss = \"\"\r\n                    var sql = \"\"\r\n                    var session = \"\"\r\n                    var dwp = \"\"\r\n                    var redirect = \"\"\r\n                    var OptionMethod = \"\"\r\n                    var DangerousMethods = \"\"\r\n                    var npmvulnurabilties = \"\"\r\n                    var LogsData = finduser.LogsData;\r\n                    console.log(\"LogsData\", LogsData)\r\n                    LogsData.map((k, v) => {\r\n\r\n                        if (Object.keys(k).includes('npmvulnurabilties')) {\r\n                            for (value of Object.values(k)) {\r\n                                npmvulnurabilties += value.toString()\r\n                            }\r\n                        }\r\n                        if (Object.keys(k).includes('DangerousMethods')) {\r\n                            for (value of Object.values(k)) {\r\n                                if (value === null) {\r\n                                    DangerousMethods = \"Dangerous Methods are  not enable\"\r\n                                } else {\r\n                                    DangerousMethods = value.toString()\r\n                                }\r\n                            }\r\n                        }\r\n                        if (Object.keys(k).includes('OptionMethod')) {\r\n                            for (value of Object.values(k)) {\r\n                                if (value === null) {\r\n                                    OptionMethod = \"Option Method is not enable\"\r\n                                } else {\r\n                                    OptionMethod = value.toString()\r\n                                }\r\n\r\n\r\n                            }\r\n                        }\r\n                        if (Object.keys(k).includes('PasswordHashing')) {\r\n                            for (value of Object.values(k)) {\r\n\r\n                                passwordHashing += value.toString()\r\n                            }\r\n                        } else {\r\n                            passwordHashing = \"password text not store in hash format\"\r\n                        }\r\n                        if (Object.keys(k).includes('xss')) {\r\n                            for (value of Object.values(k)) {\r\n                                xss += value.toString()\r\n                            }\r\n                        }\r\n                        if (Object.keys(k).includes('sql')) {\r\n                            let sessionvalue = Object.values(k)[0]\r\n                            if (sessionvalue.toString() == \"Mysql Not Found\") {\r\n                                sql += sessionvalue.toString() + \",\";\r\n                            } else {\r\n                                sql += sessionvalue.toString()\r\n                            }\r\n                        }\r\n                        if (Object.keys(k).includes('redirect')) {\r\n                            for (value of Object.values(k)) {\r\n                                if (value.length < 1) {\r\n                                    redirect += \"Redirect vunurbilities not found\" + \",\"\r\n                                } else {\r\n                                    redirect += value.toString()\r\n                                }\r\n                            }\r\n                        }\r\n                        if (Object.keys(k).includes('session')) {\r\n                            let sessionvalue = Object.values(k)[0]\r\n                            if (Object.values(k)[0].length > 1) {\r\n                                session += sessionvalue.toString() + \",\"\r\n                            } else {\r\n                                session += sessionvalue.toString() + \",\"\r\n                            }\r\n\r\n                        }\r\n                        if (Object.keys(k).includes('dwp')) {\r\n                            for (value of Object.values(k)) {\r\n                                dwp += value.toString()\r\n                            }\r\n                        }\r\n                        // // console.log(Object.keys(k))\r\n                    })\r\n                    sql = deleteDuplicate(sql)\r\n                    session = deleteDuplicate(session)\r\n                    redirect = deleteDuplicate(redirect)\r\n                    const data = {\r\n                        passwordHashing,\r\n                        xss,\r\n                        sql,\r\n                        session,\r\n                        dwp,\r\n                        redirect,\r\n                        OptionMethod,\r\n                        DangerousMethods,\r\n                        npmvulnurabilties\r\n                    }\r\n                    res.status(200).json(data);\r\n                } else if (!finduser) {\r\n                    res.status(404).json(\"not found\");\r\n                }\r\n            } else {\r\n                res.status(403).json(\"you are not allowed\");\r\n            }\r\n        } catch (error) {\r\n            return res.status(500).json({ message: \"Internal Server Error\" });\r\n        }\r\n    },\r\n    sessionstoragedata: async (req, res) => {\r\n        try {\r\n            const { filteredRequests, localStorageData, sessionStorageData } = req.body\r\n            if (filteredRequests) {\r\n                const d = filteredRequests.forEach(async (x) => {\r\n                    if (x.response.startsWith(\"{\")) {\r\n                        if (x.url == 'http://localhost:8080/api/security/test/sensitiveinfoinurl') {\r\n                            return\r\n                        } else {\r\n                            const responsedata = JSON.parse(x.response)\r\n                            const sensitivekey = await checkForSensitiveInfoInBody(\r\n                                responsedata,\r\n                                sensitivedata\r\n                            );\r\n                            if (sensitivekey) {\r\n                                return { sensitivekey, res: x.response }\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                })\r\n                Promise.all([d]).then((result) => { });\r\n            }\r\n            if (localStorageData) {\r\n\r\n                // // console.log(localStorageData)\r\n\r\n            }\r\n            if (sessionStorageData) {\r\n                // // console.log(sessionStorageData)\r\n            }\r\n            res.json(\"hello\")\r\n            return false\r\n            const sensitivekey = await checkForSensitiveInfoInBody(\r\n                data,\r\n                sensitivedata\r\n            );\r\n            if (sensitivekey) {\r\n                const existingMessage = await CrticalInformationInurl.findOne(\r\n                    {\r\n                        hostname,\r\n                        sensitivekeys: sensitivekey,\r\n                    },\r\n                    { _id: 0 }\r\n                );\r\n                // console.log(existingMessage);\r\n                if (existingMessage) {\r\n                    // console.log(\"Found existing sensitive key in URL\");\r\n                } else {\r\n                    // console.log(\"Creating new sensitive key in URL\");\r\n                    const d = await CrticalInformationInurl.create({\r\n                        hostname,\r\n                        url,\r\n                        sensitivekeys: sensitivekey,\r\n                    });\r\n                    // console.log(d);\r\n                    // Return success response for creating new data\r\n                    return res.status(201).json({ success: true });\r\n                }\r\n            } else {\r\n                // Return response indicating that no sensitive key was found\r\n                return res.status(200).json({ sensitivekey: false });\r\n            }\r\n\r\n            res.json(\"hello\")\r\n        } catch (error) {\r\n            return res.status(500).json({ message: \"Internal Server Error\" });\r\n        }\r\n    },\r\n    directory_listing_is_enabled_on_the_server: async (req, res) => {\r\n        try {\r\n\r\n            const data = await checkDirectoryListing(req.query.url)\r\n            return sendResponse(res, 200, 'Directory listing.', data)\r\n\r\n        } catch (error) {\r\n            // console.log(error)\r\n            return errorHandler(res, 500, error.message)\r\n        }\r\n    },\r\n    default_web_page: async (req, res) => {\r\n        try {\r\n            const response = await axios.get(`http://lmpapi.handsintechnology.in/`);\r\n            if (response.status === 200 && response.data.includes('Index of')) {\r\n                return sendResponse(res, 200, 'Directory listing is enabled.', { Webpage: 'Directory listing is enabled.' })\r\n            } else if (response.status === 200) {\r\n                return sendResponse(res, 200, 'Default web page available.', { Webpage: 'Default web page available.' })\r\n            }\r\n        } catch (error) {\r\n            if (error?.response?.status >= 400) {\r\n                if (error?.response?.status === 404) {\r\n                    return sendResponse(res, 200, 'Default web page not found.', { Webpage: 'Default web page not found.' })\r\n                } else if (error?.response?.status === 403) {\r\n                    return sendResponse(res, 200, 'Access forbidden', { Webpage: 'Access forbidden' })\r\n                }\r\n            }\r\n        }\r\n\r\n    },\r\n    plaincredential: async (req, res) => {\r\n        try {\r\n            const response = await axios.get(`http://${req.query.domain}/`);\r\n            const protocol = response.request.protocol.replace(':', \"\");\r\n            if (protocol == \"http\") {\r\n                return sendResponse(res, 200, 'Credentials are transmitted to server in plain text', { cra: \"Credentials are transmitted to server in plain text\" })\r\n            }\r\n            else if (protocol == \"https\") {\r\n                return sendResponse(res, 200, 'Credentials are not transmitted to server in plain text', { cra: \"Credentials are not transmitted to server in plain text\" })\r\n            }\r\n            // // console.log(response.request.res.httpVersion);\r\n        } catch (error) {\r\n            const protocol = error.request.protocol.replace(':', \"\")\r\n            if (protocol == \"http\") {\r\n                return sendResponse(res, 200, 'Credentials are transmitted to server in plain text', { cra: \"Credentials are transmitted to server in plain text\" })\r\n            }\r\n            else if (protocol == \"https\") {\r\n                return sendResponse(res, 200, 'Credentials are not transmitted to server in plain text', { cra: \"Credentials are not transmitted to server in plain text\" })\r\n            }\r\n            // // console.log(error.request.res.httpVersion);\r\n            // console.log('Error:', error.message);\r\n        }\r\n    },\r\n    accesscontrollalloworigin: async (req, res) => {\r\n        try {\r\n            if (req.user) {\r\n                const response = await axios.get(`http://autotest.handsintechnology.in/`).then((res => res)).catch((err => err.response))\r\n                const access_control_allow_origin = response.headers['access-control-allow-origin']\r\n                if (access_control_allow_origin) {\r\n                    if (access_control_allow_origin === '*') {\r\n                        return sendResponse(res, 200, \"access controll alow origin is set to *\", { access_control_allow_origin: \"access controll alow origin is set to *\" })\r\n\r\n                    } else {\r\n                        return sendResponse(res, 200, \"access controll alow origin is not set to *\", { access_control_allow_origin: \"access controll alow origin is not  set to *\" })\r\n                    }\r\n                } else {\r\n                    return sendResponse(res, 200, \"access controll alow origin is not set\", { access_control_allow_origin: \"access controll alow origin is not set\" })\r\n\r\n                }\r\n            } else {\r\n                return res.status(403).json(\"you are not allowed\");\r\n            }\r\n\r\n        } catch (error) {\r\n            return errorHandler(res, 500, error.message)\r\n        }\r\n    },\r\n    securityheaders: async (req, res) => {\r\n        try {\r\n            const url = require('url')\r\n            if (req.query.url) {\r\n                const { isUrlValid } = require('../../utils/ScanHeaders/helpers')\r\n                if (!isUrlValid(req.query.url)) throw new Error('Invalid URL format!')\r\n                const hostname = url.parse(req.query.url).hostname\r\n                const valid = await checkDomainAvailability(hostname)\r\n\r\n                if (!valid) {\r\n                    return res.json(\"please enter valid url\")\r\n                } else if (valid) {\r\n                    const checkMyHeaders = require('../../utils/ScanHeaders')\r\n                    const data = await checkMyHeaders(req.query.url)\r\n                        .then((messages) => messages)\r\n                    const rawHeaders = data.headers\r\n                    return res.json({ headersinfo: data.messages, rawHeaders })\r\n\r\n                }\r\n\r\n            } else {\r\n                res.json(\"please provide url\")\r\n            }\r\n        } catch (error) {\r\n            // console.log({error})\r\n            errorHandler(res, 500, error.message)\r\n        }\r\n\r\n    },\r\n    nodeversion: async (req, res) => {\r\n        try {\r\n            if (req.user) {\r\n                const data = await NodeVersionModel.findOne({ appid: req.user.appid })\r\n                return sendResponse(res, 200, \"fetch\", data)\r\n            } else {\r\n                throw new Error(\"User not exist\")\r\n            }\r\n        } catch (error) {\r\n            // console.log({ error })\r\n            errorHandler(res, 500, error.message)\r\n        }\r\n    },\r\n    scanpackagejson: async (req, res) => {\r\n        try {\r\n            const { fileContent, sid, appid } = req.body\r\n            const dependencies = JSON.parse(fileContent).dependencies\r\n            const dependencieslist = Object.keys(dependencies)\r\n            if (dependencieslist.includes('sequelize')) {\r\n                // console.log(\"sequelize is used\")\r\n            }\r\n            else if (dependencieslist.includes('mysql2' || 'mysql')) {\r\n                // console.log(\"mysql is used\")\r\n            } else if (dependencieslist.includes('mongoose')) {\r\n                // console.log(\"mongodb find\")\r\n            } else {\r\n                // console.log(\"any database not found\")\r\n            }\r\n            res.json(\"ok\")\r\n        } catch (error) {\r\n            return errorHandler(res, 500, error.message)\r\n        }\r\n    },\r\n}"
    },
    {
      "name": "vulnurability.controller",
      "type": "file",
      "extension": ".js",
      "content": "\r\nconst axios = require('axios');\r\nconst NodeCache = require(\"node-cache\");\r\nconst cache = new NodeCache({ stdTTL: 60 }); // Cache with a TTL of 60 seconds\r\nconst url = require('url')\r\nconst mongoose = require(\"mongoose\");\r\nconst { scanXSSvulnerability, scanRedirectvulnerability, scanSessionvulnerability, scanSQLvulnerability, scanHardCodedData, scanHardPasswordHashing, scanDirectoryOptionMethod, ScanDangerousMethods, DefaultWebPage, checkDirectoryListing, scanWebsite, generateWebsiteReport, } = require(\"../../utils/scanClientData\");\r\nconst { CallEmailVerify, checkDomainAvailability, hashttpParametersPollutionavailable, Nodeversion } = require(\"../../utilities/functions/functions\");\r\nconst { Project_Security_Logs } = require(\"../../models/Project_Security_Logs\");\r\nconst { PasswordKeyModel } = require(\"../../models/PasswordKeysModel\");\r\nconst { CrticalInformationInurl, EmailVerifyModel, } = require(\"../../models/sensitivekeywordsModel\");\r\nconst { isHashedPassword, checkForSensitiveInfoInBody, CheckPasswordKeyText, CreatStatusCodesDetails, } = require(\"../../utils/functions\");\r\nconst { sensitivedata, passwordkeys, } = require(\"../../sensitive/availableapikeys\");\r\nconst { ServerReportModel } = require(\"../../models/ServerModels\");\r\nconst { ClientLoagsModel } = require(\"../../models/ClientLoagsModel\");\r\nconst { sensitiveinfoinbodyModel } = require(\"../../models/SensitiveInfoInBodyModel\");\r\nconst { SSLverifier } = require(\"../../utils/Downtimemonitor\");\r\nconst { sendResponse } = require(\"../../utils/dataHandler\");\r\nconst { errorHandler } = require(\"../../utils/errorHandler\");\r\nconst User = require(\"../../models/User\");\r\nconst { NodeVersionModel } = require(\"../../models/NodeVersionModel\");\r\nconst { httpParameterPollutionModel } = require('../../models/httpParameterPollutionModel');\r\nconst { PasswordValidateModel } = require('../../models/PasswordVaildateModel');\r\nconst SensitiveInfoInBodyModel = require('../../models/SensitiveInfoInBodyModel');\r\nconst { getEndpoints } = require('../../helpers/getEndpoint');\r\n\r\nmodule.exports = {\r\n    httpparameterpollution: async (req, res) => {\r\n        try {\r\n            const data = await httpParameterPollutionModel.findOne({ appid: req.user.appid, isPolluted: true })\r\n            if (!data) {\r\n                return sendResponse(res, 200, \"http parameter pollution is not availble\", \"http parameter pollution is not availble\")\r\n            }\r\n            return sendResponse(res, 200, \"fetch data\", \"http parameter pollution is not availble\")\r\n\r\n        }\r\n        catch (error) {\r\n            console.error(\"Error retrieving allowed domains:\", error.message);\r\n            return errorHandler(error.message)\r\n        }\r\n    },\r\n    sslverify: async (req, res) => {\r\n        try {\r\n            const hostname = req.query.hostname\r\n            if (hostname) {\r\n                // console.log(\"get hostname\", hostname)\r\n                const data = await SSLverifier(hostname)\r\n                // console.log(\"get data\", data)\r\n                return sendResponse(res, 200, \"fetch ssl \", data)\r\n            } else {\r\n                return sendResponse(res, 200, \"Hostname is required\", {})\r\n            }\r\n            // Example usage\r\n        } catch (error) {\r\n            console.error(\"Error retrieving allowed domains:\", error.message);\r\n            return errorHandler(res.message)\r\n        }\r\n    },\r\n    alloweddomains: async (req, res) => {\r\n\r\n        try {\r\n\r\n            const appid = req.body.appid;\r\n            const application = req.body.application\r\n            const hostname = req.body.hostname\r\n            // const params = req.body.params\r\n            const nodejsveresion = req.body.nodejsveresion\r\n            const fileContent = req.body.fileContent\r\n            console.log(\"application\", application)\r\n            const middlewares = application?.filter((layer) => layer.name !== \"router\" && layer.name !== \"bound dispatch\" && layer.name !== \"jsonParser\" && layer.name !== \"<anonymous>\" && layer.name !== \"urlencodedParser\" && layer.name !== \"expressInit\" && layer.name !== \"query\" && layer.name !== \"Middleware\")?.map((layer) => layer.name) || [];\r\n            // Person is verified, proceed to serve the file\r\n\r\n            const alloweddomains = await User.findOne(\r\n                { domain: { $in: [hostname] }, appid },\r\n                { password: 0, createdAt: 0, updatedAt: 0 }\r\n            ).lean();\r\n\r\n            if (alloweddomains) {\r\n                const HardCodeData = fileContent.map(async (file) => {\r\n                    const data = await scanHardCodedData(file.content, file.name)\r\n                    return data\r\n                })\r\n                const HardPasswordHashing = fileContent.map(async (file) => {\r\n                    const data = await scanHardPasswordHashing(file.content, file.name)\r\n                    return data\r\n                })\r\n                const xss = fileContent.map(async (file) => {\r\n                    const data = await scanXSSvulnerability(file.content, file.name)\r\n                    return data\r\n                })\r\n                const redirect = fileContent.map(async (file) => {\r\n                    const data = await scanRedirectvulnerability(file.content, file.name)\r\n                    return data\r\n                })\r\n                const session = fileContent.map(async (file) => {\r\n                    const data = await scanSessionvulnerability(file.content, file.name, middlewares)\r\n                    return data\r\n                })\r\n                const sql = fileContent.map(async (file) => {\r\n                    const data = await scanSQLvulnerability(file.content, file.name)\r\n                    return data\r\n                })\r\n                const dwp = fileContent.map(async (file) => {\r\n                    const data = await DefaultWebPage(file.content, file.name)\r\n                    return data\r\n                })\r\n                const OptionMethod = fileContent.map(async (file) => {\r\n                    const data = await scanDirectoryOptionMethod(file.content, file.name)\r\n                    return data\r\n                })\r\n                const DangerousMethods = fileContent.map(async (file) => {\r\n                    const data = await ScanDangerousMethods(file.content, file.name)\r\n                    return data\r\n                }\r\n                )\r\n                const npmvulnurabilties = fileContent.map(async (file) => {\r\n                    const data = await scanWebsite(file.content, file.name)\r\n                    return data\r\n                }\r\n                )\r\n                return res.status(200).json({ HardCodeData, HardPasswordHashing, xss, redirect, session, sql, dwp, OptionMethod, DangerousMethods, npmvulnurabilties });\r\n\r\n\r\n                return res.status(200).json(alloweddomains);\r\n            } else {\r\n                return res.status(404).json(\"please enter valid details\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error retrieving allowed domains:\", error);\r\n            return res.status(500).json(\"Internal server error\");\r\n        }\r\n    },\r\n    createuserdetails: async (req, res) => {\r\n        try {\r\n            let { UserRawData, ip, type, appid } = req.body;\r\n            ip = \"206.84.234.30\"\r\n            const update = UserRawData;\r\n            const alloweddomains = await User.findOne(\r\n                { appid },\r\n                { password: 0, createdAt: 0, updatedAt: 0 }\r\n            ).lean();\r\n            if (alloweddomains) {\r\n                const finduser = await Project_Security_Logs.findOne({ user: mongoose.Types.ObjectId(alloweddomains._id), 'data.ip': ip });\r\n\r\n                if (finduser) {\r\n                    // Update existing element in the array\r\n                    await Project_Security_Logs.findOneAndUpdate(\r\n                        { user: mongoose.Types.ObjectId(alloweddomains._id), 'data.ip': ip },\r\n                        {\r\n                            $set: {\r\n                                ...update,\r\n                                ip: \"data.$.ip\",\r\n                            }\r\n                        },\r\n                    );\r\n                } else {\r\n                    // Add a new element to the array\r\n                    let d = await Project_Security_Logs.findOneAndUpdate(\r\n                        { user: mongoose.Types.ObjectId(alloweddomains._id) },\r\n                        {\r\n                            $push: {\r\n                                data: {\r\n                                    ...update,\r\n                                    ip,\r\n                                    // other fields to initialize for the new element\r\n                                }\r\n                            }\r\n                        }\r\n                    );\r\n                    console.log({ d })\r\n                }\r\n\r\n\r\n            } else {\r\n                res.status(403).json(\"you are not allowed\");\r\n            }\r\n        } catch (error) {\r\n            console.log(\"createuserdetails\", error)\r\n\r\n        }\r\n        //  return  res.status(200).json(\"Ok\")\r\n    },\r\n    responsecodeavailableornot: async (req, res) => {\r\n        try {\r\n            let { data, hostname, url, appid } = req.body;\r\n            const alloweddomains = await User.findOne(\r\n                { appid },\r\n                { password: 0, createdAt: 0, updatedAt: 0 }\r\n            ).lean();\r\n            if (alloweddomains) {\r\n                if (data.resoponsecodedata.code) {\r\n                    await CreatStatusCodesDetails(\r\n                        data.resoponsecodedata.code,\r\n                        data.resoponsecodedata.phrase,\r\n                        url,\r\n                        hostname,\r\n                        id = alloweddomains._id\r\n                    );\r\n                }\r\n                sendResponse(res, 200, \"fetch\", \"ok\")\r\n            } else {\r\n                errorHandler(res, 403, \"you are not allowed\");\r\n            }\r\n        } catch (error) {\r\n            errorHandler(res, 500, error.message)\r\n        }\r\n    },\r\n    emailverify: async (req, res) => {\r\n        try {\r\n            var { emailid, hostname, url, appid } = req.body;\r\n\r\n            const alloweddomains = await User.findOne(\r\n                { appid },\r\n                { password: 0, createdAt: 0, updatedAt: 0 }\r\n            ).lean();\r\n            if (alloweddomains) {\r\n                if (emailid) {\r\n                    await CallEmailVerify(email = emailid, hostname);\r\n                    res.status(200).json(\"workflow\");\r\n                } else {\r\n                    res.status(404).send(\"not found\");\r\n                }\r\n            } else {\r\n                res.status(403).json(\"you are not allowed\");\r\n            }\r\n        } catch (error) {\r\n            return res.status(500).json({ message: \"Internal Server Error\" });\r\n        }\r\n    },\r\n    passwordkeys: async (req, res) => {\r\n        try {\r\n            const data = await PasswordKeyModel.find(\r\n                {},\r\n                { passwordkey: 1, exist: true }\r\n            );\r\n            const values = data.map((v) => v.passwordkey);\r\n            return res.status(200).json({ passwordkeys: values });\r\n        } catch (error) {\r\n            return res.status(500).json({ message: \"Internal Server Error\" });\r\n        }\r\n    },\r\n    sensitivekeysandPasswordValidate: async (req, res) => {\r\n        try {\r\n            var { hostname, currentData, appid } = req.body;\r\n            const alloweddomains = await User.findOne(\r\n                { appid },\r\n                { password: 0, createdAt: 0, updatedAt: 0 }\r\n            ).lean();\r\n            if (alloweddomains) {\r\n                const sensitivedatainbody = await checkForSensitiveInfoInBody(\r\n                    currentData,\r\n                    sensitivedata\r\n                );\r\n                const password = await CheckPasswordKeyText(currentData, passwordkeys);\r\n                if (password) {\r\n                    const HashedPassword = await isHashedPassword(password);\r\n                    const existingMessage = await PasswordValidateModel.findOne({\r\n                        user: mongoose.Types.ObjectId(alloweddomains._id),\r\n                        hostname,\r\n                    });\r\n                    if (existingMessage) {\r\n                        // console.log(\"Found existing HashedPassword in Db\");\r\n                        await PasswordValidateModel.findOneAndUpdate(\r\n                            { user: mongoose.Types.ObjectId(alloweddomains._id), hostname },\r\n                            { HashedPassword: HashedPassword.message }\r\n                        );\r\n                    } else {\r\n                        // console.log(\"Create New HashedPassword in Db\");\r\n                        await PasswordValidateModel.create({\r\n                            _id: alloweddomains._id,\r\n                            hostname: hostname,\r\n                            HashedPassword: HashedPassword.message,\r\n                        });\r\n                    }\r\n                }\r\n                if (sensitivedatainbody) {\r\n                    const existingMessage = await SensitiveInfoInBodyModel.findOne(\r\n                        { user: mongoose.Types.ObjectId(alloweddomains._id), hostname, sensitivekeys: sensitivedatainbody },\r\n                        { exist: true }\r\n                    );\r\n                    if (existingMessage) {\r\n                        // Handle matching hostname and sensitive key\r\n                        // console.log(\"Found existing sensitivedata in body\");\r\n                    } else {\r\n                        // console.log(\"Create New sensitivedata in body\");\r\n                        await SensitiveInfoInBodyModel.create({\r\n                            user: mongoose.Types.ObjectId(alloweddomains._id),\r\n                            hostname,\r\n                            sensitivekeys: sensitivedatainbody,\r\n                        });\r\n                        // Return success response for creating new data\r\n                        res.status(200).json({ succes: true });\r\n                    }\r\n                } else {\r\n                    res.status(200).json({ sucess: true });\r\n                }\r\n            } else {\r\n                res.status(403).json(\"you are not allowed\");\r\n            }\r\n        } catch (error) {\r\n            // console.log(\"sensitive error\", error);\r\n        }\r\n    },\r\n    sensitivekeysinurl: async (req, res) => {\r\n        try {\r\n            // console.log(req.body)\r\n            let { data, url, hostname, appid } = req.body;\r\n\r\n            const alloweddomains = await User.findOne(\r\n                { appid },\r\n                { password: 0, createdAt: 0, updatedAt: 0 }\r\n            ).lean();\r\n            if (alloweddomains) {\r\n                const sensitivekey = await checkForSensitiveInfoInBody(\r\n                    data,\r\n                    sensitivedata\r\n                );\r\n                if (sensitivekey) {\r\n                    const existingMessage = await CrticalInformationInurl.findOne(\r\n                        {\r\n                            user: mongoose.Types.ObjectId(alloweddomains._id),\r\n                            hostname,\r\n                            sensitivekeys: sensitivekey,\r\n                        },\r\n                        { _id: 0 }\r\n                    );\r\n                    // console.log({ existingMessage });\r\n                    if (existingMessage) {\r\n                        // console.log(\"Found existing sensitive key in URL\");\r\n                    } else {\r\n                        // console.log(\"Creating new sensitive key in URL\");\r\n                        const d = await CrticalInformationInurl.create({\r\n                            user: alloweddomains._id,\r\n                            hostname,\r\n                            url,\r\n                            sensitivekeys: sensitivekey,\r\n                        });\r\n                        // console.log(d);\r\n                        // Return success response for creating new data\r\n                        return res.status(201).json({ success: true });\r\n                    }\r\n                } else {\r\n                    // Return response indicating that no sensitive key was found\r\n                    return res.status(200).json({ sensitivekey: false });\r\n                }\r\n            } else {\r\n                res.status(403).json(\"you are not allowed\");\r\n            }\r\n            //\r\n        } catch (error) {\r\n            // console.log({ sensitivekeysinurlerror: error });\r\n            // Handle the error routerropriately\r\n            return res.status(500).json({ error: \"Internal Server Error\" });\r\n        }\r\n    },\r\n    scanhardcodedata: async (req, res) => {\r\n        try {\r\n            const { fileName, content, sid, appid } = req.body;\r\n            //\r\n            const alloweddomains = await User.findOne(\r\n                { appid },\r\n                { password: 0, createdAt: 0, updatedAt: 0 }\r\n            ).lean();\r\n            if (alloweddomains) {\r\n                var HardCodedData = await scanHardCodedData(content, fileName);\r\n                if (HardCodedData.length > 0) {\r\n                    return res.status(200).json({ HardCodedData });\r\n                } else {\r\n                    return res.sendStatus(204);\r\n                }\r\n            } else {\r\n                res.status(403).json(\"you are not allowed\");\r\n            }\r\n        } catch (error) {\r\n            return res.status(500).json({ message: \"Internal Server Error\" });\r\n            console.log(\"scanhardcodedata\", error)\r\n\r\n        }\r\n    },\r\n    scanpasswordhashing: async (req, res) => {\r\n        try {\r\n            const { fileName, content, sid, appid } = req.body;\r\n            const alloweddomains = await User.findOne(\r\n                { appid },\r\n                { password: 0, createdAt: 0, updatedAt: 0 }\r\n            ).lean();\r\n            if (alloweddomains) {\r\n                var PasswordHashing = await scanHardPasswordHashing(content, fileName);\r\n                if (PasswordHashing.length > 0) {\r\n\r\n                    return res.status(200).json({ PasswordHashing: PasswordHashing })\r\n                } else {\r\n                    return res.status(200).json({ PasswordHashing: \"Password Hashing is not found\" });\r\n                }\r\n            } else {\r\n                res.status(403).json(\"you are not allowed\");\r\n            }\r\n        } catch (error) {\r\n            return res.status(500).json({ message: \"Internal Server Error\" });\r\n            console.log(\"scanpasswordhashing\", error)\r\n        }\r\n    },\r\n    optionmethodvulnerability: async (req, res) => {\r\n        try {\r\n            const { routes, hostname, appid } = req.body;\r\n            const alloweddomains = await User.findOne(\r\n                { appid },\r\n                { password: 0, createdAt: 0, updatedAt: 0 }\r\n            ).lean();\r\n            if (alloweddomains) {\r\n                const OptionMethod = await scanDirectoryOptionMethod(routes, hostname);\r\n                res.json({ OptionMethod });\r\n            } else {\r\n                res.status(403).json(\"you are not allowed\");\r\n            }\r\n        } catch (error) {\r\n            return res.status(500).json({ message: \"Internal Server Error\" });\r\n        }\r\n    },\r\n    dangerousemethodvulnerability: async (req, res) => {\r\n        try {\r\n            const { routes, hostname, appid } = req.body;\r\n\r\n            //\r\n            const alloweddomains = await User.findOne(\r\n                { appid },\r\n                { password: 0, createdAt: 0, updatedAt: 0 }\r\n            ).lean();\r\n            if (alloweddomains) {\r\n                const DangerousMethods = await ScanDangerousMethods(routes, hostname);\r\n                res.json({ DangerousMethods });\r\n            } else {\r\n                res.status(403).json(\"you are not allowed\");\r\n            }\r\n        } catch (error) {\r\n            return res.status(500).json({ message: \"Internal Server Error\" });\r\n        }\r\n    },\r\n    defaultwebpagevulnerability: async (req, res) => {\r\n        try {\r\n            const { routes, hostname, appid } = req.body;\r\n            const alloweddomains = await User.findOne(\r\n                { appid },\r\n                { password: 0, createdAt: 0, updatedAt: 0 }\r\n            ).lean();\r\n            if (alloweddomains) {\r\n\r\n                const dwp = await DefaultWebPage(routes, hostname);\r\n                return res.json({ dwp: dwp.toString() });\r\n            } else {\r\n                return res.status(403).json(\"you are not allowed\");\r\n            }\r\n        } catch (error) {\r\n            return res.status(500).json({ message: \"Internal Server Error\" });\r\n        }\r\n    },\r\n    nodeconfiguration: async (req, res) => {\r\n        try {\r\n            const { nodejsveresion, hostname, appid, params } = req.body;\r\n            // console.log({ params })\r\n            const alloweddomains = await User.findOne(\r\n                { appid },\r\n                { password: 0, createdAt: 0, updatedAt: 0 }\r\n            ).lean();\r\n            if (alloweddomains) {\r\n                await hashttpParametersPollutionavailable(params, appid)\r\n                var version = nodejsveresion\r\n                version = version.replace(/^./, \"\")\r\n                version = parseInt(version)\r\n                const nodejslatestserverresonse = await axios.get('https://nodejs.org/dist/index.json');\r\n                const versions = nodejslatestserverresonse.data;\r\n                const ltsVersions = versions.filter(version => version.lts);\r\n                // Get the latest LTS version\r\n                let latest_version = ltsVersions[0].version;\r\n                latest_version = latest_version.replace(/^./, \"\")\r\n                latest_version = parseInt(latest_version)\r\n                // console.log(latest_version)\r\n                isolderversion = version < latest_version ? \"older version\" : \"latest version\"\r\n                const data = await Nodeversion(appid, isolderversion)\r\n                return res.json({ Nodejs_version: data, });\r\n            } else {\r\n                return res.status(403).json(\"you are not allowed\");\r\n            }\r\n        } catch (error) {\r\n            return res.status(500).json({ message: \"Internal Server Error\" });\r\n        }\r\n    },\r\n    xssvulnerability: async (req, res) => {\r\n        try {\r\n            const { fileName, content, sid, appid } = req.body;\r\n            const alloweddomains = await User.findOne(\r\n                { appid },\r\n                { password: 0, createdAt: 0, updatedAt: 0 }\r\n            ).lean();\r\n            if (alloweddomains) {\r\n                const xss = await scanXSSvulnerability(content, fileName);\r\n                res.json({ xss });\r\n            } else {\r\n                res.status(403).json(\"you are not allowed\");\r\n            }\r\n        } catch (error) {\r\n            return res.status(500).json({ message: \"Internal Server Error\" });\r\n        }\r\n    },\r\n    redirectvulnerability: async (req, res) => {\r\n        try {\r\n            const { fileName, content, sid, appid } = req.body;\r\n            const alloweddomains = await User.findOne(\r\n                { appid },\r\n                { password: 0, createdAt: 0, updatedAt: 0 }\r\n            ).lean();\r\n            if (alloweddomains) {\r\n                const redirect = await scanRedirectvulnerability(content, fileName);\r\n                res.json({ redirect });\r\n            } else {\r\n                res.status(403).json(\"you are not allowed\");\r\n            }\r\n        } catch (error) {\r\n            return res.status(500).json({ message: \"Internal Server Error\" });\r\n        }\r\n    },\r\n    sessionvulnerability: async (req, res) => {\r\n        try {\r\n            const { fileName, content, sid, middlewares, appid } = req.body;\r\n            const alloweddomains = await User.findOne(\r\n                { appid },\r\n                { password: 0, createdAt: 0, updatedAt: 0 }\r\n            ).lean();\r\n            if (alloweddomains) {\r\n                const session = await scanSessionvulnerability(content, fileName, middlewares);\r\n                // console.log(\"fafafaf\", session)\r\n                res.json({ session });\r\n            } else {\r\n                res.status(403).json(\"you are not allowed\");\r\n            }\r\n        } catch (error) {\r\n            return res.status(500).json({ message: \"Internal Server Error\" });\r\n\r\n        }\r\n    },\r\n    sqlvulnerability: async (req, res) => {\r\n        try {\r\n            const { fileName, content, sid, appid } = req.body;\r\n            const alloweddomains = await User.findOne(\r\n                { appid },\r\n                { password: 0, createdAt: 0, updatedAt: 0 }\r\n            ).lean();\r\n            if (alloweddomains) {\r\n                const sql = await scanSQLvulnerability(content, fileName);\r\n                res.json({ sql });\r\n            } else {\r\n                res.status(403).json(\"you are not allowed\");\r\n            }\r\n        } catch (error) {\r\n            return res.status(500).json({ message: \"Internal Server Error\" });\r\n        }\r\n    },\r\n    addlogsdata: async (req, res) => {\r\n        try {\r\n            const { logs, sid, appid } = req.body;\r\n            const alloweddomains = await User.findOne(\r\n                { appid },\r\n                { password: 0, createdAt: 0, updatedAt: 0 }\r\n            ).lean();\r\n            if (alloweddomains) {\r\n                const finduser = await ClientLoagsModel.findOne({ user: mongoose.Types.ObjectId(alloweddomains._id), hostname: sid });\r\n                // console.log({ ClientLoagsModel: finduser })\r\n                if (finduser) {\r\n                    const updatedata = await ClientLoagsModel.findOneAndUpdate(\r\n                        { user: mongoose.Types.ObjectId(alloweddomains._id), hostname: sid },\r\n                        { LogsData: logs }\r\n                    );\r\n                    res.json(updatedata);\r\n                } else if (!finduser) {\r\n                    const newdata = await ClientLoagsModel.create({\r\n                        user: mongoose.Types.ObjectId(alloweddomains._id),\r\n                        LogsData: logs,\r\n                        hostname: sid,\r\n                    });\r\n                    res.json(newdata);\r\n                }\r\n            } else {\r\n                res.status(403).json(\"you are not allowed\");\r\n            }\r\n        } catch (error) {\r\n            // console.log\r\n        }\r\n    },\r\n    logsdata: async (req, res) => {\r\n        try {\r\n            const { sid, appid, } = req.query;\r\n            function deleteDuplicate(a) { a = a.toString().replace(/ /g, \",\"); a = a.replace(/[ ]/g, \"\").split(\",\"); for (var b = [], c = 0; c < a.length; c++)-1 == b.indexOf(a[c]) && b.push(a[c]); b = b.join(\", \"); return b = b.replace(/,/g, \" \") };\r\n            const results = []\r\n            const alloweddomains = await User.findOne(\r\n                { appid },\r\n                { password: 0, createdAt: 0, updatedAt: 0 }\r\n            ).lean();\r\n            if (alloweddomains) {\r\n                const finduser = await ClientLoagsModel.findOne({ user: mongoose.Types.ObjectId(alloweddomains._id), hostname: sid });\r\n                if (finduser) {\r\n                    var passwordHashing = \"\"\r\n                    var xss = \"\"\r\n                    var sql = \"\"\r\n                    var session = \"\"\r\n                    var dwp = \"\"\r\n                    var redirect = \"\"\r\n                    var OptionMethod = \"\"\r\n                    var DangerousMethods = \"\"\r\n                    var npmvulnurabilties = \"\"\r\n                    var LogsData = finduser.LogsData;\r\n                    console.log(\"LogsData\", LogsData)\r\n                    LogsData.map((k, v) => {\r\n\r\n                        if (Object.keys(k).includes('npmvulnurabilties')) {\r\n                            for (value of Object.values(k)) {\r\n                                npmvulnurabilties += value.toString()\r\n                            }\r\n                        }\r\n                        if (Object.keys(k).includes('DangerousMethods')) {\r\n                            for (value of Object.values(k)) {\r\n                                if (value === null) {\r\n                                    DangerousMethods = \"Dangerous Methods are  not enable\"\r\n                                } else {\r\n                                    DangerousMethods = value.toString()\r\n                                }\r\n                            }\r\n                        }\r\n                        if (Object.keys(k).includes('OptionMethod')) {\r\n                            for (value of Object.values(k)) {\r\n                                if (value === null) {\r\n                                    OptionMethod = \"Option Method is not enable\"\r\n                                } else {\r\n                                    OptionMethod = value.toString()\r\n                                }\r\n\r\n\r\n                            }\r\n                        }\r\n                        if (Object.keys(k).includes('PasswordHashing')) {\r\n                            for (value of Object.values(k)) {\r\n\r\n                                passwordHashing += value.toString()\r\n                            }\r\n                        } else {\r\n                            passwordHashing = \"password text not store in hash format\"\r\n                        }\r\n                        if (Object.keys(k).includes('xss')) {\r\n                            for (value of Object.values(k)) {\r\n                                xss += value.toString()\r\n                            }\r\n                        }\r\n                        if (Object.keys(k).includes('sql')) {\r\n                            let sessionvalue = Object.values(k)[0]\r\n                            if (sessionvalue.toString() == \"Mysql Not Found\") {\r\n                                sql += sessionvalue.toString() + \",\";\r\n                            } else {\r\n                                sql += sessionvalue.toString()\r\n                            }\r\n                        }\r\n                        if (Object.keys(k).includes('redirect')) {\r\n                            for (value of Object.values(k)) {\r\n                                if (value.length < 1) {\r\n                                    redirect += \"Redirect vunurbilities not found\" + \",\"\r\n                                } else {\r\n                                    redirect += value.toString()\r\n                                }\r\n                            }\r\n                        }\r\n                        if (Object.keys(k).includes('session')) {\r\n                            let sessionvalue = Object.values(k)[0]\r\n                            if (Object.values(k)[0].length > 1) {\r\n                                session += sessionvalue.toString() + \",\"\r\n                            } else {\r\n                                session += sessionvalue.toString() + \",\"\r\n                            }\r\n\r\n                        }\r\n                        if (Object.keys(k).includes('dwp')) {\r\n                            for (value of Object.values(k)) {\r\n                                dwp += value.toString()\r\n                            }\r\n                        }\r\n                        // // console.log(Object.keys(k))\r\n                    })\r\n                    sql = deleteDuplicate(sql)\r\n                    session = deleteDuplicate(session)\r\n                    redirect = deleteDuplicate(redirect)\r\n                    const data = {\r\n                        passwordHashing,\r\n                        xss,\r\n                        sql,\r\n                        session,\r\n                        dwp,\r\n                        redirect,\r\n                        OptionMethod,\r\n                        DangerousMethods,\r\n                        npmvulnurabilties\r\n                    }\r\n                    res.status(200).json(data);\r\n                } else if (!finduser) {\r\n                    res.status(404).json(\"not found\");\r\n                }\r\n            } else {\r\n                res.status(403).json(\"you are not allowed\");\r\n            }\r\n        } catch (error) {\r\n            return res.status(500).json({ message: \"Internal Server Error\" });\r\n        }\r\n    },\r\n    sessionstoragedata: async (req, res) => {\r\n        try {\r\n            const { filteredRequests, localStorageData, sessionStorageData } = req.body\r\n            if (filteredRequests) {\r\n                const d = filteredRequests.forEach(async (x) => {\r\n                    if (x.response.startsWith(\"{\")) {\r\n                        if (x.url == 'http://localhost:8080/api/security/test/sensitiveinfoinurl') {\r\n                            return\r\n                        } else {\r\n                            const responsedata = JSON.parse(x.response)\r\n                            const sensitivekey = await checkForSensitiveInfoInBody(\r\n                                responsedata,\r\n                                sensitivedata\r\n                            );\r\n                            if (sensitivekey) {\r\n                                return { sensitivekey, res: x.response }\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                })\r\n                Promise.all([d]).then((result) => { });\r\n            }\r\n            if (localStorageData) {\r\n\r\n                // // console.log(localStorageData)\r\n\r\n            }\r\n            if (sessionStorageData) {\r\n                // // console.log(sessionStorageData)\r\n            }\r\n            res.json(\"hello\")\r\n            return false\r\n            const sensitivekey = await checkForSensitiveInfoInBody(\r\n                data,\r\n                sensitivedata\r\n            );\r\n            if (sensitivekey) {\r\n                const existingMessage = await CrticalInformationInurl.findOne(\r\n                    {\r\n                        hostname,\r\n                        sensitivekeys: sensitivekey,\r\n                    },\r\n                    { _id: 0 }\r\n                );\r\n                // console.log(existingMessage);\r\n                if (existingMessage) {\r\n                    // console.log(\"Found existing sensitive key in URL\");\r\n                } else {\r\n                    // console.log(\"Creating new sensitive key in URL\");\r\n                    const d = await CrticalInformationInurl.create({\r\n                        hostname,\r\n                        url,\r\n                        sensitivekeys: sensitivekey,\r\n                    });\r\n                    // console.log(d);\r\n                    // Return success response for creating new data\r\n                    return res.status(201).json({ success: true });\r\n                }\r\n            } else {\r\n                // Return response indicating that no sensitive key was found\r\n                return res.status(200).json({ sensitivekey: false });\r\n            }\r\n\r\n            res.json(\"hello\")\r\n        } catch (error) {\r\n            return res.status(500).json({ message: \"Internal Server Error\" });\r\n        }\r\n    },\r\n    directory_listing_is_enabled_on_the_server: async (req, res) => {\r\n        try {\r\n\r\n            const data = await checkDirectoryListing(req.query.url)\r\n            return sendResponse(res, 200, 'Directory listing.', data)\r\n\r\n        } catch (error) {\r\n            // console.log(error)\r\n            return errorHandler(res, 500, error.message)\r\n        }\r\n    },\r\n    default_web_page: async (req, res) => {\r\n        try {\r\n            const response = await axios.get(`http://lmpapi.handsintechnology.in/`);\r\n            if (response.status === 200 && response.data.includes('Index of')) {\r\n                return sendResponse(res, 200, 'Directory listing is enabled.', { Webpage: 'Directory listing is enabled.' })\r\n            } else if (response.status === 200) {\r\n                return sendResponse(res, 200, 'Default web page available.', { Webpage: 'Default web page available.' })\r\n            }\r\n        } catch (error) {\r\n            if (error?.response?.status >= 400) {\r\n                if (error?.response?.status === 404) {\r\n                    return sendResponse(res, 200, 'Default web page not found.', { Webpage: 'Default web page not found.' })\r\n                } else if (error?.response?.status === 403) {\r\n                    return sendResponse(res, 200, 'Access forbidden', { Webpage: 'Access forbidden' })\r\n                }\r\n            }\r\n        }\r\n\r\n    },\r\n    plaincredential: async (req, res) => {\r\n        try {\r\n            const response = await axios.get(`http://${req.query.domain}/`);\r\n            const protocol = response.request.protocol.replace(':', \"\");\r\n            if (protocol == \"http\") {\r\n                return sendResponse(res, 200, 'Credentials are transmitted to server in plain text', { cra: \"Credentials are transmitted to server in plain text\" })\r\n            }\r\n            else if (protocol == \"https\") {\r\n                return sendResponse(res, 200, 'Credentials are not transmitted to server in plain text', { cra: \"Credentials are not transmitted to server in plain text\" })\r\n            }\r\n            // // console.log(response.request.res.httpVersion);\r\n        } catch (error) {\r\n            const protocol = error.request.protocol.replace(':', \"\")\r\n            if (protocol == \"http\") {\r\n                return sendResponse(res, 200, 'Credentials are transmitted to server in plain text', { cra: \"Credentials are transmitted to server in plain text\" })\r\n            }\r\n            else if (protocol == \"https\") {\r\n                return sendResponse(res, 200, 'Credentials are not transmitted to server in plain text', { cra: \"Credentials are not transmitted to server in plain text\" })\r\n            }\r\n            // // console.log(error.request.res.httpVersion);\r\n            // console.log('Error:', error.message);\r\n        }\r\n    },\r\n    accesscontrollalloworigin: async (req, res) => {\r\n        try {\r\n            if (req.user) {\r\n                const response = await axios.get(`http://autotest.handsintechnology.in/`).then((res => res)).catch((err => err.response))\r\n                const access_control_allow_origin = response.headers['access-control-allow-origin']\r\n                if (access_control_allow_origin) {\r\n                    if (access_control_allow_origin === '*') {\r\n                        return sendResponse(res, 200, \"access controll alow origin is set to *\", { access_control_allow_origin: \"access controll alow origin is set to *\" })\r\n\r\n                    } else {\r\n                        return sendResponse(res, 200, \"access controll alow origin is not set to *\", { access_control_allow_origin: \"access controll alow origin is not  set to *\" })\r\n                    }\r\n                } else {\r\n                    return sendResponse(res, 200, \"access controll alow origin is not set\", { access_control_allow_origin: \"access controll alow origin is not set\" })\r\n\r\n                }\r\n            } else {\r\n                return res.status(403).json(\"you are not allowed\");\r\n            }\r\n\r\n        } catch (error) {\r\n            return errorHandler(res, 500, error.message)\r\n        }\r\n    },\r\n    securityheaders: async (req, res) => {\r\n        try {\r\n            const url = require('url')\r\n            if (req.query.url) {\r\n                const { isUrlValid } = require('../../utils/ScanHeaders/helpers')\r\n                if (!isUrlValid(req.query.url)) throw new Error('Invalid URL format!')\r\n                const hostname = url.parse(req.query.url).hostname\r\n                const valid = await checkDomainAvailability(hostname)\r\n\r\n                if (!valid) {\r\n                    return res.json(\"please enter valid url\")\r\n                } else if (valid) {\r\n                    const checkMyHeaders = require('../../utils/ScanHeaders')\r\n                    const data = await checkMyHeaders(req.query.url)\r\n                        .then((messages) => messages)\r\n                    const rawHeaders = data.headers\r\n                    return res.json({ headersinfo: data.messages, rawHeaders })\r\n\r\n                }\r\n\r\n            } else {\r\n                res.json(\"please provide url\")\r\n            }\r\n        } catch (error) {\r\n            // console.log({error})\r\n            errorHandler(res, 500, error.message)\r\n        }\r\n\r\n    },\r\n    nodeversion: async (req, res) => {\r\n        try {\r\n            if (req.user) {\r\n                const data = await NodeVersionModel.findOne({ appid: req.user.appid })\r\n                return sendResponse(res, 200, \"fetch\", data)\r\n            } else {\r\n                throw new Error(\"User not exist\")\r\n            }\r\n        } catch (error) {\r\n            // console.log({ error })\r\n            errorHandler(res, 500, error.message)\r\n        }\r\n    },\r\n    scanpackagejson: async (req, res) => {\r\n        try {\r\n            const { fileContent, sid, appid } = req.body\r\n            const dependencies = JSON.parse(fileContent).dependencies\r\n            const dependencieslist = Object.keys(dependencies)\r\n            if (dependencieslist.includes('sequelize')) {\r\n                // console.log(\"sequelize is used\")\r\n            }\r\n            else if (dependencieslist.includes('mysql2' || 'mysql')) {\r\n                // console.log(\"mysql is used\")\r\n            } else if (dependencieslist.includes('mongoose')) {\r\n                // console.log(\"mongodb find\")\r\n            } else {\r\n                // console.log(\"any database not found\")\r\n            }\r\n            res.json(\"ok\")\r\n        } catch (error) {\r\n            return errorHandler(res, 500, error.message)\r\n        }\r\n    },\r\n}"
    },
    {
      "name": "firebase",
      "type": "file",
      "extension": ".js",
      "content": "\r\n"
    },
    {
      "name": "functions",
      "type": "file",
      "extension": ".js",
      "content": "const { default: axios } = require(\"axios\");\r\n\r\nasync function useCustomFetch(url, options = {}) {\r\n    try {\r\n        const response = await axios.get(url, options);\r\n        return { data: response.data, status: response.status };\r\n    } catch (error) {\r\n        console.log(JSON.stringify(error.message));\r\n        return { error };\r\n    }\r\n}\r\nconst errorHandler = (\r\n    res,\r\n    statusCode = 500,\r\n    message = \"internal server error\",\r\n    data\r\n) => {\r\n    const response = { statusCode, message, data };\r\n    res.status(statusCode).json(response);\r\n};\r\nfunction consoleColorText(text, color) {\r\n    const colors = {\r\n        reset: \"\\x1b[0m\",\r\n        black: \"\\x1b[30m\",\r\n        red: \"\\x1b[31m\",\r\n        green: \"\\x1b[32m\",\r\n        yellow: \"\\x1b[33m\",\r\n        blue: \"\\x1b[34m\",\r\n        magenta: \"\\x1b[35m\",\r\n        cyan: \"\\x1b[36m\",\r\n        white: \"\\x1b[37m\",\r\n    };\r\n\r\n    const colorCode = colors[color] || colors.reset;\r\n    console.log(colorCode + text + colors.reset);\r\n}\r\n// End Create Blacklistusers details function\r\n// Sql Injection Function\r\nfunction hasSqlInjection(value) {\r\n    const sqlMeta = new RegExp(\r\n        \"(%27)|(--)|([0-9]=[0-9])|([0-9] and [0-9]=[0-9])|([0-9] AND [0-9])|(or [0-9]=[0-9])|(OR [0-9]=[0-9])|(%23)|(#)\",\r\n        \"i\"\r\n    );\r\n    if (sqlMeta.test(value)) {\r\n        return true;\r\n    }\r\n\r\n    const sqlMeta2 = new RegExp(\r\n        \"((%3D)|(=))[^\\n]*((%27)|(')|(--)|(%3B)|(;))\",\r\n        \"i\"\r\n    );\r\n    if (sqlMeta2.test(value)) {\r\n        return true;\r\n    }\r\n\r\n    const nestedQuery = new RegExp(\r\n        \"((%3D)|(=))[^\\n]*((%27)|(')|(--)|(%3B)|(;))?[^\\n]*((%27)|(')|(--)|(%3B)|(;))[^\\n]*((%3D)|(=))\",\r\n        \"i\"\r\n    );\r\n    if (nestedQuery.test(value)) {\r\n        return true;\r\n    }\r\n\r\n    const timeBased = new RegExp(\"(%3B)|(;)[^\\n]*sleep((d+))[^\\n]*\", \"i\");\r\n    if (timeBased.test(value)) {\r\n        return true;\r\n    }\r\n\r\n    const booleanBased = new RegExp(\r\n        \"((%3D)|(=))[^\\n]*[^s]*(%27)|(')|(--)|(%3B)|(;)\",\r\n        \"i\"\r\n    );\r\n    if (booleanBased.test(value)) {\r\n        return true;\r\n    }\r\n\r\n    const typicalSql = new RegExp(\r\n        \"w*((%27)|('))((%6F)|o|(%4F))((%72)|r|(%52))\",\r\n        \"i\"\r\n    );\r\n    if (typicalSql.test(value)) {\r\n        return true;\r\n    }\r\n\r\n    const sqlUnion = new RegExp(\"((%27)|('))union\", \"i\");\r\n    if (sqlUnion.test(value)) {\r\n        return true;\r\n    }\r\n\r\n    const entireText = new RegExp(\r\n        \"\\b((select|delete|insert|update|drop|create|alter)\\b.*)\",\r\n        \"i\"\r\n    );\r\n    if (entireText.test(value)) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n// Co0mmandline Injection Function\r\nfunction hasCommandLineInjection(value) {\r\n    const commandMeta = new RegExp(\r\n        \"(rm -rf)|(ls -la)|(command >/dev/sda)|(:\\\\(\\\\){ :|:& };:)|(sudo yum install)|(.conf)|(sudo mv  /dev/null)|(wget)|(-O-)|(crontab -r)|(history)|(dd if=/dev/zero of=/dev/sda)|(/dev/sda)|(/dev/sda1)|(sudo apt purge python|python2|python3.x-minimal)|(chmod -R 777 /)\",\r\n        \"i\"\r\n    );\r\n    if (commandMeta.test(value)) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n// HTML Injection Function\r\nfunction hasHTMLnjection(value) {\r\n    const HTML = new RegExp(/<(\\\"[^\\\"]*\\\"|'[^']*'|[^'\\\">])*>/, \"g\");\r\n    if (HTML.test(value)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n// HTML Injection Function\r\nfunction hasXSSnjection(value) {\r\n    const XSS = /<script>/;\r\n    if (XSS.test(value)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nasync function InjectionChecker(req) {\r\n    const entries = {\r\n        ...req.body,\r\n        ...req.query,\r\n        ...req.params,\r\n    };\r\n    let containsSql = false,\r\n        validateXss = false,\r\n        validatehtml = false,\r\n        containCommand = false;\r\n    const value = JSON.stringify(entries);\r\n    if (hasSqlInjection(value) === true) {\r\n        containsSql = true;\r\n    }\r\n    if (hasXSSnjection(value) === true) {\r\n        validateXss = true;\r\n    }\r\n    if (hasHTMLnjection(value) === true) {\r\n        validatehtml = true;\r\n    }\r\n    if (hasCommandLineInjection(value) === true) {\r\n        containCommand = true;\r\n    }\r\n    return { containsSql, validateXss, validatehtml, containCommand };\r\n}\r\nmodule.exports = {\r\n    useCustomFetch,\r\n    errorHandler, consoleColorText, InjectionChecker\r\n};"
    },
    {
      "name": "getEndpoint",
      "type": "file",
      "extension": ".js",
      "content": "// getAllEndpoints\r\nconst regExpToParseExpressPathRegExp =\r\n    /^\\/\\^\\\\\\/(?:(:?[\\w\\\\.-]*(?:\\\\\\/:?[\\w\\\\.-]*)*)|(\\(\\?:\\(\\[\\^\\\\\\/]\\+\\?\\)\\)))\\\\\\/.*/;\r\nconst regExpToReplaceExpressPathRegExpParams = /\\(\\?:\\(\\[\\^\\\\\\/]\\+\\?\\)\\)/;\r\nconst regexpExpressParamRegexp = /\\(\\?:\\(\\[\\^\\\\\\/]\\+\\?\\)\\)/g;\r\n\r\nconst EXPRESS_ROOT_PATH_REGEXP_VALUE = \"/^\\\\/?(?=\\\\/|$)/i\";\r\nconst STACK_ITEM_VALID_NAMES = [\"router\", \"bound dispatch\", \"mounted_app\"];\r\n/**\r\n * Returns all the verbs detected for the passed route\r\n */\r\nconst getRouteMethods = function (route) {\r\n    let methods = Object.keys(route.methods);\r\n    methods = methods.filter((method) => method !== \"_all\");\r\n    methods = methods.map((method) => method.toUpperCase());\r\n    return methods;\r\n};\r\n/**\r\n * Returns the names (or anonymous) of all the middlewares attached to the\r\n * passed route\r\n * @param {Object} route\r\n * @returns {string[]}\r\n */\r\nconst getRouteMiddlewares = function (route) {\r\n    return route.stack.map((item) => {\r\n        return item.handle.name || \"anonymous\";\r\n    });\r\n};\r\n\r\n/**\r\n * Returns true if found regexp related with express params\r\n * @param {string} expressPathRegExp\r\n * @returns {boolean}\r\n */\r\nconst hasParams = function (expressPathRegExp) {\r\n    return regexpExpressParamRegexp.test(expressPathRegExp);\r\n};\r\n\r\n/**\r\n * @param {Object} route Express route object to be parsed\r\n * @param {string} basePath The basePath the route is on\r\n * @return {Object[]} Endpoints info\r\n */\r\nconst parseExpressRoute = function (route, basePath) {\r\n    const paths = [];\r\n\r\n    if (Array.isArray(route.path)) {\r\n        paths.push(...route.path);\r\n    } else {\r\n        paths.push(route.path);\r\n    }\r\n\r\n    const endpoints = paths.map((path) => {\r\n        const completePath =\r\n            basePath && path === \"/\" ? basePath : `${basePath}${path}`;\r\n\r\n        const endpoint = {\r\n            path: completePath,\r\n            methods: getRouteMethods(route),\r\n            middlewares: getRouteMiddlewares(route),\r\n        };\r\n\r\n        return endpoint;\r\n    });\r\n\r\n    return endpoints;\r\n};\r\n\r\n/**\r\n * @param {RegExp} expressPathRegExp\r\n * @param {Object[]} params\r\n * @returns {string}\r\n */\r\nconst parseExpressPath = function (expressPathRegExp, params) {\r\n    let expressPathRegExpExec =\r\n        regExpToParseExpressPathRegExp.exec(expressPathRegExp);\r\n    let parsedRegExp = expressPathRegExp.toString();\r\n    let paramIndex = 0;\r\n\r\n    while (hasParams(parsedRegExp)) {\r\n        const paramName = params[paramIndex].name;\r\n        const paramId = `:${paramName}`;\r\n\r\n        parsedRegExp = parsedRegExp.replace(\r\n            regExpToReplaceExpressPathRegExpParams,\r\n            paramId\r\n        );\r\n\r\n        paramIndex++;\r\n    }\r\n\r\n    if (parsedRegExp !== expressPathRegExp.toString()) {\r\n        expressPathRegExpExec = regExpToParseExpressPathRegExp.exec(parsedRegExp);\r\n    }\r\n\r\n    const parsedPath = expressPathRegExpExec[1].replace(/\\\\\\//g, \"/\");\r\n\r\n    return parsedPath;\r\n};\r\n\r\n/**\r\n * @param {Object} app\r\n * @param {string} [basePath]\r\n * @param {Object[]} [endpoints]\r\n * @returns {Object[]}\r\n */\r\nconst parseEndpoints = function (app, basePath, endpoints) {\r\n    const stack = app.stack || (app._router && app._router.stack);\r\n\r\n    endpoints = endpoints || [];\r\n    basePath = basePath || \"\";\r\n\r\n    if (!stack) {\r\n        endpoints = addEndpoints(endpoints, [\r\n            {\r\n                path: basePath,\r\n                methods: [],\r\n                middlewares: [],\r\n            },\r\n        ]);\r\n    } else {\r\n        endpoints = parseStack(stack, basePath, endpoints);\r\n    }\r\n    return endpoints;\r\n};\r\n\r\n/**\r\n * Ensures the path of the new endpoints isn't yet in the array.\r\n * If the path is already in the array merges the endpoints with the existing\r\n * one, if not, it adds them to the array.\r\n *\r\n * @param {Object[]} currentEndpoints Array of current endpoints\r\n * @param {Object[]} endpointsToAdd New endpoints to be added to the array\r\n * @returns {Object[]} Updated endpoints array\r\n */\r\nconst addEndpoints = function (currentEndpoints, endpointsToAdd) {\r\n    endpointsToAdd.forEach((newEndpoint) => {\r\n        const existingEndpoint = currentEndpoints.find(\r\n            (item) => item.path === newEndpoint.path\r\n        );\r\n\r\n        if (existingEndpoint !== undefined) {\r\n            const newMethods = newEndpoint.methods.filter(\r\n                (method) => !existingEndpoint.methods.includes(method)\r\n            );\r\n\r\n            existingEndpoint.methods = existingEndpoint.methods.concat(newMethods);\r\n        } else {\r\n            currentEndpoints.push(newEndpoint);\r\n        }\r\n    });\r\n\r\n    return currentEndpoints;\r\n};\r\n\r\n/**\r\n * @param {Object} stack\r\n * @param {string} basePath\r\n * @param {Object[]} endpoints\r\n * @returns {Object[]}\r\n */\r\nconst parseStack = function (stack, basePath, endpoints) {\r\n    stack.forEach((stackItem) => {\r\n        if (stackItem.route) {\r\n            const newEndpoints = parseExpressRoute(stackItem.route, basePath);\r\n\r\n            endpoints = addEndpoints(endpoints, newEndpoints);\r\n        } else if (STACK_ITEM_VALID_NAMES.includes(stackItem.name)) {\r\n            const isExpressPathRegexp = regExpToParseExpressPathRegExp.test(\r\n                stackItem.regexp\r\n            );\r\n\r\n            let newBasePath = basePath;\r\n\r\n            if (isExpressPathRegexp) {\r\n                const parsedPath = parseExpressPath(stackItem.regexp, stackItem.keys);\r\n\r\n                newBasePath += `/${parsedPath}`;\r\n            } else if (\r\n                !stackItem.path &&\r\n                stackItem.regexp &&\r\n                stackItem.regexp.toString() !== EXPRESS_ROOT_PATH_REGEXP_VALUE\r\n            ) {\r\n                const regExpPath = ` RegExp(${stackItem.regexp}) `;\r\n\r\n                newBasePath += `/${regExpPath}`;\r\n            }\r\n\r\n            endpoints = parseEndpoints(stackItem.handle, newBasePath, endpoints);\r\n        }\r\n    });\r\n\r\n    return endpoints;\r\n};\r\n\r\n/**\r\n * Returns an array of strings with all the detected endpoints\r\n * @param {Object} app the express/route instance to get the endpoints from\r\n */\r\nconst getEndpoints = function (app) {\r\n    const endpoints = parseEndpoints(app);\r\n    return endpoints;\r\n};\r\nmodule.exports = {\r\n    getEndpoints,\r\n};"
    },
    {
      "name": "httpparameterpollution",
      "type": "file",
      "extension": ".js",
      "content": "const { default: axios } = require(\"axios\");\r\nconst fs = require(\"fs\");\r\nconst path = require(\"path\");\r\nconst { consoleColorText } = require(\"./functions\");\r\n// const baseUrl=\"https://securitytool.handsintechnology.in/api/client\"\r\nconst baseUrl = \"http://localhost:20000/api/client\";\r\n\r\n// getAllEndpoints\r\nconst regExpToParseExpressPathRegExp =\r\n    /^\\/\\^\\\\\\/(?:(:?[\\w\\\\.-]*(?:\\\\\\/:?[\\w\\\\.-]*)*)|(\\(\\?:\\(\\[\\^\\\\\\/]\\+\\?\\)\\)))\\\\\\/.*/;\r\nconst regExpToReplaceExpressPathRegExpParams = /\\(\\?:\\(\\[\\^\\\\\\/]\\+\\?\\)\\)/;\r\nconst regexpExpressParamRegexp = /\\(\\?:\\(\\[\\^\\\\\\/]\\+\\?\\)\\)/g;\r\n\r\nconst EXPRESS_ROOT_PATH_REGEXP_VALUE = \"/^\\\\/?(?=\\\\/|$)/i\";\r\nconst STACK_ITEM_VALID_NAMES = [\"router\", \"bound dispatch\", \"mounted_app\"];\r\n/**\r\n * Returns all the verbs detected for the passed route\r\n */\r\nconst getRouteMethods = function (route) {\r\n    let methods = Object.keys(route.methods);\r\n    methods = methods.filter((method) => method !== \"_all\");\r\n    methods = methods.map((method) => method.toUpperCase());\r\n    return methods;\r\n};\r\n/**\r\n * Returns the names (or anonymous) of all the middlewares attached to the\r\n * passed route\r\n * @param {Object} route\r\n * @returns {string[]}\r\n */\r\nconst getRouteMiddlewares = function (route) {\r\n    return route.stack.map((item) => {\r\n        return item.handle.name || \"anonymous\";\r\n    });\r\n};\r\n\r\n/**\r\n * Returns true if found regexp related with express params\r\n * @param {string} expressPathRegExp\r\n * @returns {boolean}\r\n */\r\nconst hasParams = function (expressPathRegExp) {\r\n    return regexpExpressParamRegexp.test(expressPathRegExp);\r\n};\r\n\r\n/**\r\n * @param {Object} route Express route object to be parsed\r\n * @param {string} basePath The basePath the route is on\r\n * @return {Object[]} Endpoints info\r\n */\r\nconst parseExpressRoute = function (route, basePath) {\r\n    const paths = [];\r\n\r\n    if (Array.isArray(route.path)) {\r\n        paths.push(...route.path);\r\n    } else {\r\n        paths.push(route.path);\r\n    }\r\n\r\n    const endpoints = paths.map((path) => {\r\n        const completePath =\r\n            basePath && path === \"/\" ? basePath : `${basePath}${path}`;\r\n\r\n        const endpoint = {\r\n            path: completePath,\r\n            methods: getRouteMethods(route),\r\n            middlewares: getRouteMiddlewares(route),\r\n        };\r\n\r\n        return endpoint;\r\n    });\r\n\r\n    return endpoints;\r\n};\r\n\r\n/**\r\n * @param {RegExp} expressPathRegExp\r\n * @param {Object[]} params\r\n * @returns {string}\r\n */\r\nconst parseExpressPath = function (expressPathRegExp, params) {\r\n    let expressPathRegExpExec =\r\n        regExpToParseExpressPathRegExp.exec(expressPathRegExp);\r\n    let parsedRegExp = expressPathRegExp.toString();\r\n    let paramIndex = 0;\r\n\r\n    while (hasParams(parsedRegExp)) {\r\n        const paramName = params[paramIndex].name;\r\n        const paramId = `:${paramName}`;\r\n\r\n        parsedRegExp = parsedRegExp.replace(\r\n            regExpToReplaceExpressPathRegExpParams,\r\n            paramId\r\n        );\r\n\r\n        paramIndex++;\r\n    }\r\n\r\n    if (parsedRegExp !== expressPathRegExp.toString()) {\r\n        expressPathRegExpExec = regExpToParseExpressPathRegExp.exec(parsedRegExp);\r\n    }\r\n\r\n    const parsedPath = expressPathRegExpExec[1].replace(/\\\\\\//g, \"/\");\r\n\r\n    return parsedPath;\r\n};\r\n\r\n/**\r\n * @param {Object} app\r\n * @param {string} [basePath]\r\n * @param {Object[]} [endpoints]\r\n * @returns {Object[]}\r\n */\r\nconst parseEndpoints = function (app, basePath, endpoints) {\r\n    const stack = app.stack || (app._router && app._router.stack);\r\n\r\n    endpoints = endpoints || [];\r\n    basePath = basePath || \"\";\r\n\r\n    if (!stack) {\r\n        endpoints = addEndpoints(endpoints, [\r\n            {\r\n                path: basePath,\r\n                methods: [],\r\n                middlewares: [],\r\n            },\r\n        ]);\r\n    } else {\r\n        endpoints = parseStack(stack, basePath, endpoints);\r\n    }\r\n    return endpoints;\r\n};\r\n\r\n/**\r\n * Ensures the path of the new endpoints isn't yet in the array.\r\n * If the path is already in the array merges the endpoints with the existing\r\n * one, if not, it adds them to the array.\r\n *\r\n * @param {Object[]} currentEndpoints Array of current endpoints\r\n * @param {Object[]} endpointsToAdd New endpoints to be added to the array\r\n * @returns {Object[]} Updated endpoints array\r\n */\r\nconst addEndpoints = function (currentEndpoints, endpointsToAdd) {\r\n    endpointsToAdd.forEach((newEndpoint) => {\r\n        const existingEndpoint = currentEndpoints.find(\r\n            (item) => item.path === newEndpoint.path\r\n        );\r\n\r\n        if (existingEndpoint !== undefined) {\r\n            const newMethods = newEndpoint.methods.filter(\r\n                (method) => !existingEndpoint.methods.includes(method)\r\n            );\r\n\r\n            existingEndpoint.methods = existingEndpoint.methods.concat(newMethods);\r\n        } else {\r\n            currentEndpoints.push(newEndpoint);\r\n        }\r\n    });\r\n\r\n    return currentEndpoints;\r\n};\r\n\r\n/**\r\n * @param {Object} stack\r\n * @param {string} basePath\r\n * @param {Object[]} endpoints\r\n * @returns {Object[]}\r\n */\r\nconst parseStack = function (stack, basePath, endpoints) {\r\n    stack.forEach((stackItem) => {\r\n        if (stackItem.route) {\r\n            const newEndpoints = parseExpressRoute(stackItem.route, basePath);\r\n\r\n            endpoints = addEndpoints(endpoints, newEndpoints);\r\n        } else if (STACK_ITEM_VALID_NAMES.includes(stackItem.name)) {\r\n            const isExpressPathRegexp = regExpToParseExpressPathRegExp.test(\r\n                stackItem.regexp\r\n            );\r\n\r\n            let newBasePath = basePath;\r\n\r\n            if (isExpressPathRegexp) {\r\n                const parsedPath = parseExpressPath(stackItem.regexp, stackItem.keys);\r\n\r\n                newBasePath += `/${parsedPath}`;\r\n            } else if (\r\n                !stackItem.path &&\r\n                stackItem.regexp &&\r\n                stackItem.regexp.toString() !== EXPRESS_ROOT_PATH_REGEXP_VALUE\r\n            ) {\r\n                const regExpPath = ` RegExp(${stackItem.regexp}) `;\r\n\r\n                newBasePath += `/${regExpPath}`;\r\n            }\r\n\r\n            endpoints = parseEndpoints(stackItem.handle, newBasePath, endpoints);\r\n        }\r\n    });\r\n\r\n    return endpoints;\r\n};\r\n\r\n/**\r\n * Returns an array of strings with all the detected endpoints\r\n * @param {Object} app the express/route instance to get the endpoints from\r\n */\r\nconst getEndpoints = function (app) {\r\n    const endpoints = parseEndpoints(app);\r\n    return endpoints;\r\n};\r\nconst sendFilesToServer = async (\r\n    directoryPath,\r\n    serverUrl,\r\n    sid,\r\n    middlewares,\r\n    appid\r\n) => {\r\n    try {\r\n        const results = [];\r\n        const files = fs.readdirSync(directoryPath);\r\n\r\n        for (const file of files) {\r\n            if (file === __filename) {\r\n                continue;\r\n            } else {\r\n                const filePath = `${directoryPath}/${file}`;\r\n                const stat = fs.statSync(filePath);\r\n                if (file === \"package.json\") {\r\n                    const fileContent = fs.readFileSync(filePath, \"utf8\");\r\n                    await axios\r\n                        .post(`${serverUrl}/scanpackagejson`, { fileContent, sid, appid })\r\n                        .then((res) => res.data)\r\n                        .catch((err) => err.response.data);\r\n                }\r\n                if (stat.isDirectory()) {\r\n                    if (file === \"node_modules\" || file === \"build\") {\r\n                        continue;\r\n                    }\r\n                    const subresults = await sendFilesToServer(\r\n                        filePath,\r\n                        serverUrl,\r\n                        sid,\r\n                        middlewares\r\n                    );\r\n                    results.push(...subresults);\r\n                } else {\r\n                    if (path.extname(file) === \".js\") {\r\n                        const fileContent = fs.readFileSync(filePath, \"utf8\");\r\n                        try {\r\n                            const api1 = await axios.post(`${serverUrl}/scanhardcodedata`, {\r\n                                fileName: file,\r\n                                content: fileContent,\r\n                                sid,\r\n                                appid,\r\n                            });\r\n                            const api2 = await axios.post(\r\n                                `${serverUrl}/scanpasswordhashing`,\r\n                                { fileName: file, content: fileContent, sid, appid }\r\n                            );\r\n                            const api3 = await axios.post(`${serverUrl}/xssvulnerability`, {\r\n                                fileName: file,\r\n                                content: fileContent,\r\n                                sid,\r\n                                appid,\r\n                            });\r\n                            const api4 = await axios.post(\r\n                                `${serverUrl}/redirectvulnerability`,\r\n                                { fileName: file, content: fileContent, sid, appid }\r\n                            );\r\n                            const api5 = await axios.post(\r\n                                `${serverUrl}/sessionvulnerability`,\r\n                                {\r\n                                    fileName: file,\r\n                                    content: fileContent,\r\n                                    sid,\r\n                                    middlewares,\r\n                                    appid,\r\n                                }\r\n                            );\r\n                            const api6 = await axios.post(`${serverUrl}/sqlvulnerability`, {\r\n                                fileName: file,\r\n                                content: fileContent,\r\n                                sid,\r\n                                appid,\r\n                            });\r\n                            const responses = await axios.all([\r\n                                api1,\r\n                                api2,\r\n                                api3,\r\n                                api4,\r\n                                api5,\r\n                                api6,\r\n                            ]);\r\n                            responses.forEach((response, index) => {\r\n                                results.push(response.data);\r\n                            });\r\n                        } catch (error) {\r\n                            console.log(error.message);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return results;\r\n    } catch (error) {\r\n        console.log(error.message);\r\n        return [];\r\n    }\r\n};\r\nasync function HttpParameterpollutionchecker(req, res) {\r\n    try {\r\n\r\n        console.log(\"Please wait \");\r\n        const app = req.app,\r\n            hostname = req.domain,\r\n            appid = req.appid;\r\n        const routes = getEndpoints(app);\r\n        const middlewares =\r\n            app._router?.stack\r\n                ?.filter(\r\n                    (layer) =>\r\n                        layer.name !== \"router\" &&\r\n                        layer.name !== \"bound dispatch\" &&\r\n                        layer.name !== \"jsonParser\" &&\r\n                        layer.name !== \"<anonymous>\" &&\r\n                        layer.name !== \"urlencodedParser\" &&\r\n                        layer.name !== \"expressInit\" &&\r\n                        layer.name !== \"query\" &&\r\n                        layer.name !== \"Middleware\"\r\n                )\r\n                ?.map((layer) => layer.name) || [];\r\n\r\n        const api1 = axios.post(`${baseUrl}/optionmethodvulnerability`, {\r\n            routes,\r\n            hostname,\r\n            middlewares,\r\n            appid: req.appid,\r\n        });\r\n        const api2 = axios.post(`${baseUrl}/dangerousemethodvulnerability`, {\r\n            routes,\r\n            hostname,\r\n            middlewares,\r\n            appid: req.appid,\r\n        });\r\n        const data = {\r\n            hostname,\r\n            params: req.query || req.params,\r\n            nodejsveresion: process.version,\r\n            appid: req.appid,\r\n        }\r\n        const api4 = axios.post(`${baseUrl}/nodeconfiguration`, data);\r\n        const [response1, response2, response4] = await axios.all([\r\n            api1,\r\n            api2,\r\n            api4,\r\n        ]);\r\n        const first = [response1.data, response2.data, response4.data];\r\n        const Second = await sendFilesToServer(\r\n            process.cwd(),\r\n            baseUrl,\r\n            req.domain,\r\n            middlewares,\r\n            req.appid\r\n        );\r\n        var Logs = first.concat(Second);\r\n\r\n        // Logs.push({ middlewares: middlewares.toString() });\r\n        console.log(\"alllogs\", Logs)\r\n        const alllogs = Logs.filter((v) => v !== \"\");\r\n        //\r\n        const logsdatastatus = await axios\r\n            .post(`${baseUrl}/logsdata`, { logs: alllogs, appid, sid: hostname })\r\n            .then((res) => res.status)\r\n            .catch((err) => err?.response?.status)\r\n        if (logsdatastatus === 200) {\r\n            const logsdata = await axios\r\n                .get(`${baseUrl}/logsdata?appid=${appid}&sid=${hostname}`)\r\n                .then((res) => {\r\n                    return { status: res.status, data: res.data };\r\n                })\r\n                .catch((err) => {\r\n                    return { status: err?.response?.status, data: err?.response?.data };\r\n                });\r\n\r\n            if (logsdata.status === 200) {\r\n                console.log(\"logsdata\", logsdata.data);\r\n                if (\r\n                    logsdata.data.passwordHashing ===\r\n                    \"password text not store in hash format\"\r\n                ) {\r\n                    consoleColorText(logsdata.data.passwordHashing, \"red\");\r\n                } else {\r\n                    consoleColorText(logsdata.data.passwordHashing, \"blue\");\r\n                }\r\n                consoleColorText(logsdata?.data?.xss?.replace(/,/g, \"\\n\"), \"red\");\r\n                consoleColorText(logsdata?.data?.sql?.replace(/,/g, \"\\n\"), \"red\");\r\n                consoleColorText(logsdata?.data?.session?.replace(/,/g, \"\\n\"), \"red\");\r\n                if (\r\n                    logsdata?.data?.redirect == \"Redirect  vunurbilities  not  found  \"\r\n                ) {\r\n                    consoleColorText(logsdata?.data?.redirect, \"blue\");\r\n                } else {\r\n                    consoleColorText(\r\n                        logsdata?.data?.redirect?.replace(/,/g, \"\\n\"),\r\n                        \"red\"\r\n                    );\r\n                }\r\n                if (logsdata?.data?.dwp == \"Available\") {\r\n                    consoleColorText(\r\n                        \"Default Web Page:\" + logsdata?.data?.dwp?.replace(/,/g, \"\\n\"),\r\n                        \"blue\"\r\n                    );\r\n                } else {\r\n                    consoleColorText(\r\n                        \"Default Web Page:\" + logsdata?.data?.dwp?.replace(/,/g, \"\\n\"),\r\n                        \"red\"\r\n                    );\r\n                }\r\n\r\n                if (logsdata?.data?.OptionMethod == \"Option Method is not enable\") {\r\n                    consoleColorText(\r\n                        logsdata?.data?.OptionMethod?.replace(/,/g, \"\\n\"),\r\n                        \"blue\"\r\n                    );\r\n                } else {\r\n                    consoleColorText(\r\n                        \"Option Method  enabled on :\" +\r\n                        logsdata?.data?.OptionMethod.replace(/,/g, \"\\n\"),\r\n                        \"red\"\r\n                    );\r\n                }\r\n\r\n                if (\r\n                    logsdata?.data?.DangerousMethods ==\r\n                    \"Dangerous Methods are  not enable\"\r\n                ) {\r\n                    consoleColorText(\"Dangerous Methods are  not enable\", \"blue\");\r\n                } else {\r\n                    consoleColorText(\r\n                        \"Dangerous methods enabled:\" +\r\n                        logsdata?.data?.DangerousMethods.replace(/,/g, \"\\n\"),\r\n                        \"red\"\r\n                    );\r\n                }\r\n                return res.status(200).json(logsdata.data);\r\n            } else {\r\n                return res.status(404).json(\"not found\");\r\n            }\r\n        }\r\n    } catch (error) {\r\n        console.log(JSON.stringify(error));\r\n    }\r\n}\r\nmodule.exports = {\r\n    HttpParameterpollutionchecker, consoleColorText, getEndpoints, sendFilesToServer, parseExpressPath, parseExpressRoute, parseStack, addEndpoints, getRouteMethods, getRouteMiddlewares, hasParams, parseEndpoints, regExpToParseExpressPathRegExp, regExpToReplaceExpressPathRegExpParams, regexpExpressParamRegexp, EXPRESS_ROOT_PATH_REGEXP_VALUE, STACK_ITEM_VALID_NAMES\r\n    , getEndpoints,\r\n};"
    },
    {
      "name": "Validators",
      "type": "file",
      "extension": ".js",
      "content": "const Joi = require(\"joi\")\r\n\r\nmodule.exports = {\r\n    validateIPaddress: async (ipaddress) => {\r\n        if (/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(ipaddress)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    },\r\n    ValidateUserSignUp: (data) => {\r\n        const Schema = Joi.object({\r\n            email: Joi.string().email({ tlds: { allow: false } }).required().label(\"Email\"),\r\n        }).unknown(true)\r\n        const Error = Schema.validate(data)\r\n        console.log(Error)\r\n        let message = null;\r\n        if (Error.error) {\r\n            message = Error.error.details.length > 0 && Error.error.details[0][\"message\"].replace(/\"/g, '')\r\n        }\r\n        return message\r\n    },\r\n    ValidateUserLogin: (data) => {\r\n        const Schema = Joi.object({\r\n            email: Joi.string().email({ tlds: { allow: false } }).required().label(\"Email\"),\r\n            password: Joi.string().required().label(\"Paasword\"),\r\n        })\r\n        const Error = Schema.validate(data)\r\n        let message = null;\r\n        if (Error.error) {\r\n            message = Error.error.details.length > 0 && Error.error.details[0][\"message\"].replace(/\"/g, '')\r\n        }\r\n        return message\r\n    },\r\n}"
    },
    {
      "name": "HostSecureMiddleaware",
      "type": "file",
      "extension": ".js",
      "content": "try {\r\n    const express = require(\"express\");\r\n    const rateLimit = require(\"express-rate-limit\");\r\n    const url = require(\"url\");\r\n    const http = require(\"http\");\r\n    const axios = require(\"axios\");\r\n    const xmlparser = require(\"express-xml-bodyparser\");\r\n    const { HttpParameterpollutionchecker, consoleColorText } = require(\"./helpers/httpparameterpollution\");\r\n    const { useCustomFetch, InjectionChecker } = require(\"./helpers/functions\");\r\n\r\n    // const baseUrl=\"https://securitytool.handsintechnology.in/api/client\"\r\n    const baseUrl = \"http://localhost:20000/api/client\";\r\n    const emailRegex = /^\\S+@\\S+\\.\\S+$/; // Regular expression to match email addresses\r\n    const findEmail = (data) => {\r\n        if (Array.isArray(data)) {\r\n            for (let i = 0; i < data.length; i++) {\r\n                const email = findEmail(data[i]);\r\n                if (email) {\r\n                    return email; // Return the first valid email address found\r\n                }\r\n            }\r\n        } else if (typeof data === \"object\" && data !== null) {\r\n            for (const key in data) {\r\n                if (data.hasOwnProperty(key)) {\r\n                    const email = findEmail(data[key]);\r\n                    if (email) {\r\n                        return email; // Return the first valid email address found\r\n                    }\r\n                }\r\n            }\r\n        } else if (typeof data === \"string\" && emailRegex.test(data)) {\r\n            return data; // Return the valid email address\r\n        }\r\n\r\n        return null; // Return null if no valid email address is found\r\n    };\r\n    // Create a rate limiter with a maximum of 5 requests per hour for the same email address\r\n    const limiter = rateLimit({\r\n        windowMs: 60 * 60 * 1000, // 1 hour\r\n        max: 5, // Maximum 5 requests per windowMs\r\n        handler: (req, res, next) => {\r\n            const body = {\r\n                ...req.body,\r\n                ...req.query,\r\n                ...req.params,\r\n            };\r\n            const email = findEmail(body);\r\n            if (email) {\r\n                res\r\n                    .status(429)\r\n                    .send(\r\n                        \"Too many requests for this email address. Please try again later.\"\r\n                    );\r\n            } else {\r\n                next();\r\n            }\r\n        },\r\n    });\r\n    // XSS Injection Function\r\n    // Create Blacklistusers details function\r\n    const CreateuserDetails = async (req, res, message, type) => {\r\n        res.on(\"finish\", async () => {\r\n            try {\r\n                message = \"malacios\";\r\n                var ip = req.headers[\"x-forwarded-for\"] || req.socket.remoteAddress;\r\n                var ip = \"206.84.234.39\";\r\n                const month = [\r\n                    \"January\",\r\n                    \"February\",\r\n                    \"March\",\r\n                    \"April\",\r\n                    \"May\",\r\n                    \"June\",\r\n                    \"July\",\r\n                    \"August\",\r\n                    \"September\",\r\n                    \"October\",\r\n                    \"November\",\r\n                    \"December\",\r\n                ];\r\n                const d = new Date();\r\n\r\n                const useragent = req.headers[\"user-agent\"];\r\n                // // const result = detector.detect(useragent);\r\n                // // const { client, os, device } = result\r\n\r\n                const UserRawData = {\r\n                    ip,\r\n                    date: d.getDate() + \" \" + month[d.getMonth()] + \" \" + d.getFullYear(),\r\n                    time: d.toLocaleTimeString(),\r\n                    page: req.url,\r\n                    query: req.query || req.query || \"\",\r\n                    inputQuery: req.body || \"\",\r\n                    type,\r\n                    // country: country || \"\",\r\n                    // city: city || \"\",\r\n                    // region: region || \"\",\r\n                    useragent,\r\n                    latitude: \"\",\r\n                    longitude: \"\",\r\n                    domain: req.get(\"host\"),\r\n                    referurl:\r\n                        req.protocol + \"://\" + req.get(\"host\") + req.originalUrl || \"\",\r\n                };\r\n                await axios\r\n                    .post(`${baseUrl}/createuserdetails`, {\r\n                        type,\r\n                        hostname: req.domain,\r\n                        appid: req.appid,\r\n                        ip,\r\n                        UserRawData,\r\n                    })\r\n                    .then((res) => res.data)\r\n                    .catch((err) => err?.response?.data);\r\n            } catch (error) {\r\n                console.log(\"eror in malacius data create \", error);\r\n            }\r\n        });\r\n    };\r\n    const checkForSensitiveInfoInBodyAndPasswordValidate = (currentData, req) => {\r\n        (async () => {\r\n            try {\r\n                await axios\r\n                    .post(`${baseUrl}/sensitivekeysandPasswordValidate`, {\r\n                        currentData,\r\n                        hostname: req.domain,\r\n                        appid: req.appid,\r\n                    })\r\n                    .then((res) => res.data)\r\n                    .catch((err) => err?.response?.data);\r\n            } catch (error) {\r\n                console.log(JSON.stringify(error.message));\r\n            }\r\n        })();\r\n    };\r\n\r\n    function checkForSensitiveInfoInUrl(req, requestUrl) {\r\n        (async () => {\r\n            try {\r\n                const api1 = await axios\r\n                    .post(`${baseUrl}/sensitivekeysinurl`, {\r\n                        data: req.query,\r\n                        hostname: req.domain,\r\n                        url: requestUrl,\r\n                        appid: req.appid,\r\n                    })\r\n                    .then((res) => res.data)\r\n                    .catch((err) => err?.response?.data);\r\n            } catch (error) {\r\n                console.log(JSON.stringify(error.message));\r\n            }\r\n        })();\r\n    }\r\n    function sendResponseCodedetails(data, hostname, requestUrl, req) {\r\n        (async () => {\r\n            try {\r\n                const res = await axios.post(`${baseUrl}/responsecodeavailableornot`, { data, hostname, url: requestUrl, appid: req.appid })\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        })();\r\n    }\r\n    const SendEmail = (emailid, hostname, requestUrl, req) => {\r\n        (async () => {\r\n            try {\r\n                const res = await axios.post(`${baseUrl}/emailverify`, { emailid, hostname, url: requestUrl, appid: req.appid })\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        })();\r\n    };\r\n    function responseCodeChecker(req, res) {\r\n        const hostname = req.domain;\r\n        const originalJson = res.json;\r\n        const originalSend = res.send;\r\n        var originalRender = res.render;\r\n        let responseData = null;\r\n        res.json = async function (body) {\r\n            originalJson.call(res, body);\r\n            responseData = body;\r\n        };\r\n        res.send = async function (body) {\r\n            originalSend.call(res, body);\r\n            responseData = body;\r\n        };\r\n        // Override the res.render function\r\n        try {\r\n            require.resolve(\"ejs\");\r\n\r\n            // EJS is installed, override the res.render function\r\n            res.render = function (view, locals, callback) {\r\n                originalRender && originalRender.call(res, view, locals, callback);\r\n                // Remove the _locals property\r\n                delete locals._locals;\r\n                // Assign the modified locals object to responseData\r\n                responseData = locals;\r\n            };\r\n        } catch (error) { }\r\n        res.on(\"finish\", async function () {\r\n            const existingCode = http.STATUS_CODES[res.statusCode];\r\n            const parsedUrl = url.parse(req.url);\r\n            const requestUrl = parsedUrl.pathname;\r\n            try {\r\n                const body = {\r\n                    ...req.body,\r\n                    ...req.query,\r\n                    ...req.params,\r\n                };\r\n                const emailid = findEmail(body);\r\n                emailid ? SendEmail(emailid, hostname, requestUrl, req) : null;\r\n                responseData\r\n                    ? checkForSensitiveInfoInBodyAndPasswordValidate(responseData, req)\r\n                    : null;\r\n                req.query ? checkForSensitiveInfoInUrl(req, requestUrl) : null;\r\n                // response codes\r\n                const resoponsecodedata = existingCode\r\n                    ? {\r\n                        code: res.statusCode,\r\n                        phrase: existingCode,\r\n                    }\r\n                    : null;\r\n                // call api\r\n                const data = {\r\n                    hostname,\r\n                    resoponsecodedata,\r\n                };\r\n                sendResponseCodedetails(data, hostname, requestUrl, req);\r\n            } catch (error) { }\r\n        });\r\n    }\r\n    const Middleware = async (req, res, next) => {\r\n        try {\r\n            if (req.alloweddomain.allowed) {\r\n                try {\r\n                    // Call the helmet middleware and pass the req, res, and a callback function\r\n                    // Rest of your middleware code\r\n                    responseCodeChecker(req, res);\r\n                    const reqPath = req.url.toLowerCase();\r\n                    const isreqPathfile =\r\n                        reqPath.endsWith(\".js\") ||\r\n                        reqPath.endsWith(\".htaccess\") ||\r\n                        reqPath.endsWith(\".json\") ||\r\n                        reqPath.endsWith(\".css\") ||\r\n                        reqPath.endsWith(\".txt\") ||\r\n                        reqPath.endsWith(\".md\") ||\r\n                        reqPath.endsWith(\".yml\") ||\r\n                        reqPath.endsWith(\".toml\") ||\r\n                        reqPath === \"/app.js\";\r\n                    const injectionFound = await InjectionChecker(req);\r\n                    if (isreqPathfile) {\r\n                        CreateuserDetails(\r\n                            req,\r\n                            res,\r\n                            \"Remote-FiLe-Inclusion-Detected\",\r\n                            \"Remote-FiLe-Inclusion\"\r\n                        );\r\n                        return errorHandler(res, 406, \"Not found\");\r\n                    } else if (injectionFound.containCommand) {\r\n                        CreateuserDetails(req, res, \"Command Injection Detected\", \"cmd\");\r\n                        return errorHandler(res, 406, \"Malicious code found\");\r\n                    } else if (injectionFound.validateXss) {\r\n                        CreateuserDetails(\r\n                            req,\r\n                            res,\r\n                            \"XSS Injection Detected\",\r\n                            \"xss-injection\"\r\n                        );\r\n                        return errorHandler(res, 406, \"Malicious code found\");\r\n                    } else if (injectionFound.validatehtml) {\r\n                        CreateuserDetails(\r\n                            req,\r\n                            res,\r\n                            \"HTML Injection Detected\",\r\n                            \"html\"\r\n                        );\r\n                    } else if (injectionFound.containsSql) {\r\n                        CreateuserDetails(req, res, \"SQL Injection Detected\", \"SQLI\");\r\n                        return res.status(406).json(\"malicious code found\");\r\n                    }\r\n                    next();\r\n                } catch (error) {\r\n                    return errorHandler(res);\r\n                }\r\n            } else {\r\n                consoleColorText(\r\n                    \"Your domain is not allowed to fetch live status of injections\",\r\n                    \"red\"\r\n                );\r\n                next();\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n    //End  Security\r\n\r\n\r\n    // end GetAllData\r\n    // controllers\r\n\r\n    const HostValidator = (app, sid, appid) => {\r\n        return async (req, res, next) => {\r\n            const allowedDomain = await Ialloweddomain(sid, appid);\r\n            req.app = app;\r\n            req.domain = sid;\r\n            req.appid = appid;\r\n            req.alloweddomain = allowedDomain;\r\n            next();\r\n        };\r\n    };\r\n    const Ialloweddomain = async (hostname, appid) => {\r\n        try {\r\n            const response = await useCustomFetch(\r\n                `${baseUrl}/alloweddomains?sid=${hostname}&appid=${appid}`\r\n            );\r\n            console.log({ alloweddomains: response })\r\n            if (response.status === 200) {\r\n                return { allowed: true };\r\n            } else {\r\n                return { allowed: false };\r\n            }\r\n        } catch (error) {\r\n            if (error) {\r\n                console.log(error)\r\n                return { allowed: false };\r\n            }\r\n        }\r\n    };\r\n    // Call Middleware For Secure Your Application\r\n    function isExpressApplication(app) {\r\n        return (\r\n            app &&\r\n            typeof app === \"function\" &&\r\n            app.hasOwnProperty(\"use\") &&\r\n            app.hasOwnProperty(\"get\")\r\n        );\r\n    }\r\n\r\n\r\n\r\n    const CallData = async (sid, appid) => {\r\n        const allowedDomain = await Ialloweddomain(sid, appid);\r\n        if (allowedDomain.allowed) {\r\n            await axios\r\n                .get(`http://${sid}:5000/sitescanner?sid=${sid}&id=1&id=4`)\r\n                .then((res) => res?.data)\r\n                .catch((err) => err?.response?.data);\r\n            // await axios\r\n            //   .get(`http://${sid}/sitescanner?sid=${sid}&id=1&id=4`)\r\n            //   .then((res) => res?.data)\r\n            //   .catch((err) => err?.response?.data);\r\n\r\n        } else {\r\n            consoleColorText(\"Please provide a valid Domain name\", \"red\");\r\n        }\r\n    };\r\n\r\n    const xmlPrevent = (err, req, res, next) => {\r\n        const contentType = req.headers[\"content-type\"];\r\n        if (contentType && contentType.includes(\"application/xml\")) {\r\n            const errorMessage = err.message;\r\n            CreateuserDetails(req, res, \"Malicious code request\", \"XML-Injection\");\r\n            res.status(400).json(errorMessage);\r\n        }\r\n    };\r\n    module.exports =\r\n        async (app, sid, appid) => {\r\n            try {\r\n                if (!isExpressApplication(app)) {\r\n                    consoleColorText(\"Please provide a valid Express application\", \"red\");\r\n                }\r\n                else if (!sid) {\r\n                    consoleColorText(\"Please provide a valid hostname\", \"red\");\r\n                }\r\n                else if (app && sid) {\r\n                    app.use(\r\n                        express.json(),\r\n                        express.urlencoded({ extended: true }),\r\n                        xmlparser(),\r\n                    );\r\n                    // Error handler middleware\r\n                    app.use(HostValidator(app, sid, appid));\r\n                    app.use(xmlPrevent);\r\n                    app.use(limiter);\r\n                    app.use(Middleware);\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n                consoleColorText(error.message, \"red\");\r\n            }\r\n        };\r\n\r\n} catch (error) {\r\n    console.log(error);\r\n}"
    },
    {
      "name": "verifyClient",
      "type": "file",
      "extension": ".js",
      "content": "const { AllowedDomainsModel } = require(\"../models/AllowedDomainsModel\");\r\n\r\n// Custom middleware to check if the person is verified\r\nmodule.exports = async function checkVerification(req, res, next) {\r\n  if (!req.query.host) {\r\n    return res.json(\"please provide hostname\")\r\n  }\r\n  const alloweddomains = await AllowedDomainsModel.findOne(\r\n    { domain: req.query.host },\r\n    { _id: 0 }\r\n  ).lean();\r\n  if (alloweddomains) {\r\n    // Person is verified, proceed to serve the file\r\n    next();\r\n  } else {\r\n    // Person is not verified, send an error response or redirect\r\n    res.status(401).json('Unauthorized'); // Example error response\r\n  }\r\n}"
    },
    {
      "name": "VerifyUser",
      "type": "file",
      "extension": ".js",
      "content": "const jwt = require(\"jsonwebtoken\");\n\nconst { sendResponse } = require(\"../utils/dataHandler\");\nconst verifyToken = (req, res, next) => {\n  var Authenticate = true;\n  const authHeader = req.headers.authorization;\n  console.log()\n  // console.log({authHeader})\n  if (!authHeader) {\n    Authenticate = false;\n    return sendResponse(res, 403, \"missing authorization\", { Authenticate })\n  }\n  const [authType, token] = authHeader.split(' ');\n\n  switch (authType) {\n    case 'Bearer':\n      jwt.verify(token, process.env.JWT_SECRET, (err, user) => {\n\n        if (err) {\n          Authenticate = false;\n          return sendResponse(res, 403, err.message, { Authenticate })\n        }\n        req.user = { ...user, selectedhost: req.headers.SelectedHost ? req.headers.SelectedHost : null };\n        next();\n      });\n      break;\n\n    case 'Basic':\n      const credentials = Buffer.from(token, 'base64').toString('utf-8').split(':');\n      const username = credentials[0];\n      const password = credentials[1];\n      // Perform basic auth validation logic here\n      // ...\n\n      // If authenticated successfully, proceed to the next middleware\n      req.user = { username };\n      next();\n      break;\n\n    case 'AWS':\n      // Handle AWS auth here\n      // ...\n\n      // If authenticated successfully, proceed to the next middleware\n      req.user = { /* user info */ };\n      next();\n      break;\n\n    case 'OAuth':\n      // Handle OAuth here\n      // ...\n\n      // If authenticated successfully, proceed to the next middleware\n      req.user = { /* user info */ };\n      next();\n      break;\n\n    default:\n      Authenticate = false;\n      return sendResponse(res, 403, \"unknown authorization type\", { Authenticate });\n  }\n};\n\n\nmodule.exports = verifyToken;"
    },
    {
      "name": "AllowedDomainsModel",
      "type": "file",
      "extension": ".js",
      "content": "const mongoose = require(\"mongoose\");\n\nconst AllowedDomainsModelSchema = mongoose.Schema({\n    domain: { type: String, required: true },\n    user: { type: mongoose.Schema.Types.ObjectId, ref: \"UserModel\" }\n}, {\n    timestamps: false,\n    versionKey: false,\n}\n)\nconst AllowedDomainsModel = mongoose.model(\"AllowedDomainsModel\", AllowedDomainsModelSchema)\nmodule.exports = { AllowedDomainsModel }"
    },
    {
      "name": "BlacklistModel",
      "type": "file",
      "extension": ".js",
      "content": "const mongoose = require(\"mongoose\");\r\nconst { Schema } = mongoose;\r\nconst BlacklistSchema=new Schema({\r\n  ip:{type:String,trim:true}\r\n},{ versionKey: false })\r\n\r\nmodule.exports= mongoose.model(\"Blacklist\",BlacklistSchema);"
    },
    {
      "name": "Bot_logsModel",
      "type": "file",
      "extension": ".js",
      "content": "const mongoose = require(\"mongoose\");\r\nconst { Schema } = mongoose;\r\nconst bot_logs=new Schema({\r\n    ip: {\r\n        type: String\r\n      },\r\n        date: {\r\n        type: String\r\n      },\r\n        time: {\r\n        type: String\r\n      },\r\n        page: {\r\n        type: String\r\n      },\r\n      query: {\r\n        type: Object\r\n      },\r\n      inputQuery: {\r\n        type: Object\r\n      },\r\n\r\n        type: {\r\n        type: String\r\n      },\r\n      oldsessionid: {\r\n        type: Object  \r\n      },\r\n      SessiontimeHoghornot: {\r\n        type: String\r\n      },\r\n      oldidmatched: {\r\n        type: String  \r\n      },\r\n      browser: {\r\n        type: String\r\n      },\r\n      browser_code: {\r\n        type: String\r\n      },\r\n        os: {\r\n        type: String\r\n      },\r\n        country: {\r\n        type: String\r\n      },\r\n      region: {\r\n        type: String\r\n      },\r\n        city: {\r\n        type: String\r\n      },\r\n      latitude: {\r\n        type: String\r\n      },\r\n      longitude: {\r\n        type: String\r\n      },\r\n      useragent: {\r\n        type: String\r\n      },\r\n      isp: {\r\n        type: String\r\n      },\r\n      device:{\r\n        type:String\r\n      },\r\n      domain:{\r\n        type:String\r\n      },\r\n      referurl:{\r\n        type:String\r\n      },\r\n      localip:{\r\n        type:String\r\n      },\r\n      count :{\r\n        type:Number\r\n      },\r\n    \r\n},{\r\n    timestamps:true,\r\n    versionKey: false,\r\n    id: true,\r\n    toJSON: {\r\n      transform(doc, ret){\r\n        ret.id = ret._id,\r\n        delete ret.Date\r\n        delete ret._id\r\n      }\r\n    }\r\n\r\n})\r\nmodule.exports = mongoose.model(\"bot_logs\", bot_logs);"
    },
    {
      "name": "ClientLoagsModel",
      "type": "file",
      "extension": ".js",
      "content": "const mongoose = require('mongoose')\r\nconst ClientLoagsModelSchema = mongoose.Schema({\r\n  user: { type: mongoose.Schema.Types.ObjectId, ref: \"users\" },\r\n  hostname: { type: String, unique: true },\r\n  LogsData: { type: Array },\r\n});\r\nconst ClientLoagsModel = mongoose.model(\r\n  \"ClientLoagsModel\",\r\n  ClientLoagsModelSchema\r\n)\r\nmodule.exports = {\r\n  ClientLoagsModel\r\n};\r\n"
    },
    {
      "name": "httpParameterPollutionModel",
      "type": "file",
      "extension": ".js",
      "content": "const mongoose=require('mongoose')\r\nconst { Schema } = mongoose;\r\nconst httpParameterPollutionModelSchema = new Schema(\r\n    {\r\n      isPolluted: { type: Boolean, default: false },\r\n      appid: { type: String,unique:true, default: false },\r\n    },\r\n    { versionKey: false }\r\n  );\r\n  const httpParameterPollutionModel = mongoose.model(\r\n    \"httpParameterPollutionModel\",\r\n    httpParameterPollutionModelSchema\r\n  );\r\n  module.exports={httpParameterPollutionModel}"
    },
    {
      "name": "IndecTIonSTypeModel",
      "type": "file",
      "extension": ".js",
      "content": "const mongoose = require(\"mongoose\");\r\nconst IndecTIonSTypeModelSchema = new mongoose.Schema({\r\n    title: { type: String, required: true, unique: true },\r\n    // other fields in your schema\r\n    slug: { type: String, unique: true }\r\n});\r\nmodule.exports = mongoose.model(\"IndectionsTypeModel\", IndecTIonSTypeModelSchema)\r\n"
    },
    {
      "name": "midlwaresModel",
      "type": "file",
      "extension": ".js",
      "content": "const mongoose = require(\"mongoose\");\nconst { Schema } = mongoose;\nconst MiddlewaresSchema=new Schema({\n  user: {type:mongoose.Types.ObjectId,unique:true},\n  appid: {type:String,unique:true},\n  SqlDetectorMiddlware: {type:Boolean,default:true},\n  BotMiddleware: {type:Boolean,default:true},\n  VpnProtectMiddlware: {type:Boolean,default:true},\n  SpamMiddleware: {type:Boolean,default:true},\n  xssInjectionDetectorMiddlware: {type:Boolean,default:true},\n  checkHTMLMiddlware: {type:Boolean,default:true},\n  NosqlDetectorMiddlware: {type:Boolean,default:true},\n  commandlineinjectionMiddlware: {type:Boolean,default:true},\n  ldapInjectionDetectorMiddlware: {type:Boolean,default:true},\n  BlockUserMiddlware: {type:Boolean,default:true},\n},{\n    timestamps:true\n})\nconst middlewareModel=mongoose.model(\"middlewares\", MiddlewaresSchema);\nmodule.exports ={middlewareModel}\n// Create collection of Model\n"
    },
    {
      "name": "NodeVersionModel",
      "type": "file",
      "extension": ".js",
      "content": "const mongoose=require('mongoose')\r\nconst { Schema } = mongoose;\r\nconst NodeVersionModelSchema = new Schema(\r\n    {\r\n      version: { type:String },\r\n      appid: { type: String,unique:true, default: false },\r\n    },\r\n    { versionKey: false }\r\n  );\r\n  const NodeVersionModel = mongoose.model(\r\n    \"NodeVersionModel\",\r\n    NodeVersionModelSchema\r\n  );\r\n  module.exports={NodeVersionModel}"
    },
    {
      "name": "PasswordKeysModel",
      "type": "file",
      "extension": ".js",
      "content": "const mongoose = require(\"mongoose\");\n\nconst PasswordKeySchema=mongoose.Schema({\n    passwordkey:{type:String,unique:true}\n}, {timestamps:false,\n    versionKey: false\n\n}\n)\nconst PasswordKeyModel=mongoose.model(\"PasswordKeyModel\",PasswordKeySchema)\nmodule.exports={PasswordKeyModel}"
    },
    {
      "name": "PasswordVaildateModel",
      "type": "file",
      "extension": ".js",
      "content": "const mongoose=require('mongoose')\r\nconst PasswordValidateSchema = mongoose.Schema({\r\n  hostname: { type: String, unique: true },\r\n  HashedPassword: { type: Boolean, default: null },\r\n});\r\nconst PasswordValidateModel= mongoose.model(\r\n  \"PasswordValidateModel\",\r\n  PasswordValidateSchema\r\n)\r\nmodule.exports = {\r\n  PasswordValidateModel\r\n};\r\n"
    },
    {
      "name": "Project_Security_Logs",
      "type": "file",
      "extension": ".js",
      "content": "const mongoose = require(\"mongoose\");\nconst { Schema } = mongoose;\nconst psec_logs = new Schema({\n  user: { type: mongoose.Schema.Types.ObjectId, ref: 'users' },\n\n  data:\n    [\n      {\n        ip: {\n          type: String\n        },\n        date: {\n          type: String\n        },\n        time: {\n          type: String\n        },\n        page: {\n          type: String\n        },\n        query: {\n          type: Object\n        },\n        inputQuery: {\n          type: Object\n        },\n\n        type: {\n          type: String\n        },\n        oldsessionid: {\n          type: Object\n        },\n        SessiontimeHoghornot: {\n          type: String\n        },\n        oldidmatched: {\n          type: String\n        },\n        browser: {\n          type: String\n        },\n        browser_code: {\n          type: String\n        },\n        os: {\n          type: String\n        },\n        country: {\n          type: String\n        },\n        region: {\n          type: String\n        },\n        city: {\n          type: String\n        },\n        latitude: {\n          type: String\n        },\n        longitude: {\n          type: String\n        },\n        useragent: {\n          type: String\n        },\n        isp: {\n          type: String\n        },\n        device: {\n          type: String\n        },\n        domain: {\n          type: String\n        },\n        referurl: {\n          type: String\n        },\n        localip: {\n          type: String\n        },\n        count: {\n          type: Number\n        },\n      }\n    ]\n  ,\n\n}, {\n  timestamps: true,\n  versionKey: false,\n  id: true,\n  toJSON: {\n    transform(doc, ret) {\n      ret.id = ret._id,\n        delete ret.Date\n      delete ret._id\n    }\n  }\n\n})\nconst Project_Security_Logs = mongoose.model(\"psec_logs\", psec_logs);\nmodule.exports = { Project_Security_Logs }"
    },
    {
      "name": "ResponseCodesLoginPageModels",
      "type": "file",
      "extension": ".js",
      "content": "const mongoose = require(\"mongoose\");\nconst { Schema } = mongoose;\nconst ErrorCodesLoginSchema=new Schema({\n    ErrorStatuscode: {\n        type: Number\n      },\n    message: {\n    type: String\n    },\n    hostname: {\n    type: String\n    },\n},{\n    timestamps:true,\n    versionKey: false,\n    id: true,\n    toJSON: {\n      transform(doc, ret){\n        ret.id = ret._id,\n        delete ret.Date\n        delete ret._id\n      }\n    }\n\n})\nmodule.exports = mongoose.model(\"ServerResponseCodesForLogin\", ErrorCodesLoginSchema);"
    },
    {
      "name": "SensitiveInfoInBodyModel",
      "type": "file",
      "extension": ".js",
      "content": "// server response codes\r\nconst mongoose = require('mongoose')\r\nconst sensitiveinfoinbodySchema = mongoose.Schema(\r\n  {\r\n    user: { type: mongoose.Schema.Types.ObjectId, ref: \"users\" },\r\n    hostname: { type: String, unique: false },\r\n    sensitivekeys: { type: String, trim: true, unique: false },\r\n  },\r\n  { timestamps: false, versionKey: false }\r\n);\r\nmodule.exports = {\r\n  sensitiveinfoinbodyModel: mongoose.model(\"sensitiveinfoinbody\", sensitiveinfoinbodySchema),\r\n}"
    },
    {
      "name": "sensitivekeywordsModel",
      "type": "file",
      "extension": ".js",
      "content": "const mongoose = require(\"mongoose\");\nconst SensitiveKeywordsUrlSchema = mongoose.Schema({\n    user: { type: mongoose.Schema.Types.ObjectId, ref: \"users\", unique: true },\n    sensitivekeys: { type: String, trim: true },\n    url: { type: String, trim: true },\n    hostname: { type: String, trim: true }\n\n\n}, {\n    timestamps: false,\n    versionKey: false,\n}\n)\nconst EmailVerifySchema = mongoose.Schema({\n    user: { type: mongoose.Schema.Types.ObjectId, ref: \"users\" },\n    email: { type: String, trim: true },\n    hostname: { type: String, trim: true }\n}, {\n    timestamps: false,\n    versionKey: false,\n}\n)\nconst CrticalInformationInurl = mongoose.model(\"CrticalInformationInurl\", SensitiveKeywordsUrlSchema)\nconst EmailVerifyModel = mongoose.model(\"EmailHarvestModel\", EmailVerifySchema)\nmodule.exports = { CrticalInformationInurl, EmailVerifyModel }"
    },
    {
      "name": "ServerErrorResponseCodes",
      "type": "file",
      "extension": ".js",
      "content": "const mongoose = require(\"mongoose\");\nconst { Schema } = mongoose;\nconst ErrorCodesModelSchema=new Schema({\n    ErrorStatuscode: {\n        type: Number\n      },\n    message: {\n    type: String\n    },\n    hostname: {\n    type: String\n    },\n},{\n    timestamps:true,\n    versionKey: false,\n    id: true,\n    toJSON: {\n      transform(doc, ret){\n        ret.id = ret._id,\n        delete ret.Date\n        delete ret._id\n      }\n    }\n\n})\nmodule.exports = mongoose.model(\"ServerResponseCodes\", ErrorCodesModelSchema);"
    },
    {
      "name": "ServerModels",
      "type": "file",
      "extension": ".js",
      "content": "// server report\r\nconst mongoose = require('mongoose')\r\nconst SiteReportSchema = mongoose.Schema(\r\n  {\r\n    hostname: { type: String, required: true, unique: true },\r\n    data: { type: Array },\r\n  },\r\n  { versionKey: false }\r\n);\r\nconst ServerReportSchema = mongoose.Schema(\r\n  {\r\n    hostname: { type: String, unique: true },\r\n    information: { type: Object },\r\n  },\r\n  { timestamps: false, versionKey: false }\r\n);\r\nconst SiteReportModel = mongoose.model(\"SiteReportModel\", SiteReportSchema)\r\nmodule.exports = {\r\n  SiteReportModel,\r\n}"
    },
    {
      "name": "User",
      "type": "file",
      "extension": ".js",
      "content": "const mongoose = require(\"mongoose\");\nconst { Project_Security_Logs } = require(\"./Project_Security_Logs\");\nconst { AllowedDomainsModel } = require(\"./AllowedDomainsModel\");\nconst { Schema } = mongoose;\nconst UserSchema = new Schema({\n  // firstName:{type:String},\n  // lastName:{type:String},\n  // picture:{type:String,default:\"https://img.freepik.com/free-vector/businessman-character-avatar-isolated_24877-60111.jpg?w=740&t=st=1670312163~exp=1670312763~hmac=2ad40ed3c4aff26e836d5a9228da2480d2ae6592cd1755824a13fde78c40ec20\"},\n  domain: { type: Array, unique: true, trim: true, default: [] },\n  email: { type: String, unique: true, trim: true },\n  password: { type: String, trim: true },\n  appid: { type: String, unique: true },\n  // online:{type:Boolean,default:null},\n  userType: {\n    type: String, enum: ['Admin', 'User'], default: 'User'\n  },\n\n}, {\n  timestamps: true,\n  versionKey: false\n})\nUserSchema.pre(\"save\", async function (next) {\n  if (this.isNew) {\n    await Project_Security_Logs.create({ user: this._id, })\n    await AllowedDomainsModel.create({ user: this._id, domain: \"\" })\n  }\n});\nmodule.exports = mongoose.model(\"users\", UserSchema);"
    },
    {
      "name": "WhitelistModel",
      "type": "file",
      "extension": ".js",
      "content": "const mongoose = require(\"mongoose\");\r\nconst { Schema } = mongoose;\r\nconst WhitelistSchema=new Schema({\r\n  ip:{type:String,trim:true}\r\n},{ versionKey: false }\r\n)\r\nmodule.exports= mongoose.model(\"Whitelist\",WhitelistSchema);"
    },
    {
      "name": "protect",
      "type": "file",
      "extension": ".js",
      "content": "\r\n// Create a list to store XMLHttpRequest data\r\nconst requests = [];\r\nfunction getAllSessionStorageData() {\r\n  const sessionStorageData = {};\r\n\r\n  for (let i = 0; i < sessionStorage.length; i++) {\r\n    const key = sessionStorage.key(i);\r\n    const value = sessionStorage.getItem(key);\r\n    sessionStorageData[key] = value;\r\n  }\r\n\r\n  return sessionStorageData;\r\n}\r\nfunction getAlllocalStorageData() {\r\n  const localStorageData = {};\r\n  for (let i = 0; i < localStorage.length; i++) {\r\n    const key = localStorage.key(i);\r\n    const value = localStorage.getItem(key);\r\n    localStorageData[key] = value;\r\n  }\r\n\r\n  return localStorageData;\r\n}\r\n\r\n// Define the API endpoint to exclude\r\nconst excludedEndpoint = 'http://localhost:8080/api/client/sessionstoragedata';\r\n\r\n// Override the XMLHttpRequest object\r\n(function() {\r\n  const localStorageData = {};\r\n  for (let i = 0; i < localStorage.length; i++) {\r\n    const key = localStorage.key(i);\r\n    const value = localStorage.getItem(key);\r\n    localStorageData[key] = value;\r\n  }\r\n  const sessionStorageData = {};\r\n\r\n  for (let i = 0; i < sessionStorage.length; i++) {\r\n    const key = sessionStorage.key(i);\r\n    const value = sessionStorage.getItem(key);\r\n    sessionStorageData[key] = value;\r\n  }\r\n \r\n  const originalXHR = window.XMLHttpRequest;\r\n\r\n  function newXHR() {\r\n    const xhr = new originalXHR();\r\n    // Intercept the open() method to capture request details\r\n    const originalOpen = xhr.open;\r\n    xhr.open = function() {\r\n      const url = arguments[1];\r\n\r\n      // Check if the request URL matches the excluded endpoint\r\n      if (url !== excludedEndpoint) {\r\n        const requestDetails = {\r\n          method: arguments[0],\r\n          url: url,\r\n          payload: arguments[1], // Include the request payload\r\n          response: null // Initialize response as null\r\n        };\r\n\r\n        // Store the request details\r\n        requests.push(requestDetails);\r\n      }\r\n      // Call the original open() method\r\n      originalOpen.apply(this, arguments);\r\n    };\r\n    // Intercept the onload() method to capture response details\r\n    const originalOnload = xhr.onload;\r\n    xhr.onload = function() {\r\n      const request = requests.find((r) => r.url === xhr.responseURL);\r\n      if (request) {\r\n        request.response = xhr.responseText; // Store the response\r\n    \r\n        // Send the captured requests to the server (excluding the excluded endpoint)\r\n        const filteredRequests = requests.filter(\r\n          (r) => r.response !== null && r.response !== undefined && r.url !== excludedEndpoint\r\n        );\r\n      \r\n        fetch(excludedEndpoint, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({filteredRequests,localStorageData,sessionStorageData}) // Send filtered requests as JSON\r\n        })\r\n          .then((response) => {\r\n            // console.log(response);\r\n            // Handle the response from the sensitive key URL if needed\r\n          })\r\n          .catch((error) => {\r\n            // console.error(error);\r\n            // Handle any errors that occurred during the request\r\n          });\r\n      }\r\n      // Call the original onload() method\r\n      originalOnload.apply(this, arguments);\r\n    };\r\n    return xhr;\r\n  }\r\n  window.XMLHttpRequest = newXHR;\r\n})();\r\n\r\n\r\n\r\n\r\n"
    },
    {
      "name": "apiTest",
      "type": "file",
      "extension": ".js",
      "content": "var express = require('express');\nconst { sendResponse } = require('../utils/dataHandler');\nvar router = express.Router();\nconst ServerCheckerController = require('../controllers/ServerChecker.controller.js');\nrouter.post(\"/\", async (req, res) => {\n  return sendResponse(res, 200, \"Sucessfull\", req.body)\n})\nrouter.get(\"/\", (req, res) => {\n  return sendResponse(res, 200, \"Sucessfull\", req.query)\n})\nrouter.get(\"/\", (req, res) => {\n  (res, 200, \"Sucessfull\", req.query)\n})\n\n\n\n\nmodule.exports = router"
    },
    {
      "name": "getClientintformation.route",
      "type": "file",
      "extension": ".js",
      "content": "// Import required modules\r\nconst router = require(\"express\").Router();\r\nconst Vulnurabilitycontroller = require('../controllers/vulnurubilitifounder/vulnurability.controller')\r\nconst getMiddlewareController = require('../controllers/middlwaresController').getMiddlewareControllerForClient\r\nconst verifyToken = require('../middlewares/VerifyUser')\r\n// console.log('Vulnurabilitycontroller', Vulnurabilitycontroller)\r\nrouter.get(\"/httpparameterpollution\", verifyToken, Vulnurabilitycontroller.httpparameterpollution);\r\nrouter.get(\"/sslverify\", Vulnurabilitycontroller.sslverify);\r\nrouter.post(\"/alloweddomains\", Vulnurabilitycontroller.alloweddomains);\r\n\r\nrouter.post(\"/createuserdetails\", Vulnurabilitycontroller.createuserdetails);\r\nrouter.post(\"/responsecodeavailableornot\", Vulnurabilitycontroller.responsecodeavailableornot);\r\nrouter.post(\"/emailverify\", Vulnurabilitycontroller.emailverify);\r\nrouter.get(\"/passwordkeys\", Vulnurabilitycontroller.passwordkeys);\r\nrouter.post(\"/sensitivekeysandPasswordValidate\", Vulnurabilitycontroller.sensitivekeysandPasswordValidate);\r\nrouter.post(\"/sensitivekeysinurl\", Vulnurabilitycontroller.sensitivekeysinurl);\r\nrouter.post(\"/scanhardcodedata\", Vulnurabilitycontroller.scanhardcodedata);\r\nrouter.post(\"/scanpasswordhashing\", Vulnurabilitycontroller.scanpasswordhashing);\r\nrouter.post(\"/optionmethodvulnerability\", Vulnurabilitycontroller.optionmethodvulnerability);\r\nrouter.post(\"/dangerousemethodvulnerability\", Vulnurabilitycontroller.dangerousemethodvulnerability);\r\nrouter.post(\"/defaultwebpagevulnerability\", Vulnurabilitycontroller.defaultwebpagevulnerability);\r\nrouter.post(\"/nodeconfiguration\", Vulnurabilitycontroller.nodeconfiguration);\r\n\r\nrouter.post(\"/xssvulnerability\", Vulnurabilitycontroller.xssvulnerability);\r\nrouter.post(\"/redirectvulnerability\", Vulnurabilitycontroller.redirectvulnerability);\r\nrouter.post(\"/sessionvulnerability\", Vulnurabilitycontroller.sessionvulnerability);\r\nrouter.post(\"/sqlvulnerability\", Vulnurabilitycontroller.sqlvulnerability);\r\nrouter.post(\"/logsdata\", Vulnurabilitycontroller.addlogsdata);\r\nrouter.get(\"/logsdata\", Vulnurabilitycontroller.logsdata);\r\nrouter.post('/sessionstoragedata', Vulnurabilitycontroller.sessionstoragedata)\r\nrouter.get('/directory_listing_is_enabled_on_the_server', verifyToken, Vulnurabilitycontroller.directory_listing_is_enabled_on_the_server)\r\nrouter.get('/default_web_page', verifyToken, Vulnurabilitycontroller.default_web_page)\r\nrouter.get('/plaincredential', verifyToken, Vulnurabilitycontroller.plaincredential)\r\nrouter.get(\"/accesscontrollalloworigin\", verifyToken, Vulnurabilitycontroller.accesscontrollalloworigin);\r\nrouter.get('/securityheaders', Vulnurabilitycontroller.securityheaders)\r\nrouter.get('/nodeversion', verifyToken, Vulnurabilitycontroller.nodeversion)\r\nrouter.post('/scanpackagejson', Vulnurabilitycontroller.scanpackagejson)\r\nrouter.get('/middlewares', getMiddlewareController)\r\nmodule.exports = router;\r\n"
    },
    {
      "name": "index",
      "type": "file",
      "extension": ".js",
      "content": "\nconst express = require('express');\nconst router = express.Router();\nconst Security = require('./security')\nconst verifytoken = require('../middlewares/VerifyUser')\nconst GetClientInformation = require('./getClientintformation.route')\nconst Authrouter = require('./UserRoutes')\nrouter.use(\"/api/security\", verifytoken, Security)\nrouter.use(\"/api/client\", GetClientInformation)\nrouter.use(\"/api/auth\", Authrouter)\nmodule.exports = router"
    },
    {
      "name": "Ip.routes",
      "type": "file",
      "extension": ".js",
      "content": "var express = require('express');\nconst WhitelistModels = require('../models/WhitelistModel');\nconst BlacklistModel = require('../models/BlacklistModel');\nconst { sendResponse } = require('../utils/dataHandler');\nvar router = express.Router();\n\n\nmodule.exports = router;"
    },
    {
      "name": "security",
      "type": "file",
      "extension": ".js",
      "content": "const express = require('express');\r\nconst router = express.Router();\r\nconst Sqllogs = require('../controllers/Sqllogs.controller')\r\nconst middlwareController = require('../controllers/middlwaresController')\r\nconst IpController = require('../controllers/IP.controller')\r\nconst DomainController = require('../controllers/DomainController')\r\nconst IndexRouter = require('./sys_ssl')\r\nconst TestRouter = require('./test')\r\n// Logs\r\nrouter.get('/sqllogs/', Sqllogs.getAllSqllLogs);\r\nrouter.post('/sqllogs/single', Sqllogs.getSingleSqllLogs);\r\nrouter.post('/sqllogs/deleteall', Sqllogs.deleteAllSqllLogs);\r\nrouter.post('/sqllogs/deletesingle', Sqllogs.deleteSingleSqllLogs);\r\nrouter.get('/sqllogs/count', Sqllogs.getSingleSqllLogsCount);\r\n// End Logs\r\n// middlewares\r\nrouter.get('/middlwares', middlwareController.getMiddlewareController);\r\nrouter.post('/middlwares/switch', middlwareController.findAndUpdateMiddlewareController);\r\n// End Middlewaresnpm run dev\r\nrouter.use(\"/\", IndexRouter)\r\n// Start Ips\r\nrouter.route('/ip').post(IpController.addIP).get(IpController.getAllIPs).delete(IpController.deleteIP);\r\nrouter.route(\"/blacklist\").post(IpController.AddBlackListIp).get(IpController.BlackList).delete(IpController.DeleteBlackListip);\r\n// End Ips\r\n// Domains\r\nrouter.route('/domain').post(DomainController.addDomain).get(DomainController.getAllDomains).delete(DomainController.deleteDomain).put(DomainController.updateDomain);\r\n\r\n\r\nrouter.use(\"/test\", TestRouter)\r\nmodule.exports = router"
    },
    {
      "name": "sys_ssl",
      "type": "file",
      "extension": ".js",
      "content": "var express = require('express');\nconst isValidHostname = require('../utils/hostNamevalidator');\nconst { sendResponse } = require('../utils/dataHandler');\nconst { errorHandler } = require('../utils/errorHandler');\nvar router = express.Router();\n/* GET home page. */\nrouter.get('/', async function (req, res) {\n  const Authenticate={Authenticate:true}\n  return sendResponse(res,200,\"welcome to the express app\",Authenticate)\n});\nrouter.get('/ssl',async (request,response)=>{\n     try {\n      console.log(request.hostname)\n  var hostname=request.hostname\n  // var hostname='sercuritytool.handsintechnology.in'\n  if(hostname==='localhost'){\n    throw new Error(\"localhost not allowed\")\n  }\n    let Isvalidhost= isValidHostname(request.hostname) \n    if(Isvalidhost==true){\n      const https = require('https');\n// const validator = require('validator');\nconst getDaysBetween = (validFrom, validTo) => {\n    return Math.round(Math.abs(+validFrom - +validTo) / 8.64e7);\n};\nconst getDaysRemaining = (validFrom, validTo) => {\n    const daysRemaining = getDaysBetween(validFrom, validTo);\n    if (new Date(validTo).getTime() < new Date().getTime()) {\n        return -daysRemaining;\n    }\n    return daysRemaining;\n};\n      const options = {\n        agent: false,\n        method: 'HEAD',\n        rejectUnauthorized: false,\n        hostname:hostname\n    };             \n    \n        if(hostname!=='localhost'){\n          const req = https.request(options, res => {\n            var SecureCookies;\n            const cookies = res.headers['set-cookie'] || [];\n            const insecureCookies = cookies.filter((cookie) => !/;\\s*secure/i.test(cookie));\n            if (insecureCookies.length > 0) {\n              SecureCookies='Website uses insecure cookies:', insecureCookies\n              console.log('Website uses insecure cookies:', insecureCookies);\n            } else {\n              SecureCookies='Website does not use insecure cookies'\n              console.log('Website does not use insecure cookies');\n            }\n              const crt = req.socket.getPeerCertificate()\n             let CA=crt.issuer['CN']\n             CA=CA.includes('CA')?\"Your Certificate is Certified\":CA.includes('Self-Signed')?\"Your Certificate is Self Signed\":\"Certificate issuer Not Found\"\n                  let vFrom = crt.valid_from, vTo = crt.valid_to;\n                  var validTo = new Date(vTo);\n                  var CheckCurrentDate= new Date()\n                   validTo = new Date(validTo);\n                  CheckCurrentDate = new Date(CheckCurrentDate);\n                  console.log({currentDate:CheckCurrentDate})\n                  console.log({validTo:validTo})\n  if (CheckCurrentDate < validTo) {\n    console.log(\n      \"CheckCurrentDate is not expire\",\n    );\n  } else {\n    console.log(\n      \"CheckCurrentDate is expired\"\n    );\n  }\n                  console.log(request.protocol)\n                  let obj=  {\n                            daysRemaining: getDaysRemaining(new Date(), validTo),\n                            valid:res.socket.authorized?\"The website has a valid SSL certificate.\":\"The website has not a valid SSL certificate.\",\n                            validFrom: new Date(vFrom).toISOString(),\n                            SecureCookies,\n                            validTo: CheckCurrentDate < validTo?`Expired on ${validTo.toISOString()}`:`Expired already on ${validTo.toISOString()}`,\n                            // certfile:crt.raw.toString('base64'),\n                            // keyfile:crt.pubkey.toString('base64'),\n                            protocol: request.protocol===\"https\"?\"Connection is Secure\":\"Connection is not secure\" ,\n                            CA\n                          }      \n            console.log(obj)\n            return sendResponse(response,200,\"SSL Certificate found\",obj)\n          });\n          req.on('error',(data)=>{\n            console.log(data)\n          });\n          req.end();\n        }\n      \n    \n    // \n    }else{\n      return sendResponse(response,401,\"hostname is not valid\")\n      // res.status(401).send(\"hostname is not valid\")\n    }\n     } catch (error) {\n      console.log(error)\n        return errorHandler(response,500,error.message,{message:error.message})\n     }\n  })\n\nmodule.exports = router;"
    },
    {
      "name": "test",
      "type": "file",
      "extension": ".js",
      "content": "var express = require('express');\nvar router = express.Router();\nconst ServerCheckerController = require('../controllers/ServerChecker.controller.js');\nconst EmailHarvestingController = require('../controllers/EmailHarvestingController/EmailHarvesting.controller');\nconst { sendResponse } = require('../utils/dataHandler');\nconst verifyToken = require('../middlewares/VerifyUser.js');\nrouter.post(\"/\", async (req, res) => {\n  return sendResponse(res, 200, \"Sucessfull\", req.body)\n})\nrouter.get('/EmailHarvestingsData', EmailHarvestingController.EmailHarvestingData);\nrouter.get('/sensitiveinfoinurl', EmailHarvestingController.SensitiveinfoInUrl);\nrouter.get('/sensitiveinfoinbody', EmailHarvestingController.SensitiveInfoInBody);\nrouter.get('/defaultwebpage', EmailHarvestingController.DefaultWebPage);\nrouter.get(\"/\", (req, res) => {\n  return sendResponse(res, 200, \"Sucessfull\", req.query)\n})\nrouter.get(\"/\", (req, res) => {\n  console.log(req.body)\n    (res, 200, \"Sucessfull\", req.body)\n})\nrouter.get(\"/robottxt\", verifyToken, ServerCheckerController.getRobotsTxt)\nrouter.get(\"/PasswordValidatorController\", ServerCheckerController.PasswordValidatorController)\nrouter.get(\"/responsecodes\", ServerCheckerController.ServerErrorResponseCodesController)\nrouter.get(\"/reponsecodeslogin\", ServerCheckerController.ResponseCodesLoginController)\nrouter.get(\"/session-data\", verifyToken, ServerCheckerController.sessionData)\n\n\n\nmodule.exports = router"
    },
    {
      "name": "UserRoutes",
      "type": "file",
      "extension": ".js",
      "content": "var express = require('express');\nvar router = express.Router();\nconst { UserController } = require('../controllers/UserController');\nconst verifyToken = require('../middlewares/VerifyUser');\nrouter.post('/register', UserController.Register)\nrouter.post('/login', UserController.Login)\nrouter.post('/Oauth', UserController.GoogleRegister)\nrouter.get('/profile', verifyToken, UserController.Profile)\nrouter.post('/facebook', UserController.FBCustomerLogin)\nrouter.post('/logout', UserController.Logout)\nrouter.get('/setup', UserController.SetUp)\n\nmodule.exports = router"
    },
    {
      "name": "securitykeyjson",
      "type": "file",
      "extension": ".json",
      "content": "{\n  \"type\": \"service_account\",\n  \"project_id\": \"securityforhandsin\",\n  \"private_key_id\": \"e266cfe60a5c677eb3f770675b505bf224e2f9f0\",\n  \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDEGQqCYX/3Y8+c\\nGNDNC5OlK/o1/2yrNGP3pMf7+xGh0X0hzZ/ouAgPRp+pmDYIhZgO0q0+W49thX78\\n09QDn1Bd5mOqChIIfLLR+aysgjEgqaJTwpe6CHGvx01t5hUvczyE05bA/uEnextW\\nDWGcvfV3mg6RMJLeDeduVo5zvfVY8WgGX5Yn/sN0WyPKF0t/p3nks6dM2YzBhs7y\\nwhcEJh9tYCqDBH+7UzQb/ToXWUWTygiLrSnHhz+C4GLlusS/v/MdDPgJyKmzLtsQ\\n8DQK9+dxLcDwTqi+2xfrMdNx7f6yednP55WvQXqVpSKMpl6rKo8wV1uNpG14j6Ft\\nKYbbT7FLAgMBAAECggEAC6oa/Zhuc+PEWgUBM+vdXh+DOapg52otYXIJfKFO8jDe\\nNaA1Q92L39oT7ehM8S1+gbCMd5TGBP4XiKh9CF4gpK/rURZaQ5ZPThLWRPNVmBt0\\nZBvDdLXDNXEwgjoDxpfJ4MjJQzT7ZaLQBHVf+g0z8xJUjX8LLW7m9kxAcFK7VmKi\\n7Fwn8PsgDvOpDqxreV4GMq3M2ZkOIWCv16OT3HthWVyAYQGjaaYOazD4wHyzr9+n\\nZlroXZXl2cfBEAW0rUm60WfeKyaRE/SckwCvOIOUSOyWioMOR4HjaTsfhRpUQj4P\\nvDUl4Ba51jvz+xlhyUQbjyayT320m7wNe5q5niA2QQKBgQD4JsgEnXDbYtZ2MFVp\\nYl2XYEXxuVvOWYarMxsiU1aYfSTvQyqES/rY5kGKs9pttfhCGGqz16A2QWYcMe2S\\n5gGC0LLQj8q63okrQy42vWJrEuDMKYE8P2PB5XO6BTBYWfj3j+gTdCVWQBtobnUX\\nqMDa0SLUslAal0gkfTP3ssSmIQKBgQDKTMtnyeB4zEy0oI48W5NrQoTP3IV9Gk3b\\nAnnJUsG0M41QHugHm9DrmZcW2l7Z17CYJyadCyNKru4gdC7ztMRzjQjzEkYnZzJ9\\ngTFIrZrzFj+B2V6WjgifkGD0ABy3ApC7wA97lTC5HvsUYzsMNwVUdMWJn9qh5REI\\nub8mE2MR6wKBgQDhQULbfZcObn/CtUky6kmOuaOEMv/1JisqiK+ezwuSTDcUwWF8\\nygOglBL2tyAV6tK6HLPvIFKcLW1lNqUzbXn9pzhKPdyHGK5nCQqQQgVusKpCaYKY\\nj+ob/g640zD5YmKvRoAh+JJT4sl+WJYNre+yMZlufZZdLOodxVFBDZOYQQKBgQC8\\nVD+sMKjzbCYgpbOkhxA3c2aW59GxxFIkiCp+fLdtnex5YTxbEPiuzH52vPY+UOjK\\nzO/KlXrWZQG0XtTy9h9I/0wMlb+PoSfE5QfPhCbTFKwsowLGoBVxDoTjwlL5IL9C\\nuirvvtTsEeZmdXacCYDBvi/DznhH7Sstd1Z3COda3wKBgQDudyoZ59hMg3juNfQI\\nC0//j3XuYHPKC5t1bRdtToeSEIiK/LBndHgNlET551ByeywrO72DNnLyBP5hHfFW\\nU0uvwYeRiUXod0ZkenGyvQu8tVr+XxeHkmJneCrWtZqN5Sg0rlghN0twUIXHiC6u\\nemWC/ju9IFZpFsF7p4k6rC0ccQ==\\n-----END PRIVATE KEY-----\\n\",\n  \"client_email\": \"firebase-adminsdk-1olrn@securityforhandsin.iam.gserviceaccount.com\",\n  \"client_id\": \"100344568576874208053\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://oauth2.googleapis.com/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-1olrn%40securityforhandsin.iam.gserviceaccount.com\",\n  \"universe_domain\": \"googleapis.com\"\n}\n"
    },
    {
      "name": "availableapikeys",
      "type": "file",
      "extension": ".js",
      "content": "const sensitivedata = [\n  \"elasticsearch_password\",\n  \"elasticsearch_username\",\n  \"email_notification\",\n  \"email\",\n  \"encrypted\",\n  \"encryption_password\",\n  \"end_user_password\",\n  \"end_user_username\",\n  \"ensurecleansession\",\n  \"env_key\",\n  \"env_sdfcacctsdo_quipacctvineetpersonal\",\n  \"env_secret_access_key\",\n  \"env_secret\",\n  \"env.github_oauth_token\",\n  \"env.heroku_api_key\",\n  \"env.sonatype_password\",\n  \"env.sonatype_username\",\n  \"eureka.awsaccessid\",\n  \"eureka.awssecretkey\",\n  \"excluderestorepackageimports\",\n  \"exp_password\",\n  \"exp_username\",\n  \"export_space_id\",\n  \"extension_id\",\n  \"f97qcq0kccualljaoyjg\",\n  \"facebook\",\n  \"fbtools_target_project\",\n  \"fdflgjks3bkadau24as5x8lmhujb94\",\n  \"feedback_email_recipient\",\n  \"feedback_email_sender\",\n  \"fi1_receiving_seed\",\n  \"fi1_signing_seed\",\n  \"fi2_receiving_seed\",\n  \"fi2_signing_seed\",\n  \"file_password\",\n  \"firebase_api_json\",\n  \"firebase_api_token\",\n  \"firebase_key\",\n  \"firebase_project_develop\",\n  \"firebase_project_id\",\n  \"firebase_project\",\n  \"firebase_service_account\",\n  \"firebase_token\",\n  \"firefox_client\",\n  \"firefox_issuer\",\n  \"firefox_secret\",\n  \"flask_secret_key\",\n  \"flickr_api_key\",\n  \"flickr_api_secret\",\n  \"flickr\",\n  \"fossa_api_key\",\n  \"ftp_host\",\n  \"ftp_login\",\n  \"ftp_password\",\n  \"ftp_pw\",\n  \"ftp_user\",\n  \"ftp_username\",\n  \"fvdvd\",\n  \"gateway\",\n  \"gcloud_bucket\",\n  \"gcloud_project\",\n  \"gcloud_service_key\",\n  \"gcr_password\",\n  \"gcr_username\",\n  \"gcs_bucket\",\n  \"ggfqfekcd54gcdasepltzthec4ol104iaq\",\n  \"gh_api_key\",\n  \"gh_email\",\n  \"gh_name\",\n  \"gh_next_oauth_client_id\",\n  \"gh_next_oauth_client_secret\",\n  \"gh_next_unstable_oauth_client_id\",\n  \"gh_next_unstable_oauth_client_secret\",\n  \"gh_oauth_client_id\",\n  \"gh_oauth_client_secret\",\n  \"gh_oauth_token\",\n  \"gh_repo_token\",\n  \"gh_token\",\n  \"gh_unstable_oauth_client_id\",\n  \"gh_unstable_oauth_client_secret\",\n  \"gh_user_email\",\n  \"gh_user_name\",\n  \"ghb_token\",\n  \"ghost_api_key\",\n  \"git_author_email\",\n  \"git_author_name\",\n  \"git_committer_email\",\n  \"git_committer_name\",\n  \"git_email\",\n  \"git_name\",\n  \"git_token\",\n  \"git_user\",\n  \"github_access_token\",\n  \"github_api_key\",\n  \"github_api_token\",\n  \"github_auth_token\",\n  \"github_auth_user\",\n  \"github_auth\",\n  \"github_client_id\",\n  \"github_client_secret\",\n  \"github_deploy_hb_doc_pass\",\n  \"github_deployment_token\",\n  \"github_hunter_token\",\n  \"github_hunter_username\",\n  \"github_key\",\n  \"github_oauth_token\",\n  \"github_oauth\",\n  \"github_password\",\n  \"github_pwd\",\n  \"github_release_token\",\n  \"github_repo\",\n  \"github_token\",\n  \"github_tokens\",\n  \"github_user\",\n  \"github_username\",\n  \"gitlab_user_email\",\n  \"gitlab_user_login\",\n  \"gk_lock_default_branch\",\n  \"gogs_password\",\n  \"google_account_type\",\n  \"google_client_email\",\n  \"google_client_id\",\n  \"google_client_secret\",\n  \"google_maps_api_key\",\n  \"google_private_key\",\n  \"googleapis.com/\",\n  \"googleusercontent.com\",\n  \"gpg_email\",\n  \"gpg_encryption\",\n  \"gpg_executable\",\n  \"gpg_key_name\",\n  \"gpg_keyname\",\n  \"gpg_name\",\n  \"gpg_ownertrust\",\n  \"gpg_passphrase\",\n  \"gpg_private_key\",\n  \"gpg_secret_keys\",\n  \"gpg.passphrase\",\n  \"gradle_signing_key_id\",\n  \"gradle_signing_password\",\n  \"gradle.publish.key\",\n  \"gradle.publish.secret\",\n  \"gren_github_token\",\n  \"grgit_user\",\n  \"grouptosharetravis\",\n  \"hab_auth_token\",\n  \"hab_key\",\n  \"handlesalerts\",\n  \"hastouchscreen\",\n  \"hb_codesign_gpg_pass\",\n  \"hb_codesign_key_pass\",\n  \"heroku_api_key\",\n  \"heroku_api_user\",\n  \"heroku_email\",\n  \"heroku_token\",\n  \"hockeyapp_token\",\n  \"homebrew_github_api_token\",\n  \"hooks.slack.com\",\n  \"host\",\n  \"hpmifls\",\n  \"hub_dxia2_password\",\n  \"ibcwows74cokyva\",\n  \"id\",\n  \"ij_repo_password\",\n  \"ij_repo_username\",\n  \"image\",\n  \"index_name\",\n  \"instagram\",\n  \"integration_test_api_key\",\n  \"integration_test_appid\",\n  \"internal-secrets\",\n  \"ios_docs_deploy_token\",\n  \"irc_notification_channel\",\n  \"isbooleangood\",\n  \"isdevelop\",\n  \"isparentallowed\",\n  \"issuer\",\n  \"itest_gh_token\",\n  \"java.net.unknownhostexception\",\n  \"javascriptenabled\",\n  \"jdbc_databaseurl\",\n  \"jdbc_host\",\n  \"jdbc_user\",\n  \"jdbc:mysql\",\n  \"jwt_async_secert_key\",\n  \"jwt_client_secret_key\",\n  \"jwt_command_center_secert_key\",\n  \"jwt_lookup_secert_key\",\n  \"jwt_secret\",\n  \"jwt_web_secert_key\",\n  \"jwt_xmpp_secert_key\",\n  \"jxogfiqqqgvhtv4flzi\",\n  \"kafka_admin_url\",\n  \"kafka_instance_name\",\n  \"kafka_rest_url\",\n  \"key\",\n  \"keyid\",\n  \"keystore_pass\",\n  \"kovan_private_key\",\n  \"socrata_username\",\n  \"some_var\",\n  \"somevar\",\n  \"sona_type_nexus_username\",\n  \"sonar_organization_key\",\n  \"sonar_project_key\",\n  \"sonar_token\",\n  \"sonatype_gpg_key_name\",\n  \"sonatype_gpg_passphrase\",\n  \"sonatype_nexus_password\",\n  \"sonatype_nexus_username\",\n  \"sonatype_pass\",\n  \"sonatype_password\",\n  \"sonatype_token_password\",\n  \"sonatype_token_user\",\n  \"sonatype_user\",\n  \"sonatype_username\",\n  \"sonatypepassword\",\n  \"sonatypeusername\",\n  \"soundcloud_client_id\",\n  \"soundcloud_client_secret\",\n  \"soundcloud_password\",\n  \"soundcloud_username\",\n  \"spa_client_id\",\n  \"space\",\n  \"spaces_access_key_id\",\n  \"spaces_secret_access_key\",\n  \"spotify_api_access_token\",\n  \"spotify_api_client_id\",\n  \"spotify_api_client_secret\",\n  \"spring.mail.password\",\n  \"sqs_access_key_id\",\n  \"sqs_notifications_internal\",\n  \"sqs_secret_access_key\",\n  \"sqsaccesskey\",\n  \"sqssecretkey\",\n  \"square_reader_sdk_repository_password\",\n  \"src_topic\",\n  \"srcclr_api_token\",\n  \"sshpass\",\n  \"ssmtp_config\",\n  \"staging_base_url_runscope\",\n  \"star_test_aws_access_key_id\",\n  \"star_test_bucket\",\n  \"star_test_location\",\n  \"star_test_secret_access_key\",\n  \"starship_account_sid\",\n  \"starship_auth_token\",\n  \"stormpath_api_key_id\",\n  \"stormpath_api_key_secret\",\n  \"strip_publishable_key\",\n  \"strip_secret_key\",\n  \"stripe_private\",\n  \"stripe_public\",\n  \"subdomain\",\n  \"surge_login\",\n  \"surge_token\",\n  \"svn_pass\",\n  \"svn_user\",\n  \"takeselementscreenshot\",\n  \"takesheapsnapshot\",\n  \"takesscreenshot\",\n  \"team_email\",\n  \"ted_517c5824cb79_iv\",\n  \"tesco_api_key\",\n  \"test_github_token\",\n  \"test_test\",\n  \"test\",\n  \"tester_keys_password\",\n  \"thera_oss_access_id\",\n  \"thera_oss_access_key\",\n  \"tn8hhbzb9ccfozvq4yi5js7osznjtfif1fjm\",\n  \"token_core_java\",\n  \"token\",\n  \"travis_access_token\",\n  \"travis_api_token\",\n  \"travis_branch\",\n  \"travis_com_token\",\n  \"travis_e2e_token\",\n  \"travis_gh_token\",\n  \"travis_pull_request\",\n  \"travis_secure_env_vars\",\n  \"travis_token\",\n  \"trex_client_orgurl\",\n  \"trex_client_token\",\n  \"trex_okta_client_orgurl\",\n  \"trex_okta_client_token\",\n  \"trigger_api_coverage_reporter\",\n  \"twilio_account_id\",\n  \"twilio_account_sid\",\n  \"twilio_api_key\",\n  \"twilio_api_secret\",\n  \"twilio_chat_account_api_service\",\n  \"twilio_configuration_sid\",\n  \"twilio_sid\",\n  \"twilio_token\",\n  \"twilo\",\n  \"twine_password\",\n  \"twine_username\",\n  \"twitter_consumer_key\",\n  \"twitter_consumer_secret\",\n  \"twitter\",\n  \"twitteroauthaccesssecret\",\n  \"twitteroauthaccesstoken\",\n  \"udkwt156wulpmqbacy\",\n  \"uielement\",\n  \"unity_password\",\n  \"unity_serial\",\n  \"unity_username\",\n  \"urban_key\",\n  \"urban_master_secret\",\n  \"urban_secret\",\n  \"url\",\n  \"us-east-1.elb.amazonaws.com\",\n  \"usabilla_id\",\n  \"use_saucelabs\",\n  \"use_ssh\",\n  \"user_assets_access_key_id\",\n  \"user_assets_secret_access_key\",\n  \"user\",\n  \"username\",\n  \"usertosharetravis\",\n  \"usertravis\",\n  \"v_sfdc_client_id\",\n  \"v_sfdc_client_secret\",\n  \"v_sfdc_password\",\n  \"v_sfdc_username\",\n  \"v3gnce1hyg\",\n  \"vault_addr\",\n  \"vault_approle_secret_id\",\n  \"vault_path\",\n  \"vip_github_build_repo_deploy_key\",\n  \"vip_github_deploy_key_pass\",\n  \"vip_github_deploy_key\",\n  \"vip_test\",\n  \"virustotal_apikey\",\n  \"visual_recognition_api_key\",\n  \"vscetoken\",\n  \"vu8gyf3bglcxgaxrmw9ofpuhckq\",\n  \"vzg6puz8\",\n  \"wakatime_api_key\",\n  \"wakatime_project\",\n  \"watson_client\",\n  \"watson_conversation_password\",\n  \"watson_conversation_username\",\n  \"watson_conversation_workspace\",\n  \"watson_device_password\",\n  \"watson_device_topic\",\n  \"watson_device\",\n  \"watson_password\",\n  \"watson_team_id\",\n  \"watson_topic\",\n  \"watson_username\",\n  \"web_2_xms_secret_key\",\n  \"web_client_id\",\n  \"webdavbaseurltravis\",\n  \"webhook_url\",\n  \"webstorageenabled\",\n  \"widget_basic_password_2\",\n  \"widget_basic_password_3\",\n  \"widget_basic_password_4\",\n  \"widget_basic_password_5\",\n  \"widget_basic_password\",\n  \"widget_basic_user_2\",\n  \"widget_basic_user_3\",\n  \"widget_basic_user_4\",\n  \"widget_basic_user_5\",\n  \"widget_basic_user\",\n  \"widget_fb_password_2\",\n  \"widget_fb_password_3\",\n  \"widget_fb_password\",\n  \"widget_fb_user_2\",\n  \"widget_fb_user_3\",\n  \"widget_fb_user\",\n  \"widget_test_server\",\n  \"wincert_password\",\n  \"wordpress_db_password\",\n  \"wordpress_db_user\",\n  \"workspace_id\",\n  \"wpjm_phpunit_google_geocode_api_key\",\n  \"wporg_password\",\n  \"wpt_db_host\",\n  \"wpt_db_name\",\n  \"wpt_db_password\",\n  \"wpt_db_user\",\n  \"wpt_prepare_dir\",\n  \"wpt_report_api_key\",\n  \"wpt_ssh_connect\",\n  \"wpt_ssh_private_key_base64\",\n  \"wpt_test_dir\",\n  \"wslezejbve7afypzr1h6czs072x4sqlpxedcchrhd48wgbbx0ifztiaycug0\",\n  \"wvetelch2gqdnvpiho1h5xnbj8k\",\n  \"wvnmz40v1lt0dyc2c6lzwwijzfsqixirzjcubcwqkromelkbmkhdeik\",\n  \"www.googleapis.com\",\n  \"xj7lelt4jt9hnuw\",\n  \"xmpp_2_xms_secret_key\",\n  \"xmpp_token_secret_key\",\n  \"xsax\",\n  \"xsixfhrha3gzeawa1hkow6kvzr4z9dx0xmpvoruo1h4ag0lcxar70zuegystqpaxofmtwb1z0wwwooad0kgdwmdsoch60pv4mew\",\n  \"yangshun_gh_password\",\n  \"yangshun_gh_token\",\n  \"yt_account_channel_id\",\n  \"yt_account_client_id\",\n  \"yt_account_client_secret\",\n  \"yt_account_refresh_token\",\n  \"yt_api_key\",\n  \"yt_client_id\",\n  \"yt_client_secret\",\n  \"yt_partner_channel_id\",\n  \"yt_partner_client_id\",\n  \"yt_partner_client_secret\",\n  \"yt_partner_id\",\n  \"yt_partner_refresh_token\",\n  \"yt_server_api_key\",\n  \"yvxuzia4cm9984axbyjgsk\",\n  \"zendesk-travis-github\",\n  \"zensonatypepassword\",\n  \"zensonatypeusername\",\n  \"zhuliang_gh_token\",\n  \"zopim_account_key\",\n  \"kubecfg_s3_path\",\n  \"kubeconfig\",\n  \"kxoltsn3vogdop92m\",\n  \"leanplum_app_id\",\n  \"leanplum_key\",\n  \"lektor_deploy_password\",\n  \"lektor_deploy_username\",\n  \"licenses_hash_two\",\n  \"licenses_hash\",\n  \"lighthouse_api_key\",\n  \"linkedin_client_id\",\n  \"linkedin_client_secret\",\n  \"linode_instance_id\",\n  \"linode_volume_id\",\n  \"linux_signing_key\",\n  \"ll_api_shortname\",\n  \"ll_publish_url\",\n  \"ll_shared_key\",\n  \"ll_username\",\n  \"location_id\",\n  \"locationcontextenabled\",\n  \"logname\",\n  \"logout_redirect_uri\",\n  \"looker_test_runner_client_id\",\n  \"looker_test_runner_client_secret\",\n  \"looker_test_runner_endpoint\",\n  \"lottie_happo_api_key\",\n  \"lottie_happo_secret_key\",\n  \"lottie_s3_api_key\",\n  \"lottie_s3_secret_key\",\n  \"lottie_upload_cert_key_password\",\n  \"lottie_upload_cert_key_store_password\",\n  \"lr7mo294\",\n  \"madrill\",\n  \"magento_auth_password\",\n  \"magento_auth_username\",\n  \"magento_password\",\n  \"magento_username\",\n  \"mail_password\",\n  \"mail_username\",\n  \"mailchimp_api_key\",\n  \"mailchimp_key\",\n  \"mailchimp_list_id\",\n  \"mailchimp_user\",\n  \"mailer_host\",\n  \"mailer_password\",\n  \"mailer_transport\",\n  \"mailer_user\",\n  \"mailgun_api_key\",\n  \"mailgun_apikey\",\n  \"mailgun_domain\",\n  \"mailgun_password\",\n  \"mailgun_priv_key\",\n  \"mailgun_pub_apikey\",\n  \"mailgun_pub_key\",\n  \"mailgun_secret_api_key\",\n  \"mailgun_testdomain\",\n  \"manage_key\",\n  \"manage_secret\",\n  \"management_token\",\n  \"managementapiaccesstoken\",\n  \"mandrill_api_key\",\n  \"manifest_app_token\",\n  \"manifest_app_url\",\n  \"mapbox_access_token\",\n  \"mapbox_api_token\",\n  \"mapbox_aws_access_key_id\",\n  \"mapbox_aws_secret_access_key\",\n  \"mapboxaccesstoken\",\n  \"marionette\",\n  \"maven_staging_profile_id\",\n  \"mg_api_key\",\n  \"mg_domain\",\n  \"mg_email_addr\",\n  \"mg_email_to\",\n  \"mg_public_api_key\",\n  \"mg_spend_money\",\n  \"mg_url\",\n  \"mh_apikey\",\n  \"mh_password\",\n  \"mile_zero_key\",\n  \"minio_access_key\",\n  \"minio_secret_key\",\n  \"mmmmsl1qnxqsumnhblmca4g\",\n  \"mobileemulationenabled\",\n  \"mongo_server_addr\",\n  \"mongolab_uri\",\n  \"multi_alice_sid\",\n  \"multi_bob_sid\",\n  \"multi_connect_sid\",\n  \"multi_disconnect_sid\",\n  \"multi_workflow_sid\",\n  \"multi_workspace_sid\",\n  \"my_secret_env\",\n  \"mysql_database\",\n  \"mysql_hostname\",\n  \"mysql_password\",\n  \"mysql_root_password\",\n  \"mysql_user\",\n  \"mysql_username\",\n  \"mysqlmasteruser\",\n  \"mysqlsecret\",\n  \"nativeevents\",\n  \"netlify_api_key\",\n  \"netlify_site_id\",\n  \"networkconnectionenabled\",\n  \"new_relic_beta_token\",\n  \"nexus_password\",\n  \"nexus_username\",\n  \"nexuspassword\",\n  \"nexusurl\",\n  \"nexususername\",\n  \"nfzbmllartclbvi\",\n  \"ngrok_auth_token\",\n  \"ngrok_token\",\n  \"node_env\",\n  \"node_pre_gyp_accesskeyid\",\n  \"node_pre_gyp_github_token\",\n  \"node_pre_gyp_secretaccesskey\",\n  \"non_multi_alice_sid\",\n  \"non_multi_bob_sid\",\n  \"non_multi_connect_sid\",\n  \"non_multi_disconnect_sid\",\n  \"non_multi_workflow_sid\",\n  \"non_multi_workspace_sid\",\n  \"non_token\",\n  \"now_token\",\n  \"npm_api_key\",\n  \"npm_api_token\",\n  \"npm_auth_token\",\n  \"npm_config_audit\",\n  \"npm_config_strict_ssl\",\n  \"npm_email\",\n  \"npm_password\",\n  \"npm_secret_key\",\n  \"npm_token\",\n  \"npm_username\",\n  \"nqc8mdwyiwa1uukw1cqms\",\n  \"ntkuxxwh10bdmf7fmvlq4zdhqvyz0\",\n  \"nuget_api_key\",\n  \"nuget_apikey\",\n  \"nuget_key\",\n  \"numbers_service_pass\",\n  \"numbers_service_user\",\n  \"numbers_service\",\n  \"nunit\",\n  \"oauth_token\",\n  \"object_storage\",\n  \"object_storage_incoming_container_name\",\n  \"object_storage_password\",\n  \"object_storage_project_id\",\n  \"object_storage_user_id\",\n  \"object_store_bucket\",\n  \"object_store_creds\",\n  \"oc_pass\",\n  \"octest_app_password\",\n  \"octest_app_username\",\n  \"octest_password\",\n  \"octest_server_base_url_2\",\n  \"octest_server_base_url\",\n  \"octest_username\",\n  \"ofta\",\n  \"ofta_key\",\n  \"ofta_secret\",\n  \"ofyek7ehnjgzc268d7jep5p5eajzch5ai14\",\n  \"okta_authn_its_mfaenrollgroupid\",\n  \"okta_client_org_url\",\n  \"okta_client_orgurl\",\n  \"okta_client_token\",\n  \"okta_domain\",\n  \"okta_oauth2_client_id\",\n  \"okta_oauth2_client_secret\",\n  \"okta_oauth2_clientid\",\n  \"okta_oauth2_clientsecret\",\n  \"okta_oauth2_issuer\",\n  \"omise_key\",\n  \"omise_pkey\",\n  \"omise_pubkey\",\n  \"omise_skey\",\n  \"onesignal_api_key\",\n  \"onesignal_user_auth_key\",\n  \"open_whisk_key\",\n  \"openwhisk_key\",\n  \"org_gradle_project_cloudinary.url\",\n  \"org_gradle_project_cloudinaryurl\",\n  \"org_gradle_project_sonatype_nexus_password\",\n  \"org_gradle_project_sonatype_nexus_username\",\n  \"org_id\",\n  \"org_project_gradle_sonatype_nexus_password\",\n  \"org_project_gradle_sonatype_nexus_username\",\n  \"org.gradle.daemon\",\n  \"org\",\n  \"os\",\n  \"os_auth_url\",\n  \"os_password\",\n  \"os_project_name\",\n  \"os_tenant_id\",\n  \"os_tenant_name\",\n  \"os_username\",\n  \"ossrh_jira_password\",\n  \"-----begin dsa private key-----\",\n  \"-----begin ec private key-----\",\n  \"-----begin openssh private key-----\",\n  \"-----begin pgp private key block-----\",\n  \"-----begin rsa private key-----\",\n  \"branch\",\n  \"closure_entry_point\",\n  \"host\",\n  \"ignore-ssl-errors\",\n  \"org\",\n  \"password\",\n  \"port\",\n  \"token\",\n  \"username\",\n  \"ddburl\",\n  \"dgpg.passphrase\",\n  \"dmaven.javadoc.skip\",\n  \"dselion_browser_run_headless\",\n  \"dselion_download_dependencies\",\n  \"dselion_selenium_run_locally\",\n  \"dselion_selenium_use_geckodriver\",\n  \"dskiptests\",\n  \"dsonar.login\",\n  \"dsonar.organization\",\n  \"dsonar.projectkey\",\n  \"access_token\",\n  \"accesskeyid\",\n  \"account\",\n  \"id\",\n  \"key\",\n  \"noexp\",\n  \"password\",\n  \"project\",\n  \"query\",\n  \"0dysauq5kqk\",\n  \"0github_token\",\n  \"0hb_codesign_gpg_pass\",\n  \"0hb_codesign_key_pass\",\n  \"0kname\",\n  \"0pushover_token\",\n  \"0pushover_user\",\n  \"0virustotal_apikey\",\n  \"acceptinsecurecerts\",\n  \"acceptsslcerts\",\n  \"access key id\",\n  \"access_key_id\",\n  \"access_key_secret\",\n  \"access_key\",\n  \"access_secret\",\n  \"access_token\",\n  \"accessibilitychecks\",\n  \"accesskey\",\n  \"accesskeyid\",\n  \"account_sid\",\n  \"admin_email\",\n  \"adzerk_api_key\",\n  \"alarm_cron\",\n  \"algolia_admin_key_1\",\n  \"algolia_admin_key_2\",\n  \"algolia_admin_key_mcm\",\n  \"algolia_api_key_mcm\",\n  \"algolia_api_key_search\",\n  \"algolia_api_key\",\n  \"algolia_app_id_mcm\",\n  \"algolia_app_id\",\n  \"algolia_application_id_1\",\n  \"algolia_application_id_2\",\n  \"algolia_application_id_mcm\",\n  \"algolia_application_id\",\n  \"algolia_search_api_key\",\n  \"algolia_search_key_1\",\n  \"algolia_search_key\",\n  \"alias_name\",\n  \"alias_pass\",\n  \"alicloud_access_key\",\n  \"alicloud_secret_key\",\n  \"amazon_bucket_name\",\n  \"amazon_secret_access_key\",\n  \"amqp://guest:guest@\",\n  \"anaconda_token\",\n  \"analytics\",\n  \"android_docs_deploy_token\",\n  \"android_sdk_license\",\n  \"android_sdk_preview_license\",\n  \"ansible_vault_password\",\n  \"aos_key\",\n  \"aos_sec\",\n  \"api_key_mcm\",\n  \"api_key_secret\",\n  \"api_key_sid\",\n  \"api_key\",\n  \"api_secret\",\n  \"apiary_api_key\",\n  \"apidoc_key\",\n  \"apigw_access_token\",\n  \"apikey\",\n  \"apisecret\",\n  \"app_bucket_perm\",\n  \"app_id\",\n  \"app_name\",\n  \"app_report_token_key\",\n  \"app_secrete\",\n  \"app_settings\",\n  \"app_token\",\n  \"appclientsecret\",\n  \"apple_id_password\",\n  \"apple_id_username\",\n  \"application_id_mcm\",\n  \"application_id\",\n  \"applicationcacheenabled\",\n  \"argos_token\",\n  \"artifactory_key\",\n  \"artifactory_username\",\n  \"artifacts\",\n  \"artifacts_aws_access_key_id\",\n  \"artifacts_aws_secret_access_key\",\n  \"artifacts_bucket\",\n  \"artifacts_key\",\n  \"artifacts_secret\",\n  \"assistant_iam_apikey\",\n  \"async_mq_app_secret\",\n  \"atoken\",\n  \"aurora_string_url\",\n  \"auth_token\",\n  \"auth\",\n  \"auth0_api_clientid\",\n  \"auth0_api_clientsecret\",\n  \"auth0_audience\",\n  \"auth0_callback_url\",\n  \"auth0_client_id\",\n  \"auth0_client_secret\",\n  \"auth0_connection\",\n  \"auth0_domain\",\n  \"author_email_addr\",\n  \"author_npm_api_key\",\n  \"avbcnrfdmp7k\",\n  \"aws\",\n  \"aws_access_key_id\",\n  \"aws_access_key\",\n  \"aws_access\",\n  \"aws_cf_dist_id\",\n  \"aws_default\",\n  \"aws_default_region\",\n  \"aws_s3_bucket\",\n  \"aws_secret_access_key\",\n  \"aws_secret_key\",\n  \"aws_secret\",\n  \"aws_ses_access_key_id\",\n  \"aws_ses_secret_access_key\",\n  \"aws-acct-id\",\n  \"aws-key\",\n  \"aws-secrets\",\n  \"aws.config.accesskeyid\",\n  \"aws.config.secretaccesskey\",\n  \"awsaccesskeyid\",\n  \"awscn_access_key_id\",\n  \"awscn_secret_access_key\",\n  \"awssecretkey\",\n  \"ax5xtosqfzwacdltlnkkj3k64\",\n  \"b2_acct_id\",\n  \"b2_app_key\",\n  \"b2_bucket\",\n  \"baseurltravis\",\n  \"bintray_api_key\",\n  \"bintray_apikey\",\n  \"bintray_gpg_password\",\n  \"bintray_key\",\n  \"bintray_token\",\n  \"bintray_user\",\n  \"bintraykey\",\n  \"bintrayuser\",\n  \"blhlrkwstlnpm8\",\n  \"bluemix\",\n  \"bluemix_account\",\n  \"bluemix_api_key\",\n  \"bluemix_auth\",\n  \"bluemix_namespace\",\n  \"bluemix_org\",\n  \"bluemix_organization\",\n  \"bluemix_pass_prod\",\n  \"bluemix_pass\",\n  \"bluemix_password\",\n  \"bluemix_pwd\",\n  \"bluemix_space\",\n  \"bluemix_user\",\n  \"bluemix_username\",\n  \"brackets_repo_oauth_token\",\n  \"branch\",\n  \"browser_stack_access_key\",\n  \"browser_stack_username\",\n  \"browserconnectionenabled\",\n  \"browserstack_access_key\",\n  \"browserstack_build\",\n  \"browserstack_parallel_runs\",\n  \"browserstack_project_name\",\n  \"browserstack_use_automate\",\n  \"browserstack_username\",\n  \"bucketeer_aws_access_key_id\",\n  \"bucketeer_aws_secret_access_key\",\n  \"bucketeer_bucket_name\",\n  \"built_branch_deploy_key\",\n  \"bundle_gem__zdsys__com\",\n  \"bundle_gems__contribsys__com\",\n  \"bundle_zdrepo__jfrog__io\",\n  \"bundlesize_github_token\",\n  \"bx_password\",\n  \"bx_username\",\n  \"bxiam\",\n  \"bzwusjfvim\",\n  \"c6cbvfdks\",\n  \"cacdc\",\n  \"cache_s3_secret_key\",\n  \"cache_url\",\n  \"cargo_token\",\n  \"casc\",\n  \"casperjs_timeout\",\n  \"cattle_access_key\",\n  \"cattle_agent_instance_auth\",\n  \"cattle_secret_key\",\n  \"cc_test_reporter_id\",\n  \"cc_test_repoter_id\",\n  \"cdascsa\",\n  \"cdscasc\",\n  \"censys_secret\",\n  \"censys_uid\",\n  \"certificate_osx_p12\",\n  \"certificate_password\",\n  \"cf_organization\",\n  \"cf_password\",\n  \"cf_proxy_host\",\n  \"cf_space\",\n  \"cf_username\",\n  \"channelid\",\n  \"cheverny_token\",\n  \"chrome_client_id\",\n  \"chrome_client_secret\",\n  \"chrome_extension_id\",\n  \"chrome_refresh_token\",\n  \"ci_deploy_password\",\n  \"ci_deploy_user\",\n  \"ci_deploy_username\",\n  \"ci_name\",\n  \"ci_project_namespace\",\n  \"ci_project_url\",\n  \"ci_registry_user\",\n  \"ci_server_name\",\n  \"ci_user_token\",\n  \"claimr_database\",\n  \"claimr_db\",\n  \"claimr_superuser\",\n  \"claimr_token\",\n  \"cli_e2e_cma_token\",\n  \"cli_e2e_org_id\",\n  \"client_id\",\n  \"client_secret\",\n  \"client_zpk_secret_key\",\n  \"clojars_password\",\n  \"clojars_username\",\n  \"cloud_api_key\",\n  \"cloud_watch_aws_access_key\",\n  \"cloud_watch_aws_secret_acess_key\",\n  \"cloudamqp_url\",\n  \"cloudant_appliance_database\",\n  \"cloudant_archived_database\",\n  \"cloudant_audited_database\",\n  \"cloudant_database\",\n  \"cloudant_instance\",\n  \"cloudant_order_database\",\n  \"cloudant_parsed_database\",\n  \"cloudant_password\",\n  \"cloudant_processed_database\",\n  \"cloudant_service_database\",\n  \"cloudant_username\",\n  \"cloudflare_api_key\",\n  \"cloudflare_auth_email\",\n  \"cloudflare_auth_key\",\n  \"cloudflare_creviera_zone_id\",\n  \"cloudflare_email\",\n  \"cloudflare_zone_id\",\n  \"cloudfront_distribution_id\",\n  \"cloudinary_url_eu\",\n  \"cloudinary_url_staging\",\n  \"cloudinary_url\",\n  \"clu_repo_url\",\n  \"clu_ssh_private_key_base64\",\n  \"cluster_name\",\n  \"cluster\",\n  \"cmd_key\",\n  \"cn_access_key_id\",\n  \"cn_secret_access_key\",\n  \"cocoapods_trunk_email\",\n  \"cocoapods_trunk_token\",\n  \"codacy_project_token\",\n  \"codeclimate_repo_token\",\n  \"codecov_token\",\n  \"coding_token\",\n  \"component\",\n  \"conekta_apikey\",\n  \"configuration_profile_sid_p2p\",\n  \"configuration_profile_sid_sfu\",\n  \"configuration_profile_sid\",\n  \"consumer_key\",\n  \"consumerkey\",\n  \"contentful_access_token\",\n  \"contentful_cma_test_token\",\n  \"contentful_integration_management_token\",\n  \"contentful_integration_source_space\",\n  \"contentful_management_api_access_token_new\",\n  \"contentful_management_api_access_token\",\n  \"contentful_organization\",\n  \"contentful_php_management_test_token\",\n  \"contentful_test_org_cma_token\",\n  \"contentful_v2_access_token\",\n  \"contentful_v2_organization\",\n  \"conversation_password\",\n  \"conversation_url\",\n  \"conversation_username\",\n  \"coreapi_host\",\n  \"cos_secrets\",\n  \"coveralls_api_token\",\n  \"coveralls_repo_token\",\n  \"coveralls_service_name\",\n  \"coveralls_token\",\n  \"coverity_scan_notification_email\",\n  \"coverity_scan_token\",\n  \"cred\",\n  \"csac\",\n  \"cssselectorsenabled\",\n  \"ctjhuw0saao68es5s\",\n  \"cxqevvneow\",\n  \"cypress_record_key\",\n  \"danger_github_api_token\",\n  \"danger_verbose\",\n  \"database_host\",\n  \"database_name\",\n  \"database_password\",\n  \"database_port\",\n  \"database_user\",\n  \"database_username\",\n  \"databaseenabled\",\n  \"datadog_api_key\",\n  \"datadog_app_key\",\n  \"db_connection\",\n  \"db_database\",\n  \"db_host\",\n  \"db_password\",\n  \"db_port\",\n  \"db_pw\",\n  \"db_user\",\n  \"db_username\",\n  \"dbp\",\n  \"ddg_test_email_pw\",\n  \"ddg_test_email\",\n  \"ddgc_github_token\",\n  \"deploy_dir\",\n  \"deploy_directory\",\n  \"deploy_host\",\n  \"deploy_password\",\n  \"deploy_port\",\n  \"deploy_secure\",\n  \"deploy_token\",\n  \"deploy_user\",\n  \"dest_topic\",\n  \"dh_end_point_1\",\n  \"dh_end_point_2\",\n  \"dhl_soldtoaccountid\",\n  \"digitalocean_access_token\",\n  \"digitalocean_ssh_key_body\",\n  \"digitalocean_ssh_key_ids\",\n  \"docker_email\",\n  \"docker_hub_password\",\n  \"docker_hub_username\",\n  \"docker_key\",\n  \"docker_pass\",\n  \"docker_passwd\",\n  \"docker_password\",\n  \"docker_postgres_url\",\n  \"docker_rabbitmq_host\",\n  \"docker_repo\",\n  \"docker_token\",\n  \"docker_user\",\n  \"docker_username\",\n  \"docker-registry\",\n  \"docker\",\n  \"dockerhub_password\",\n  \"dockerhubpassword\",\n  \"dockerhubusername\",\n  \"doordash_auth_token\",\n  \"driver_name\",\n  \"dropbox_oauth_bearer\",\n  \"dropbox\",\n  \"droplet_travis_password\",\n  \"duration\",\n  \"dv3u5tluz0\",\n  \"dxa\",\n  \"dynamoaccesskeyid\",\n  \"dynamosecretaccesskey\",\n  \"elastic_cloud_auth\",\n  \"elastic_cloud_id\",\n  \"elasticsearch_host\",\n];\nconst passwordkeys=[\n   'pass' ,\n   'userpass' ,\n   'pwd' ,\n   'password1' ,\n   'password' ,\n   'login_password' ,\n   'confirmpassword' ,\n   'passwd' ,\n   'newpassword' ,\n   'hash' ,\n   'loginpass' ,\n   'oldpassword' ,\n   'user_password' ,\n   'authentication_password' ,\n   'authpass' ,\n   'loginpass' ,\n   'password' ,\n   'user_password' ,\n   'login_password' ,\n   'passwd' ,\n   'pwd' ,\n   'userpass' ,\n   'authpass' ,\n   'newpassword' ,\n   'hash' ,\n   'confirmpassword' ,\n   'oldpassword' ,\n   'pass' ,\n   'authentication_password' ,\n   'password1' \n]\nmodule.exports={sensitivedata,passwordkeys}"
    },
    {
      "name": "server",
      "type": "file",
      "extension": ".cert",
      "content": "-----BEGIN CERTIFICATE-----\nMIIGkjCCBHqgAwIBAgIQWD2RmFRgPzTgKDHNcEKp7zANBgkqhkiG9w0BAQwFADBL\nMQswCQYDVQQGEwJBVDEQMA4GA1UEChMHWmVyb1NTTDEqMCgGA1UEAxMhWmVyb1NT\nTCBSU0EgRG9tYWluIFNlY3VyZSBTaXRlIENBMB4XDTIzMDEyMzAwMDAwMFoXDTIz\nMDQyMzIzNTk1OVowLTErMCkGA1UEAxMic2VyY3VyaXR5dG9vbC5oYW5kc2ludGVj\naG5vbG9neS5pbjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAIjjDVBh\n4iN4KRtcVZyQS/rsIdKfyBK16ZSp0Vkc2zDnPlBTescWXR0Y7y9bs/lEiyB6HEGw\nVjJENG+OlFfrZDNtnI9r8pOoc5EPxHqfxIwnOFpi4bs+hc/Rw93s/5VPOgH6T0Oy\nOTfkXnAT4Da94zwwdGUvaN6ruXWPLPSvv3vSXJWKQIpY3tbYUhMt1nzZGGeNw0XN\n30/H+DPAGbltMScc+OitLfxqTckTeMzwvesMV6nBKhlZGrXe/m2NF9tncBzx5KV2\nydDfP1if7HV5wucXv+M36/AvYgdYNUZvFDtd3zF6PoosaENxWLsfA0IV5IZMbt5p\nfs+BXIgP5A/ddpMCAwEAAaOCAo4wggKKMB8GA1UdIwQYMBaAFMjZeGii2Rlo1T1y\n3l8KPty1hoamMB0GA1UdDgQWBBR/s/lHOjH+EOURLwpQnZRQkBUFgTAOBgNVHQ8B\nAf8EBAMCBaAwDAYDVR0TAQH/BAIwADAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYB\nBQUHAwIwSQYDVR0gBEIwQDA0BgsrBgEEAbIxAQICTjAlMCMGCCsGAQUFBwIBFhdo\ndHRwczovL3NlY3RpZ28uY29tL0NQUzAIBgZngQwBAgEwgYgGCCsGAQUFBwEBBHww\nejBLBggrBgEFBQcwAoY/aHR0cDovL3plcm9zc2wuY3J0LnNlY3RpZ28uY29tL1pl\ncm9TU0xSU0FEb21haW5TZWN1cmVTaXRlQ0EuY3J0MCsGCCsGAQUFBzABhh9odHRw\nOi8vemVyb3NzbC5vY3NwLnNlY3RpZ28uY29tMIIBBAYKKwYBBAHWeQIEAgSB9QSB\n8gDwAHYArfe++nz/EMiLnT2cHj4YarRnKV3PsQwkyoWGNOvcgooAAAGF3R4UUAAA\nBAMARzBFAiBU8TkFp+HqrEUXXl1bH8KQ941xkHbiNKXLJrqsoBV/IwIhAJkUoV1W\n9jQ+v1GUMCZC/kwp/XaaFCf3xN4BxfgXQwcwAHYAejKMVNi3LbYg6jjgUh7phBZw\nMhOFTTvSK8E6V6NS61IAAAGF3R4UEAAABAMARzBFAiEA8kvSLqbfmsRVlzYuQKmy\nzklPC1nVa+Zh+DtDV1P87/wCIH3I1i8aE71vmA4YFs+mMhSln6divGO9Fm/bsy40\nO5WLMC0GA1UdEQQmMCSCInNlcmN1cml0eXRvb2wuaGFuZHNpbnRlY2hub2xvZ3ku\naW4wDQYJKoZIhvcNAQEMBQADggIBAIDafwDM2pT6yjBApcdJdLJGePdGwK8UuiEF\nfcQlco7YRGuRShEdEjalV0KLr0yKOO/rVLtFkwz5fWJrYMRpPUymGtUZb+XUVxRo\nc9B16pdA0gtrR5zDOlFBrvRC857PRCG30Zv+6URMcPLORP6ndid/x/iHWhTyjtLy\nuLVn+2lNoMBcWA0kQ4INUPa9NwonjxQo+PtSMGh3T6LEGfs3C6UjVt4CwSsjo1yo\nGqByq/x73EY7VmaV56apCldqddshlF4QkJpBefnyrcoNH6i7U6tGntB5B8UZrofm\nZq1NO5mYoMlCP9BwitANJM5SgfD407sJwkjLw6vlm6LGSo24AM6UjSSDMQHrJf0S\nfbLzrbhKpWso8d9E7L14AXWHY8rGFQH3aVE/a8FJLfTNZt791pd01yjHD+JxHrLP\nopq1kl3ICHGMc1+/gB3mZo5S6xrG8v3Igedrko151Mh7I4ZyZh48tjjfwOWzIgOU\nEN+oKDr8xVpRkkjmKbAIQRZFQdLOq9alvjzV+avQSbBUycohk0Xyvr9tRezcqvZT\nCf+W0nv1ezGJ2RFrfNkRml47/GyK0sespkbfnP7WgbtCLrCd32xP/apYpZIKe5vg\nwcvNaWyMJjUnDjSnoAEmnBU1t/IQCFrdKfEqj6t2iW30+MghZManbjm7lx1D1+B8\nl2z3f4bK\n-----END CERTIFICATE-----\n"
    },
    {
      "name": "server",
      "type": "file",
      "extension": ".key",
      "content": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAiOMNUGHiI3gpG1xVnJBL+uwh0p/IErXplKnRWRzbMOc+UFN6\nxxZdHRjvL1uz+USLIHocQbBWMkQ0b46UV+tkM22cj2vyk6hzkQ/Eep/EjCc4WmLh\nuz6Fz9HD3ez/lU86AfpPQ7I5N+RecBPgNr3jPDB0ZS9o3qu5dY8s9K+/e9JclYpA\nilje1thSEy3WfNkYZ43DRc3fT8f4M8AZuW0xJxz46K0t/GpNyRN4zPC96wxXqcEq\nGVkatd7+bY0X22dwHPHkpXbJ0N8/WJ/sdXnC5xe/4zfr8C9iB1g1Rm8UO13fMXo+\niixoQ3FYux8DQhXkhkxu3ml+z4FciA/kD912kwIDAQABAoIBAFaY7S9Q/TLbLYY1\nn6NwVeDjyXHpyzSrCJ4X4GyzqKcDY5SFe0K/jyB9SbN4HB8xkaJ2HbIg0Cb0pwd7\n97S3Iai3SzggXlGzW4kFpJK+yCSyGyBzNcKzBww18+dNq1LV0Ci4JbT55uDJBEV7\nDXkUH9FQBhKNL5bOpIEOlq4lEMpPlZb9uaPcjTbhEyssAPuepPDPHTQyiZ6X6EyM\nuAcNCtqcB1nTyHNDmytY+ysfNRMxaHhdm3uHdhtnGUw/e4m+O51dwrIrkbs9npSZ\na83pUQ3mMNKTAvFXX3LlHFWdGWJZM/V0yfbfGMEm90q3yBhNuY7qIjSWFkcOfPCE\nTPly7gECgYEA4MUkNd+ibjIzq5t7ace4RiW06Rj+aWZrFpjyP7mIyPx/RV+u+Exl\nso9zVsMTF3pMZaRP89x1grO13ALHvLjf3m/F9Z7n3wqiBdMTLa8mT1O3qv7rJs4D\nNxZ0TB+n171MCWCXJBOJgp7nzG6VAY8AJFI87fS3XThLm0Ylm0G2QlMCgYEAm+f9\najcvKN9vqMmm1w/GJk9CDjHAbsRH60igOtgFsFAdgQPl6sIY0cQPSQ/BDE6TkHOC\nuVrtzxGEBUbhEayIrA6S82XOcTc20QiGpGacw1T91r7h9t/ExmEd6FgkSCD9XuBR\nrqHA28+poO/ApaXPhX22oaVzuaCqLwYWdffR8sECgYAgDNxh9jaSIgRuJuiNJ9Zl\n4kCOsGqumtUQTtTUM1+G0UJQoRkw/KvPr1bR+1UAlwbHw4tHCZuT/I4lBhx3E6GQ\ndT20DWmgy0JZNETa0cvTqetZranYSa35r/D7XdQwFiT+fVBv631DK+d/phEHPN3X\nUAayI5/14e4eAP2hytfzUwKBgCHF9rKss62iAXlJ/bd29lDUOJYElxAnuwCwIe29\nYDYalNme846Qb3n5g+oq3IIC/5p6O2ZV2VBTFgtimF0QyCalnZXWhwslj91mgGxa\nwjjaT4bWoPKu9NyYqzbq6Skq5FhKNcejyLiVWsS/SzdXHQZo/kg0JEahFFzNb84s\nWjHBAoGBANBD3qOkpXbkgFlc5tIuGJ5hgVuEi+z5ftapbjmHVUr0J2o4GTk2kelE\nw8YZsuWVisiVjWkeqk4ueoAWLN2fjkEh+diihC5IT2uOqAHNLWotr/pIeJXgdqHt\nAOS0CPdfOvoIQU5JjGcXrTcexb5tMtdwbAaV8EGTh/za87V/t3DB\n-----END RSA PRIVATE KEY-----\n"
    },
    {
      "name": "tesdl",
      "type": "file",
      "extension": ".js",
      "content": "const axios = require('axios');\r\nconst API_KEY = 'd55435107bbfb1235bdeb3457aa0cc7ca48ce7cba06aeb2fd8b3e8cc82096187'; \r\nconst https=require('https')\r\n// Function to make a request to the VirusTotal API and scan the domain for viruses\r\nfunction scanDomain(domain) {\r\ntry {\r\n    const timestamp = Math.floor(Date.now() / 1000);\r\n    const url = `https://www.virustotal.com/vtapi/v2/domain/report?apikey=${API_KEY}&domain=${domain}&date=${timestamp}`;\r\n    const options = {\r\n      method: 'GET'\r\n    };\r\n    // Make the request\r\n    const request = https.request(url, options, (response) => {\r\n      const chunks = [];\r\n  \r\n      // Collect the response data in chunks\r\n      response.on('data', (chunk) => {\r\n        chunks.push(chunk);\r\n      });\r\n  \r\n      // When the response is complete, concatenate the chunks into a single buffer\r\n      response.on('end', () => {\r\n        const buffer = Buffer.concat(chunks);\r\n  \r\n        // Parse the JSON response\r\n        const result = JSON.parse(buffer.toString());\r\n  \r\n        if (result.response_code !== 1) {\r\n          console.log(`The domain ${domain} could not be scanned.`);\r\n          return;\r\n        }\r\n  \r\n        if (result.detected_urls.length > 0) {\r\n          console.log(`The domain ${domain} contains a virus!`);\r\n          console.log(`The following URLs were detected as malicious:`);\r\n          for (const url of result.detected_urls) {\r\n            console.log(url.url);\r\n          }\r\n        } else {\r\n          console.log(`The domain ${domain} is clean.`);\r\n        }\r\n      });\r\n    });\r\n  \r\n    // Handle errors\r\n    request.on('error', (error) => {\r\n      console.error(error);\r\n    });\r\n  \r\n    request.end();\r\n} catch (error) {\r\n    console.log(error)\r\n}\r\n}\r\nasync function checkDirectoryListing(url) {\r\n  try {\r\n    const response = await axios.get(`http://${url}/routes/index.js`);\r\n    console.log(response.status)\r\n    if (response.status === 200 && response.data.includes('Index of')) {\r\n      console.log('Directory listing is enabled.');\r\n    } else {\r\n        scanDomain(url)\r\n      console.log('Directory listing is disabled.');\r\n    }\r\n  } catch (error) {\r\n    if(error?.response?.status>=400){\r\n      scanDomain(url)\r\n        console.log('Directory listing is disabled.');\r\n    }\r\n  }\r\n}\r\n\r\n// Usage example\r\ncheckDirectoryListing('lmpadmin.handsintechnology.in');\r\n"
    },
    {
      "name": "mocha",
      "type": "file",
      "extension": ".opts",
      "content": "--colors\n--recursive\n--reporter spec"
    },
    {
      "name": "test",
      "type": "file",
      "extension": ".js",
      "content": "const sinon = require(\"sinon\");\nconst session = require(\"express-session\");\nvar cookieParser = require(\"cookie-parser\");\nconst {\n  MongoError,\n  checkHTML,\n  SqlDetector,\n  SessionMiddleware,\n  preventHPP,\n  NosqlDetector,\n  commandlineinjection,\n  ldapInjectionDetector,\n  preventAccessToFiles,\n  // Access_Control_Allow_Origin,\n  // preventTraversal,\n  // CheckResponseCode,\n  SpamDetector,\n  VpnProtect,\n  botDetector,\n  BlockUser,\n} = require(\"../middlewares/Security\");\nconst request = require(\"supertest\");\nconst express = require(\"express\");\nconst DBConnection = require(\"../config/connection\");\nconst { expect } = require(\"chai\");\nconst { CreateuserDetailsindatabaseonly } = require(\"../middlewares/functions\");\nconst validUrl = \"/api/test\";\nconst invalidUrl = \"/api/test?id=1 OR 1=1\";\nconst validBody = { username: \"testuser\", password: \"password\" };\nconst invalidBody = { username: \"testuser\", password: \"password' OR 1=1\" };\nconst htmlinvalidUrl = \"/api/test?id=<html><h</html>\";\nconst htmlvalidBody = { username: \"testuser\", password: \"password\" };\nconst htmlinvalidBody = {\n  username: \"<html><h</html>\",\n  password: \"<html><h</html>\",\n};\nconst xssvalidUrl = \"/api/test/\";\nconst xssinvalidUrl = '/api/test?id=<script>alert(\"hello\")</script>';\nconst xssvalidBody = { username: \"testuser\", password: \"password\" };\nconst xssinvalidBody = {\n  username: '<script>alert(\"hello\")</script>',\n  password: \"<html><h</html>\",\n};\nconst cliinvalidUrl = \"/api/test\";\nconst cliinvalidBody = { username: \"rm -rf\" };\nconst nosqlinvalidBody =  {bz: {$in: \"quz\"}};\nconst ldapinvalidBody = {\"user\":\"*)(uid=admin\"};\n\nDBConnection();\ndescribe(\"Test\", () => {\n  let app;\n  beforeEach(() => {\n    app = express();\n    app.use(express.json());\n    app.use(cookieParser());\n    app.use(\n      session({\n        secret: \"keyboard cat\",\n        name: \"test\", // Customise the name to 'test'\n        resave: false,\n        saveUninitialized: true,\n\n        cookie: {\n          maxAge: 86400000 * 30, // 30 days,\n          // httpOnly: true,\n          // secure: true\n        },\n      })\n    );\n    app.use(\n      SqlDetector,\n      checkHTML,\n      NosqlDetector,\n      preventHPP,\n      SessionMiddleware,\n      commandlineinjection,\n      ldapInjectionDetector,\n      preventAccessToFiles,\n      // SpamDetector,\n      // botDetector,\n      VpnProtect,\n    );\n  });\n\n    // Prevent HPP  pollution test cases\n  // const hpp='?name=John&name=Jane&name=Mike'\n  // it('should block a request with an invalid URL containing http parameter pollution', (done) => {\n  //   app.get(validUrl, (req, res) => {\n  //     // req.connection.remoteAddress=\"51.83.59.99\"\n  //     res.status(200).json(req.query);\n  //   });\n\n  //   request(app)\n  //     .get(validUrl+hpp)\n  //     .expect(406, (err, res) => {\n  //       if(res.status<399){\n  //         done()\n  //         return \"HPP Pollution Checked\"\n  //       }\n  //       console.log(res.body.message)\n  //       expect(res.status).to.equal(406);\n  //       // expect(res.body.message).to.equal('XSS Injection Detected');\n  //       done();\n  //     });\n  // });\n  //End HPP Pollution test cases\n\n// Sql injection test cases\n  it('should allow a request with a valid URL', (done) => {\n    app.post(validUrl, (req, res) => {\n      res.status(200).json(req.body);\n    });\n    request(app)\n      .post(validUrl)\n      .send(validBody)\n      .expect(200)\n      .end((err, res) => {\n        if (err) {\n          return done(err);\n        }\n        expect(res.status).to.equal(200);\n        expect(res.body).to.deep.equal(validBody);\n        done();\n      });\n  });\n\n  it('should block a request with an invalid URL containing SQL injection', (done) => {\n    app.post(invalidUrl, (req, res) => {\n      res.status(200).json(req.body);\n    });\n    request(app)\n      .post(invalidUrl)\n      .send(validBody)\n      .expect(406, (err, res) => {\n        if (err) {\n          return done(err);\n        }\n        // console.log(res.body.message)\n        expect(res.status).to.equal(406);\n        expect(res.body.message).to.equal('Malicious Sql  request was detected');\n        done();\n      });\n  });\n  it('should block a request with a invalid body containing SQL injection', (done) => {\n    app.post(validUrl, (req, res) => {\n      res.status(200).json(req.body);\n    });\n    request(app)\n      .post(validUrl)\n      .send(invalidBody)\n      .expect(406, (err, res) => {\n        if (err) {\n          return done(err);\n        }\n        // console.log(res.body.message)\n        expect(res.status).to.equal(406);\n        expect(res.body.message).to.equal('Malicious Sql  request was detected');\n        done();\n      });\n  });\n  //End Sql injection test cases\n  // Html  injection test cases\n  it('should block a request with an invalid URL containing HTML injection', (done) => {\n    app.post(htmlinvalidUrl, (req, res) => {\n      res.status(200).json(req.body);\n    });\n\n    request(app)\n      .post(htmlinvalidUrl)\n      .send(htmlvalidBody)\n      .expect(406, (err, res) => {\n        if (err) {y\n\n          return done(err);\n        }\n       \n        expect(res.status).to.equal(406);\n   \n        expect(res.body.message).to.equal('HTML Injection Detected');\n        done();\n      });\n  });\n  it('should block a request with a invalid body containing HTML injection', (done) => {\n    app.post(validUrl, (req, res) => {\n      res.status(200).json(req.body);\n    });\n    request(app)\n      .post(validUrl)\n      .send(htmlinvalidBody)\n      .expect(406, (err, res) => {\n        if (err) {\n          return done(err);\n        }\n        // console.log(res.body.message)\n        expect(res.status).to.equal(406);\n        expect(res.body.message).to.equal('HTML Injection Detected');\n        done();\n      });\n  });\n  //End Html injection test cases\n  // XSS  injection test cases\n  it('should block a request with an invalid URL containing XSS injection', (done) => {\n    app.post(xssinvalidUrl, (req, res) => {\n      res.status(200).json(req.body);\n    });\n    request(app)\n      .post(xssinvalidUrl)\n      .send(xssvalidBody)\n      .expect(406, (err, res) => {\n        if (err) {y\n\n          return done(err);\n        }\n       \n        expect(res.status).to.equal(406);\n   \n        expect(res.body.message).to.equal('XSS Injection Detected');\n        done();\n      });\n  });\n  it('should block a request with a invalid body containing XSS injection', (done) => {\n    app.post(xssvalidUrl, (req, res) => {\n      res.status(200).json(req.body);\n    });\n\n    request(app)\n      .post(xssvalidUrl)\n      .send(xssinvalidBody)\n      .expect(406, (err, res) => {\n        if (err) {\n          return done(err);\n        }\n        expect(res.status).to.equal(406);\n        expect(res.body.message).to.equal('XSS Injection Detected');\n        done();\n      });\n  });\n// End XSS  injection test cases\n// Sessionmodel test cases\n    it('should handle session expiration correctly', async () => {\n      app.get('/api/test', (req, res) => {\n        res.status(200).json('hello world');\n      });\n      const res = await request(app)\n        .get('/api/test')\n    //  console.log(res.headers)\n      expect(res.status).to.equal(200);\n      expect(res.header['set-cookie'][0]).to.contain('test=');\n    });\n  \n    it('should handle high session timeout correctly', async () => {\n      app.get('/api/test', (req, res) => {\n        res.status(200).json('hello world');\n      });\n      const res = await request(app)\n        .get('/api/test')\n      expect(res.status).to.equal(200);\n      expect(res.header['set-cookie'][0]).to.contain('test=');\n      // expect(res.header['set-cookie'][0]).to.contain('connect.sid=');\n    });\n  \n    it('should handle low session timeout correctly', async () => {\n      app.get('/api/test', (req, res) => {\n        res.status(200).json('hello world');\n      });\n      const res = await request(app)\n        .get('/api/test')\n      expect(res.status).to.equal(200);\n      expect(res.header['set-cookie'][0]).to.contain('test=');\n      // expect(res.header['set-cookie'][0]).to.contain('connect.sid=');\n    });\n  // End  Sessionmodel test cases\n// Cli injection test cases\nit('should block a request with an invalid URL containing CLI injection', (done) => {\n  app.get(cliinvalidUrl, (req, res) => {\n    res.status(200).json(req.body);\n  });\n\n  request(app)\n    .get(cliinvalidUrl+'?id=rm -rf')\n    .expect(406, (err, res) => {\n      console.log(res.body.message)\n      if (err) {\n        return done(err);\n      }\n      // console.log(res.body.message)\n      expect(res.status).to.equal(406);\n      expect(res.body.message).to.equal('Malicious commandline  request was detected');\n      done();\n    });\n});\nit('should block a request with a invalid body containing CLI injection', (done) => {\n  app.post(validUrl, (req, res) => {\n    res.status(200).json(req.body);\n  });\n\n  request(app)\n    .post(validUrl)\n    .send(cliinvalidBody)\n    .expect(406, (err, res) => {\n      if (err) {\n        return done(err);\n      }\n      // console.log(res.body.message)\n      expect(res.status).to.equal(406);\n      expect(res.body.message).to.equal('Malicious commandline  request was detected');\n      done();\n    });\n});\n//End CLI injection test cases\n// Nosql injection test cases\n\n\n\n// Ldap injection test cases\n  it('should block a request with a invalid body containing LDAP injection', (done) => {\n\n    app.post(validUrl, (req, res) => {\n      const inputFields = req.body || req.query || req.params;\n      for (const field in inputFields) {\n          if (typeof inputFields[field] === \"string\") {\n              // Check for LDAP injection attacks\n              if (inputFields[field].match(/[*()\\\\]/)) {\n                  CreateuserDetailsindatabaseonly(req, res, \"LDAP Injection Detected\", type =\"LDAP-injection\")\n                  return res.status(406).json({ message: \"LDAP Injection Detected\" });\n              }\n          }\n      }\n      res.status(200).json(req.body);\n    });\n    request(app)\n      .post(validUrl)\n      .send(ldapinvalidBody)\n      .expect(406, async(err, res) => {\n        console.log(res.body.message)\n        if (err) {\n          return done(err);\n        }\n        expect(res.body.message).to.equal('LDAP Injection Detected');\n        done();\n      });\n  });\n// End Ldap injection test cases\n// VPn or Proxy detect test cases\nit('should send request with VPn or Proxy  headers', async () => {\n  app.get(validUrl, (req, res) => {\n    res.status(200).json(\"hello world\");\n  });\n  const res = await request(app)\n    .get(validUrl)\n    .set('X-Forwarded-For', '46.165.250.77')\n    console.log(res.body.message)\n  expect(res.status).to.equal(406);\n  console.log(res.body)\n  expect(res.body.message).to.equal('VPn Detected');\n});\n// End VPn or Proxy detect Test cases\n// Prevent File Accesses from being injected into the URL\nit('should block a request with a invalid api containing  route that access some files ', async() => {\n  app.get(validUrl, (req, res) => {\n    res.status(200).json(\"hello world\");\n  });\n  const res = await request(app)\n    .get('/api/test.js')\n     expect(res.status).to.equal(406);\n});\n//End  Prevent File Accesses from being injected into the URL\n});\n\n// End of Test cases\ndescribe(\"Nosql Detector\", () => {\n  let app;\n  beforeEach(() => {\n    app = express();\n    app.use(express.json());\n    app.use(NosqlDetector);\n  });\n\n  it('should block a request with a invalid body containing Nosql injection', async() => {\n    app.post(validUrl, (req, res) => {\n      res.status(200).json(req.body);\n    });\n    const res = await request(app)\n    .post(validUrl)\n      .send(nosqlinvalidBody)\n     expect(res.status).to.equal(406);\n});\n    // request(app)\n    //   .post(validUrl)\n    //   .send(nosqlinvalidBody)\n      // .expect(406, (err, res) => {\n      //   if (err) {\n      //     return done(err);\n      //   }\n        // console.log(res.body.message)\n        // console.log(res.status)\n        // expect(res.status).to.equal(406);\n        // expect(res.body.message).to.equal('Malicious nosql request was detected');\n        // done();\n    \n  });\n  // End Nosql injection test cases\n\ndescribe(\"Spam Detector\", () => {\n  let app;\n  beforeEach(() => {\n    app = express();\n    app.use(express.json());\n    app.use(SpamDetector);\n  });\n\n// Spaming test cases\nit('should block a Spamming request when anybody hit api motre then 500 times after 15 minutes letter you can use that', async () => {\n  app.get('/api/test', (req, res) => {\n    res.status(200).json(\"hello world\");\n  });\n  const requests = [];\n  // Send 100 requests with invalid API routes that access some files\n  for (let i = 0; i < 505; i++) {\n    requests.push(request(app).get(`/api/test`));\n  }\n  const responses = await Promise.all(requests);\n  // console.log(responses)\n  for (const res of responses) {\n    // console.log(res.status)\n    if (res.status === 429) {\n      expect(res.status).to.equal(429);\n    }\n  }\n});\n// End Spamming Test cases \n\n});\ndescribe(\"Process Time Flow\", () => {\n  let app;\n  beforeEach(() => {\n    app = express();\n    app.use(express.json());\n  });\n\n// Spaming test cases\nit('should check process time flow is present or not', async () => {\n  app.get('/api/test', (req, res) => {\n    if (typeof process.hrtime === 'function' && typeof console.time === 'function' && typeof console.timeEnd === 'function') {\n      // console.log('yes');\n     return res.status(200).json(\"yes\");\n    } \n   \n  });\n  const res = await request(app)\n  .get('/api/test')\n   if(res.status===200){\n    expect(res.status).to.equal(200);\n    expect(res.body).to.equal('yes');\n    expect(typeof process.hrtime).to.equal('function');\n    expect(typeof console.time).to.equal('function');\n    expect(typeof console.timeEnd).to.equal('function');\n   }else{\n    //  console.log(\"time flow is not present\")\n   }\n});\n// End Spamming Test cases \n\n});\ndescribe(\"BotChecker\", () => {\n  let app;\n  beforeEach(() => {\n    app = express();\n    app.use(express.json());\n    app.use(botDetector);\n  });\n\n// Bot test cases\nit('should block a Bot request when anybody hit api mot=re then 500 times after 15 minutes letter you can use that', async () => {\n  app.get('/api/login', (req, res) => {\n    res.status(200).json(\"hello world\");\n  });\n  const requests = [];\n  // Send 100 requests with invalid API routes that access some files\n  for (let i = 0; i < 505; i++) {\n    requests.push(request(app).get(`/api/login`));\n  }\n  const responses = await Promise.all(requests);\n  // console.log(responses)\n  for (const res of responses) {\n    // console.log(res.status)\n    if (res.status === 429) {\n      expect(res.status).to.equal(429);\n    }\n  }\n});\n// End Bot Test cases\n\n});"
    },
    {
      "name": "fetchUrl",
      "type": "file",
      "extension": ".js",
      "content": "const url = require('url');\nconst https = require('https');\nconst http=require('http')\nfunction parseUrl(urlString) {\n    const parsedUrl = new URL(urlString);\n    return {\n      hostname: parsedUrl.hostname,\n      path: parsedUrl.pathname + parsedUrl.search,\n    };\n  }\n  async function useCustomAxios(url, options = {}) {\n    return new Promise((resolve, reject) => {\n      const req = http.request(url, options, (res) => {\n        let data = '';\n  \n        res.on('data', (chunk) => {\n          data += chunk;\n        });\n  \n        res.on('end', () => {\n         \n          resolve({data:JSON.parse(data)});\n        });\n      });\n  \n      req.on('error', (error) => {\n        reject(error);\n      });\n  \n      req.end();\n    });\n  }\n  async function fetchHttpsData(url) {\n    return new Promise((resolve, reject) => {\n      const request = https.get(url, (response) => {\n        let data = '';\n  \n        response.on('data', (chunk) => {\n          data += chunk;\n        });\n  \n        response.on('end', () => {\n            const responseData = {\n                statusCode: response.statusCode,\n                data: JSON.parse(data)\n              };\n              resolve(responseData);\n        });\n      });\n  \n      request.on('error', (error) => {\n        reject(error);\n      });\n    });\n  }\n  module.exports={useCustomAxios,fetchHttpsData}"
    },
    {
      "name": "functions",
      "type": "file",
      "extension": ".js",
      "content": "const dns = require(\"dns\");\r\nconst { httpParameterPollutionModel } = require(\"../../models/httpParameterPollutionModel\");\r\nconst { EmailVerifyModel } = require(\"../../models/sensitivekeywordsModel\");\r\nconst { sensitiveinfoinbodyModel } = require(\"../../models/SensitiveInfoInBodyModel\");\r\nconst { NodeVersionModel } = require(\"../../models/NodeVersionModel\");\r\nconst CallEmailVerify=async (email, hostname) => {\r\n  const existingMessage = await EmailVerifyModel.findOne(\r\n    { email, hostname },\r\n    { _id: 0, exist: true }\r\n  );\r\n  if (existingMessage) {\r\n    // Handle matching hostname and sensitive key\r\n    console.log(\"Found existing\");\r\n  } else {\r\n    await sensitiveinfoinbodyModel.create({\r\n      email,\r\n      hostname,\r\n    });\r\n    // Return success response for creating new data\r\n  }\r\n}\r\nconst checkDomainAvailability=async  (domain)=>{\r\n  return new Promise((resolve, reject) => {\r\n    dns.lookup(domain, (err, d) => {\r\n      if (err && err.code === \"ENOTFOUND\") {\r\n        resolve(false);\r\n      } else {\r\n        resolve(true);\r\n      }\r\n    });\r\n  });\r\n}\r\nconst validatePassword = async(str = '') => {\r\n   const { length: l } = str;\r\n   const strArr = str.split('');\r\n   if(l < 6 || l > 20){\r\n      return false;\r\n   };\r\n   const specialCharacters = '!@#$%^&*()-+';\r\n   const alphabets = 'abcdefghijklmnopqrstuvwxyz';\r\n   const numbers = '0123456789';\r\n   const checkWith = (char, set) => set.includes(char);\r\n   const containsSpecialCharacter = strArr.some(char => checkWith(char, specialCharacters));\r\n   const containsLowercase = strArr.some(char => checkWith(char, alphabets));\r\n   const containsUppercase = strArr.some(char => checkWith(char, alphabets.toUpperCase()));\r\n   const containsNumber = strArr.some(char => checkWith(char, numbers));\r\n   \r\n   return {containsSpecialCharacter, containsLowercase, containsUppercase ,containsNumber}\r\n};\r\nconst noHpp=async (appid) => {\r\n  const existingMessage = await httpParameterPollutionModel.findOne({});\r\n  if (existingMessage) {\r\n    await httpParameterPollutionModel.findOneAndUpdate(\r\n      {appid},\r\n      { isPolluted: false }\r\n    );\r\n  } else {\r\n    await httpParameterPollutionModel.create({appid, isPolluted: false });\r\n  }\r\n}\r\nconst isHpp=async (appid) => {\r\n  const existingMessage = await httpParameterPollutionModel.findOne({appid});\r\n  if (existingMessage) {\r\n    await httpParameterPollutionModel.findOneAndUpdate(\r\n      {appid},\r\n      {isPolluted: true }\r\n    );\r\n  } else {\r\n    await httpParameterPollutionModel.create({ appid,isPolluted: true });\r\n  }\r\n}\r\nconst Nodeversion=async (appid,version) => {\r\n  const existingMessage = await NodeVersionModel.findOne({appid});\r\n  if (existingMessage) {\r\n  const data=  await NodeVersionModel.findOneAndUpdate(\r\n      {appid},\r\n      {version }\r\n    );\r\n    return data\r\n  } else {\r\n    const data=await NodeVersionModel.create({ appid,version});\r\n    return data\r\n  }\r\n}\r\nconst hasArrayParameters=(params)=> {\r\n  for (const param in params) {\r\n    if (Array.isArray(params[param])) {\r\n      return true; // Array parameter found\r\n    }\r\n  }\r\n  return false; // No array parameters found\r\n}\r\nconst  hasDuplicateParameters=(params)=> {\r\n  const seen = new Set();\r\n  for (const param in params) {\r\n    if (seen.has(param)) {\r\n      return true; // Duplicate parameter found\r\n    }\r\n    seen.add(param);\r\n  }\r\n  return false; // No duplicate parameters found\r\n}\r\nconst hashttpParametersPollutionavailable=async(params,appid)=>{\r\n  if (hasDuplicateParameters(params) || hasArrayParameters(params)) {\r\n    await isHpp(appid)\r\n    console.log(\"http parameter pollluution is possible\", \"red\");\r\n  } else {\r\n    await noHpp(appid)\r\n    console.log(\"http parameter pollluution is not possible\", \"red\");\r\n   \r\n  }\r\n}\r\nmodule.exports={\r\n  CallEmailVerify,checkDomainAvailability,hashttpParametersPollutionavailable,validatePassword,Nodeversion\r\n}\r\n\r\n\r\n "
    },
    {
      "name": "dashboarddataChecker",
      "type": "file",
      "extension": ".js",
      "content": "module.exports = {\r\n    Session_time_out_is_high__not_implemented: [\r\n        \"Session is Infinite\",\r\n        \"Session_time_out is High\",\r\n        \"Session_time_out is Low\",\r\n        \"Session_time_out is Normal\",\r\n        \"Not Implemented\"\r\n    ]\r\n}"
    },
    {
      "name": "dataHandler",
      "type": "file",
      "extension": ".js",
      "content": "const sendResponse=(res,statusCode=500,message=\"Success\",data)=>{\n    const response={statusCode,message,data}\n    return res.status(statusCode).json(response)\n}\nconst handelErrors=(err, req, res, next) => {\n  console.log({name:error.name})\n    if (err instanceof SyntaxError) {\n      // handle syntax errors without stack trace\n      res.status(400).json({ error: 'Bad request' });\n    } else {\n      // handle other errors without stack trace\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  }\nmodule.exports={\n    sendResponse,\n    handelErrors\n}"
    },
    {
      "name": "Downtimemonitor",
      "type": "file",
      "extension": ".js",
      "content": "const https=require('https')\r\nconst _=require('lodash')\r\nconst moment =require('moment')\r\n// Websites to monitor\r\nconst websites = [\r\n    { name: 'Example', url: 'https://example.com' },\r\n    { name: 'expired.badssl', url: 'https://expired.badssl.com/' },\r\n    // Add more websites as needed\r\n  ];\r\n  \r\n  // Email configuration\r\n  const emailConfig = {\r\n    service: 'gmail',\r\n    port: 587,\r\n    auth: {\r\n      user: 'dev@handsintechnology.com',\r\n      pass: 'Hitdev@2022',\r\n    },\r\n  };\r\n  \r\n  // Check website availability\r\n  async function checkWebsiteAvailability(website) {\r\n    try {\r\n      const startTime = new Date().getTime();\r\n      const response = await axios.get(website.url);\r\n      const endTime = new Date().getTime();\r\n      const responseTime = endTime - startTime;\r\n      // Handle success response\r\n      console.log(`${website.name} is available. Response Time: ${responseTime}ms`)\r\n    } catch (error) {\r\n      // Handle error response\r\n      if(error.code === 'CERT_HAS_EXPIRED'){\r\n        console.log(`${website.name} is down. Error: ${error.message}`);\r\n      }\r\n  \r\n      // Send email alert\r\n      sendEmailAlert(website.name, 'Website is down');\r\n    }\r\n  }\r\n  \r\n  // Send email alert\r\n  function sendEmailAlert(websiteName, alertMessage) {\r\n    const nodemailer=require('nodemailer')\r\n    const transporter = nodemailer.createTransport(emailConfig);\r\n    const mailOptions = {\r\n      from: 'shivam@handsintechnology.com',\r\n      to: 'dev@handsintechnology.com',\r\n      subject: `${websiteName} Alert`,\r\n      text: `The website ${websiteName} has the following alert: ${alertMessage}. Please take necessary actions.`,\r\n    };\r\n    transporter.sendMail(mailOptions, (error, info) => {\r\n      if (error) {\r\n        console.log('Error sending email:', error);\r\n      } else {\r\n        console.log('Email sent:', info.response);\r\n      }\r\n    });\r\n  }\r\n  \r\n  \r\n  // sendEmailAlert(\"dev\",\"test\")\r\n  // Send email alert\r\n  \r\n  // Start monitoring loop\r\n  function startMonitoring() {\r\n    console.log('Monitoring started...');\r\n    // setInterval(() => {\r\n      // websites.forEach((website) => {\r\n      //   checkWebsiteAvailability(website);\r\n      // });\r\n    // }, 5000); // Check every 5 seconds\r\n  }\r\n  const SSLverifier = async (url) => {\r\n    return new Promise((resolve, reject) => {\r\n     try {\r\n      const result = {};\r\n      const options = {\r\n        hostname: url,\r\n        port: 443,\r\n        rejectUnauthorized: false,\r\n      };\r\n      const startTime = performance.now(); // Start measuring response time\r\n      const req = https.request(options, (res) => {\r\n        const endTime = performance.now(); // Stop measuring response time\r\n        const responseTime = endTime - startTime;\r\n        \r\n        const serverType = res.headers['server'];\r\n        const serverVersion = res.headers['x-powered-by'];\r\n        console.log({ serverType, serverVersion,responseTime })\r\n        const certificate = res.socket.getPeerCertificate();\r\n        const negotiatedProtocol = res.socket.getProtocol();\r\n        const {\r\n          subject,\r\n          issuer,\r\n          valid_from: validFrom,\r\n          valid_to: validTo,\r\n          fingerprint,\r\n          serialNumber,\r\n          subjectaltname: subjectAltName,\r\n        } = certificate;\r\n        const valid = moment(validTo, 'MMM DD HH:mm:ss YYYY GMT');\r\n        const currentDate = moment();\r\n        // Compare the issuer and subject fields\r\n        var s = JSON.stringify(certificate.subject);\r\n        var i = JSON.stringify(certificate.issuer);\r\n        s = JSON.parse(s);\r\n        i = JSON.parse(i);\r\n        if (_.isEqual(s, i)) {\r\n          result.self = 'Self-signed certificate detected';\r\n        } else {\r\n          result.self = 'Certificate is not self-signed';\r\n        }\r\n        if (valid.isBefore(currentDate)) {\r\n          result.valid = 'Certificate is not valid';\r\n          result.expired = 'Certificate has expired';\r\n        } else {\r\n          result.valid = 'Certificate is valid';\r\n          result.expired = 'Certificate is expired on the ' + validTo;\r\n        }\r\n        if (negotiatedProtocol === 'TLSv1' || negotiatedProtocol === 'SSLv3') {\r\n          result.negotiatedProtocol = 'Obsolete SSL/TLS protocol detected';\r\n        } else {\r\n          result.negotiatedProtocol = 'No obsolete SSL/TLS protocol detected';\r\n        }\r\n        resolve(result);\r\n      });\r\n  \r\n      req.on('error', (error) => {\r\n        reject(error.message);\r\n      });\r\n  \r\n      req.end();\r\n     } catch (error) {\r\n      reject(error.message);\r\n     }\r\n    });\r\n  };\r\n  module.exports={SSLverifier}\r\n  \r\n  // Start the application\r\n//   startMonitoring();"
    },
    {
      "name": "emailverify",
      "type": "file",
      "extension": ".js",
      "content": "'use strict';\n\nlet dns = require('dns');\nlet net = require('net');\n\nconst defaultOptions = {\n  port: 25,\n  sender: 'name@example.org',\n  timeout: 0,\n  fqdn: 'mail.example.org',\n  ignore: false\n};\n\nconst errors = {\n  missing: {\n    email: 'Missing email parameter',\n    options: 'Missing options parameter',\n    callback: 'Missing callback function'\n  },\n  invalid: {\n    email: 'Invalid Email Structure'\n  },\n  exception: {}\n};\n\nfunction optionsDefaults(options) {\n  if (!options) options = {};\n  Object.keys(defaultOptions).forEach(function (key) {\n    if (options && !options[key]) options[key] = defaultOptions[key];\n  });\n  return options;\n}\n\nfunction dnsConfig(options) {\n  try {\n    if (Array.isArray(options.dns)) dns.setServers(options.dns);\n    else dns.setServers([options.dns]);\n  } catch (e) {\n    throw new Error('Invalid DNS Options');\n  }\n}\n\nmodule.exports.verify = function verify(email, options, callback) {\n  let params = {};\n  let args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments);\n\n  args.forEach(function (arg) {\n    if (typeof arg === 'string') {\n      params.email = arg;\n    } else if (typeof arg === 'object') {\n      params.options = arg;\n    } else if (typeof arg === 'function') {\n      params.callback = arg;\n    }\n  });\n\n  if (!params.email && params.options.email && typeof params.options.email === 'string')\n    params.email = params.options.email;\n  params.options = optionsDefaults(params.options);\n\n  if (!params.email) throw new Error(errors.missing.email);\n  if (!params.options) throw new Error(errors.missing.options);\n  if (!params.callback) throw new Error(errors.missing.callback);\n\n  if (params.options.dns) dnsConfig(params.options);\n\n  console.log('# Verifying ' + params.email);\n\n  startDNSQueries(params);\n};\n\nfunction startDNSQueries(params) {\n  let domain = params.email.split(/[@]/).splice(-1)[0].toLowerCase();\n\n  console.log('Resolving DNS... ' + domain);\n  dns.resolveMx(domain, (err, addresses) => {\n    if (err || typeof addresses === 'undefined') {\n      params.callback(err, null);\n    } else if (addresses && addresses.length <= 0) {\n      params.callback(null, { success: false, info: 'No MX Records' });\n    } else {\n      params.addresses = addresses;\n\n      // Find the lowest priority mail server\n      let priority = 10000;\n      let lowestPriorityIndex = 0;\n\n      for (let i = 0; i < addresses.length; i++) {\n        if (addresses[i].priority < priority) {\n          priority = addresses[i].priority;\n          lowestPriorityIndex = i;\n          console.log('MX Records ' + JSON.stringify(addresses[i]));\n        }\n      }\n\n      params.options.smtp = addresses[lowestPriorityIndex].exchange;\n      console.log('Choosing ' + params.options.smtp + ' for connection');\n      beginSMTPQueries(params);\n    }\n  });\n}\n\nfunction beginSMTPQueries(params) {\n  let stage = 0;\n  let success = false;\n  let response = '';\n  let completed = false;\n  let ended = false;\n  let tryagain = false;\n\n  console.log('Creating connection...');\n  let socket = net.createConnection(params.options.port, params.options.smtp);\n  let callback = (err, object) => {\n    callback = () => {}; // multiple sources could call the callback, replace the function immediately to prevent it from being called twice\n    ended = true;\n    return params.callback(err, object);\n  };\n\n  let advanceToNextStage = () => {\n    stage++;\n    response = '';\n  };\n\n  if (params.options.timeout > 0) {\n    socket.setTimeout(params.options.timeout, () => {\n      callback(null, { success: false, info: 'Connection Timed Out', addr: params.email });\n      socket.destroy();\n    });\n  }\n\n  socket.on('data', function (data) {\n    response += data.toString();\n    completed = response.slice(-1) === '\\n';\n    if (completed) {\n      switch (stage) {\n        case 0:\n          if (response.indexOf('220') > -1 && !ended) {\n            // Connection Worked\n            var cmd = 'EHLO ' + params.options.fqdn + '\\r\\n';\n            socket.write(cmd, function () {\n              stage++;\n              response = '';\n            });\n          } else {\n            if (\n              response.indexOf('421') > -1 ||\n              response.indexOf('450') > -1 ||\n              response.indexOf('451') > -1\n            )\n              tryagain = true;\n            socket.end();\n          }\n          break;\n        case 1:\n          if (response.indexOf('250') > -1 && !ended) {\n            // Connection Worked\n            var cmd = 'MAIL FROM:<' + params.options.sender + '>\\r\\n';\n            socket.write(cmd, function () {\n              stage++;\n              response = '';\n            });\n          } else {\n            socket.end();\n          }\n          break;\n        case 2:\n          if (response.indexOf('250') > -1 && !ended) {\n            // MAIL Worked\n            var cmd = 'RCPT TO:<' + params.email + '>\\r\\n';\n            socket.write(cmd, function () {\n              stage++;\n              response = '';\n            });\n          } else {\n            socket.end();\n          }\n          break;\n        case 3:\n          if (\n            response.indexOf('250') > -1 ||\n            (params.options.ignore && response.indexOf(params.options.ignore) > -1)\n          ) {\n            // RCPT Worked\n            success = true;\n          }\n          stage++;\n          response = '';\n          // close the connection cleanly.\n          if (!ended) {\n            var cmd = 'QUIT\\r\\n';\n            socket.write(cmd);\n          }\n          break;\n        case 4:\n          socket.end();\n      }\n    }\n  });\n\n  socket.on('connect', function (data) {\n    console.log('Connected');\n  });\n\n  socket.on('error', function (err) {\n    console.error('Connection error:', err);\n    callback(err, { success: false, info: null, addr: params.email });\n  });\n\n  socket.on('end', function () {\n    console.log('Closing connection');\n    callback(null, {\n      success: success,\n      info: params.email + ' is ' + (success ? 'a valid' : 'an invalid') + ' address',\n      addr: params.email,\n    });\n  });\n};\n\n"
    },
    {
      "name": "errorHandler",
      "type": "file",
      "extension": ".js",
      "content": "const errorHandler = (res, statusCode = 500, message = \"internal server error\", data) => {\n      const response = { statusCode, message, data }\n      res.status(statusCode).json(response)\n}\nmodule.exports = {\n      errorHandler\n}"
    },
    {
      "name": "functions",
      "type": "file",
      "extension": ".js",
      "content": "const Project_Security_Logs = require('.././models/Project_Security_Logs')\n// const axios = require('axios')\nconst https = require('https');\nconst { useCustomAxios } = require('../utilities/functions/fetchUrl');\nconst { default: mongoose } = require('mongoose');\nconst { sendResponse } = require('./dataHandler');\n// XLInjectionCheck\nfunction checkForXMLInjection(xml) {\n  // Check for CDATA injection attacks\n  const cdataRegex = /<!\\[CDATA\\[(.*)\\]\\]>/;\n  const cdataMatch = cdataRegex.exec(xml);\n  if (cdataMatch && cdataMatch[1].includes(']]>')) {\n    return true;\n  }\n\n  // Check for entity injection attacks\n  const entityRegex = /<!ENTITY\\s+([\\w_-]+)\\s+(['\"])(.*?)\\2\\s*>/g;\n  let entityMatch;\n  while (entityMatch = entityRegex.exec(xml)) {\n    const entityValue = entityMatch[3];\n    if (entityValue.includes('<') || entityValue.includes('>')) {\n      return true;\n    }\n  }\n\n  // Check for tag injection attacks\n  const tagRegex = /<([^\\s/>]+)/g;\n  let tagMatch;\n  while (tagMatch = tagRegex.exec(xml)) {\n    const tagName = tagMatch[1];\n    if (tagName.includes('<') || tagName.includes('>')) {\n      return true;\n    }\n  }\n  // No injection detected\n  return false;\n}\n// XSS Injection Function\n// Create Blacklistusers details function\n\nconst CreateuserDetails = async (req, res, message, type) => {\n  try {\n    message = \"malacios\"\n    var ip = req.headers['x-forwarded-for'] || req.socket.remoteAddress\n\n    const response = await useCustomAxios(`http://ip-api.com/json/${ip}`)\n    const { country, city, region } = response.data\n    const month = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    const d = new Date();\n\n    const useragent = req.headers['user-agent']\n    // // const result = detector.detect(useragent);\n    // // const { client, os, device } = result\n\n    const UserRawData = {\n      ip,\n      date: d.getDate() + \" \" + month[d.getMonth()] + \" \" + d.getFullYear(),\n      time: d.toLocaleTimeString(),\n      page: req.url,\n      query: req.query || req.query || \"\",\n      inputQuery: req.body || \"\",\n      type,\n      // browser: client.name + client.version || \"\",\n      // browser_code: client.name || \"\",\n      // os: os.name + os.version + os.platform || \"\",\n      country: country || \"\",\n      city: city || \"\",\n      region: region || \"\",\n      useragent,\n      latitude: \"\",\n      longitude: \"\",\n      // device: device.type,\n      domain: req.get('host'),\n      referurl: req.protocol + '://' + req.get('host') + req.originalUrl || \"\"\n    }\n    const filter = { ip };\n    const update = UserRawData;\n\n    const finduser = await Project_Security_Logs.findOne(filter)\n    if (finduser) {\n      await Project_Security_Logs.findOneAndUpdate(filter, update)\n      //  errorHandler(res, 406, message)\n    } else if (!finduser) {\n      await Project_Security_Logs.create(UserRawData)\n      //  errorHandler(res, 406, message)\n    }\n  } catch (error) {\n    console.error(error)\n  }\n}\nconst CreatStatusCodesDetails = async (ErrorStatuscode, message, url, hostname, id) => {\n  try {\n    const StatusCodeModels = require('../models/ServerErrorResponseCodes')\n    const ResponseCodesLoginPageModels = require('../models/ResponseCodesLoginPageModels')\n    const UserRawData = {\n      ErrorStatuscode,\n      message,\n      hostname\n    }\n    const filter = { user: id, ErrorStatuscode };\n    if (url.includes('/login')) {\n      const finduser = await ResponseCodesLoginPageModels.findOne(filter)\n      if (finduser) {\n        console.log(\"already exist\")\n      } else {\n        await ResponseCodesLoginPageModels.create({ user: id, UserRawData })\n      }\n    } else {\n      const finduser = await StatusCodeModels.findOne(filter)\n      if (finduser) {\n        console.log(\"already exist\")\n      } else {\n        await StatusCodeModels.create({ user: id, UserRawData })\n      }\n    }\n\n  } catch (error) {\n    console.error(error)\n  }\n}\nasync function hasRobotsTxt(originurl) {\n\n  if (originurl === 'localhost') {\n    return Promise.reject(new Error('localhost not allowed'));\n  }\n  const options = {\n    method: 'HEAD',\n    hostname: originurl,\n    port: 443,\n    path: '/robots.txt',\n  };\n  return new Promise((resolve, reject) => {\n    try {\n      const req = https.request(options, res => {\n\n        if (res.statusCode === 200) {\n          resolve('robot.txt file available');\n        } else if (res.statusCode === 404) {\n          resolve('robot.txt file not available');\n        }\n      });\n      req.on('error', err => {\n        console.log(err)\n        reject(JSON.stringify(err));\n      });\n\n      req.end();\n    } catch (error) {\n      console.log(error)\n      reject(error)\n    }\n  });\n}\n// Sql Injection Function\nfunction hasSqlInjection(value) {\n  const sqlMeta = new RegExp('(%27)|(--)|(1=1)|(1 and 1=1)|(1 AND 1=1)|(or 1=1)|(OR 1=1)|(%23)|(#)', 'i');\n  if (sqlMeta.test(value)) {\n    return true;\n  }\n  const sqlMeta2 = new RegExp('((%3D)|(=))[^\\n]*((%27)|(\\')|(--)|(%3B)|(;))', 'i');\n  if (sqlMeta2.test(value)) {\n    return true;\n  }\n  const nestedQuery = new RegExp('((\\%3D)|(=))[^\\n]*((\\%27)|(\\')|(\\-\\-)|(\\%3B)|(;))?[^\\n]*((\\%27)|(\\')|(\\-\\-)|(\\%3B)|(;))[^\\n]*((\\%3D)|(=))', 'i');\n  if (nestedQuery.test(value)) {\n    return true;\n  }\n  const timeBased = new RegExp('(\\%3B)|(;)[^\\n]*sleep\\((\\d+)\\)[^\\n]*', 'i');\n  if (timeBased.test(value)) {\n    return true;\n  }\n  const booleanBased = new RegExp('((\\%3D)|(=))[^\\n]*[^\\s]*(\\%27)|(\\')|(\\-\\-)|(\\%3B)|(;)', 'i');\n  if (booleanBased.test(value)) {\n    return true;\n  }\n  const typicalSql = new RegExp('w*((%27)|(\\'))((%6F)|o|(%4F))((%72)|r|(%52))', 'i');\n  if (typicalSql.test(value)) {\n    return true;\n  }\n  const sqlUnion = new RegExp('((%27)|(\\'))union', 'i');\n  if (sqlUnion.test(value)) {\n    return true;\n  }\n  const entireText = new RegExp('\\b((select|delete|insert|update|drop|create|alter)\\b.*)', 'i');\n  if (entireText.test(value)) {\n    return true;\n  }\n  return false;\n}\n// Co0mmandline Injection Function\nfunction hasCommandLineInjection(value) {\n  const commandMeta = new RegExp(\n    \"(rm -rf)|(ls -la)|(command >/dev/sda)|(:\\\\(\\\\){ :|:& };:)|(sudo yum install)|(.conf)|(sudo mv  /dev/null)|(wget)|(-O-)|(crontab -r)|(history)|(dd if=/dev/zero of=/dev/sda)|(/dev/sda)|(/dev/sda1)|(sudo apt purge python|python2|python3.x-minimal)|(chmod -R 777 /)\",\n    \"i\"\n  );\n  if (commandMeta.test(value)) {\n    return true;\n  }\n\n  return false;\n}\n// HTML Injection Function\nfunction hasHTMLnjection(value) {\n  const HTML = new RegExp(/<(\\\"[^\\\"]*\\\"|'[^']*'|[^'\\\">])*>/, \"g\");\n  if (HTML.test(value)) {\n    return true;\n  }\n\n  return false;\n}\n// HTML Injection Function\nfunction hasXSSnjection(value) {\n  const XSS = /<script>/\n  if (XSS.test(value)) {\n    return true;\n  }\n\n  return false;\n}\n// Sql Injection middleware\nasync function isHashedPassword(password) {\n  const md5Regex = /^[a-f0-9]{32}$/i;\n  if (md5Regex.test(password)) {\n    return { message: true, algorithmname: \"md5\" };\n  }\n  const sha1Regex = /^[a-f0-9]{40}$/i;\n  if (sha1Regex.test(password)) {\n    return { message: true, algorithmname: \"sha-1\" };\n  }\n  const sha256Regex = /^[a-f0-9]{64}$/i;\n  if (sha256Regex.test(password)) {\n    return { message: true, algorithmname: \"sha-256\" };\n  }\n  const sha512Regex = /^[a-f0-9]{128}$/i;\n  if (sha512Regex.test(password)) {\n    return { message: true, algorithmname: \"sha-512\" };\n  }\n  const bcryptRegex = /^\\$2[ayb]\\$.{56}$/i;\n  if (bcryptRegex.test(password)) {\n    return { message: true, algorithmname: \"bcrypt\" };\n  }\n  const sha384Regex = /^[a-f0-9]{96}$/;\n  if (sha384Regex.test(password)) {\n    return { message: true, algorithmname: \"sha-384\" };\n  }\n  const sha3_224Regex = /^[a-f0-9]{56}$/;\n  if (sha3_224Regex.test(password)) {\n    return { message: true, algorithmname: \"sha-3224\" };\n  }\n  const DES = /^[a-zA-Z0-9./]{13}$/\n  if (DES.test(password)) {\n    return { message: true, algorithmname: \"DES\" };\n  }\n  const fnv164Regex = /^[0-9a-f]{16}$/i;\n  if (fnv164Regex.test(password)) {\n    return { message: true, algorithmname: \"fnv164Regex\" };\n  }\n\n\n\n  return { message: false }\n}\nasync function InjectionChecker(req) {\n  entries = {\n    ...req.body,\n    ...req.query,\n    ...req.params,\n  }\n  let containsSql = false\n    , validateXss = false, validatehtml = false, containCommand = false;\n  value = JSON.stringify(entries)\n  // console.log({value})\n  if (hasSqlInjection(value) === true) {\n    containsSql = true;\n  }\n  if (hasXSSnjection(value) === true) {\n    validateXss = true;\n  }\n  if (hasHTMLnjection(value) === true) {\n    validatehtml = true;\n  }\n  if (hasCommandLineInjection(value) === true) {\n    containCommand = true;\n  }\n  return { containsSql, validateXss, validatehtml, containCommand }\n\n}\nasync function checkForSensitiveInfoInBody(data, keysToMatch) {\n  try {\n    // console.log({data})\n    let matchedData = null; // Initialize variable to store matched data\n    const recursiveSearch = (currentData) => {\n      if (typeof currentData === \"object\" && currentData !== null) {\n        // If the current data is an object, recursively search its properties\n        Object.entries(currentData).forEach(([key, value]) => {\n          if (keysToMatch.includes(key) && value) {\n            // If the current key matches one of the keys and the value is not falsy, set it as the matched data\n            matchedData = key;\n          } else {\n            recursiveSearch(value);\n          }\n        });\n      }\n    }\n\n    recursiveSearch(data);\n\n    return matchedData;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function CheckJwttokenSecurity(req) {\n  try {\n    const authHeader = req.headers.authorization;\n    let message;\n    var [authType, token] = authHeader ? authHeader.split(\" \") : \"\";\n    switch (authType) {\n      case !authHeader:\n\n        break;\n      case \"Bearer\":\n        if (token) {\n          message = \"Authorization Token Passed in Barer Authentication area\";\n        }\n\n        break;\n\n      case \"Basic\":\n        if (token) {\n          message = \"Authorization Token Passed in Basic Authentication area\";\n\n        }\n\n        break;\n\n      case \"AWS\":\n        if (token) {\n          message = \"Authorization Token Passed in Aws Authentication area\";\n\n        }\n\n        break;\n\n      case \"OAuth\":\n        if (token) {\n          message = \"Authorization Token Passed in OAuth Authentication area\";\n\n        }\n\n        break;\n      default:\n        if (token) {\n          message = \"unknown authorization type\";\n        }\n\n    }\n    if (message) {\n      const existingMessage = await TokenPassedArea.findOne();\n      if (existingMessage) {\n        await TokenPassedArea.findOneAndUpdate({}, { message });\n      } else {\n        await TokenPassedArea.create({ message });\n      }\n    }\n  } catch (error) {\n\n  }\n}\nasync function CheckPasswordKeyText(data, keysToMatch) {\n  try {\n    // console.log({data})\n    let matchedData = null; // Initialize variable to store matched data\n\n    const recursiveSearch = (currentData) => {\n      if (typeof currentData === \"object\" && currentData !== null) {\n        // If the current data is an object, recursively search its properties\n        Object.entries(currentData).forEach(([key, value]) => {\n          if (keysToMatch.includes(key) && value) {\n            // If the current key matches one of the keys and the value is not falsy, set it as the matched data\n            matchedData = value;\n          } else {\n            recursiveSearch(value);\n          }\n        });\n      }\n    }\n\n    recursiveSearch(data);\n\n    return matchedData;\n  } catch (error) {\n    console.log(error);\n  }\n}\nmodule.exports = {\n  CreatStatusCodesDetails,\n  hasSqlInjection,\n  hasRobotsTxt,\n  CreateuserDetails,\n  checkForXMLInjection,\n  isHashedPassword,\n  hasCommandLineInjection,\n  hasHTMLnjection,\n  hasXSSnjection,\n  InjectionChecker,\n  CheckJwttokenSecurity,\n  checkForSensitiveInfoInBody,\n  CheckPasswordKeyText\n  // checkForSensitiveInfo\n}"
    },
    {
      "name": "hostNamevalidator",
      "type": "file",
      "extension": ".js",
      "content": "function isValidHostname(value) {\n    if (typeof value !== 'string') return false\n  \n    const validHostnameChars = /^[a-zA-Z0-9-.]{1,253}\\.?$/g\n    if (!validHostnameChars.test(value)) {\n      return false\n    }\n  \n    if (value.endsWith('.')) {\n      value = value.slice(0, value.length - 1)\n    }\n  \n    if (value.length > 253) {\n      return false\n    }\n  \n    const labels = value.split('.')\n  \n    const isValid = labels.every(function (label) {\n      const validLabelChars = /^([a-zA-Z0-9-]+)$/g\n  \n      const validLabel = (\n        validLabelChars.test(label) &&\n        label.length < 64 &&\n        !label.startsWith('-') &&\n        !label.endsWith('-')\n      )\n  \n      return validLabel\n    })\n  \n    return isValid\n  }\n  module.exports = isValidHostname"
    },
    {
      "name": "Injectionstype",
      "type": "file",
      "extension": ".json",
      "content": "{\r\n    \"data\": [\r\n        {\r\n            \"title\": \"Remote FiLe Inclusion\",\r\n            \"slug\": \"Remote-FiLe-Inclusion\"\r\n        },\r\n        {\r\n            \"title\": \"Command Line\",\r\n            \"slug\": \"cmd\"\r\n        },\r\n        {\r\n            \"title\": \"cross site scripting (xss)\",\r\n            \"slug\": \"xss-injection\"\r\n        },\r\n        {\r\n            \"title\": \"HTML\",\r\n            \"slug\": \"html\"\r\n        },\r\n        {\r\n            \"title\": \"SQL\",\r\n            \"slug\": \"SQLI\"\r\n        },\r\n        {\r\n            \"title\": \"XML\",\r\n            \"slug\": \"XML-Injection\"\r\n        },\r\n        {\r\n            \"title\": \"Proxy\",\r\n            \"slug\": \"VPN\"\r\n        }\r\n    ]\r\n}"
    },
    {
      "name": "passwordlist",
      "type": "file",
      "extension": ".js",
      "content": "exports.passwordkeys = [\n  \"password\",\n  \"pass\",\n  \"pwd\",\n  \"user_password\",\n  \"login_password\",\n  \"authentication_password\",\n  \"passwd\",\n  \"userpass\",\n  \"loginpass\",\n  \"authpass\",\n  \"password1\",\n  \"newpassword\",\n  \"confirmpassword\",\n  \"oldpassword\",\n  \"hash\",\n];\n"
    },
    {
      "name": "ports.lists",
      "type": "file",
      "extension": ".json",
      "content": "{\n    \"data\": [\n        {\n            \"description\": \"Reserved\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"0\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"TCP Port Service Multiplexer (TCPMUX)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"CompressNET[2] Management Utility[3]\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"2\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"CompressNET[2] Compression Process[4]\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"3\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Unassigned\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"4\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Remote Job Entry\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"5\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Echo Protocol\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"7\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Unassigned\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"8\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Discard Protocol\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"9\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Unassigned\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"10\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Active Users (systat service)[5][6]\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"11\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Unassigned\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"12\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Daytime Protocol (RFC 867)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"13\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Unassigned\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"14\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Previously netstat service[5]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"15\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Unassigned\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"16\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Quote of the Day\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"17\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Message Send Protocol\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"18\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Character Generator Protocol (CHARGEN)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"19\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"FTP data transfer\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"20\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"FTP control (command)\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"21\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Secure Shell (SSH) â€” used for secure logins, file transfers (scp, sftp) and port forwarding\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"22\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Telnet protocolâ€”unencrypted text communications\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"23\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Priv-mailÂ : any private mail system.\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"24\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Simple Mail Transfer Protocol (SMTP)â€”used for e-mail routing between mail servers\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"25\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Unassigned\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"26\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"NSW User System FE\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"27\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"MSG ICP\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"29\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Display Support Protocol\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"33\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Any private printer server protocol\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"35\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"TIME protocol\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"37\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Resource Location Protocol[7] (RLP)â€”used for determining the location of higher level services from hosts on a network\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"39\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Unassigned\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"40\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"ARPA Host Name Server Protocol\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"42\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"WHOIS protocol\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"43\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"NI FTP[7]\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"47\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"TACACS Login Host protocol\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"49\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Remote Mail Checking Protocol[8]\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"50\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"IMP Logical Address Maintenance\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"51\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"XNS (Xerox Network Systems) Time Protocol\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"52\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Domain Name System (DNS)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"53\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"XNS (Xerox Network Systems) Clearinghouse\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"54\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"ISI Graphics Language (ISI-GL)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"55\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"XNS (Xerox Network Systems) Authentication\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"56\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Mail Transfer Protocol (RFC 780)\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"57\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"XNS (Xerox Network Systems) Mail\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"58\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"CI (Travelport) (formerly Covia) Comms Integrator\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"64\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Bootstrap Protocol (BOOTP) Server; also used by Dynamic Host Configuration Protocol (DHCP)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"67\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Bootstrap Protocol (BOOTP) Client; also used by Dynamic Host Configuration Protocol (DHCP)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"68\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Trivial File Transfer Protocol (TFTP)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"69\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Gopher protocol\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"70\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"NETRJS protocol\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"71\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"NETRJS protocol\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"72\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"NETRJS protocol\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"73\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"NETRJS protocol\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"74\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"priv-rjs protocol which is considered unsafe by Google Chrome[10]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"77\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Finger protocol\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"79\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Hypertext Transfer Protocol (HTTP)\",\n            \"udp\": false,\n            \"status\": \"Official [11]\",\n            \"port\": \"80\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Torparkâ€”Onion routing\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"81\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Torparkâ€”Control\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"82\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Kerberosâ€”authentication system\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"88\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"dnsix (DoD Network Security for Information Exchange) Securit Attribute Token Map\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"90\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"WIP Message protocol\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"99\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"CyberGate RAT protocol\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"100\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"NIC host name\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"101\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"ISO-TSAP (Transport Service Access Point) Class 0 protocol;[12] also used by Digital Equipment Corporation DECnet (Phase V+) over TCP/IP\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"102\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"ACR/NEMA Digital Imaging and Communications in Medicine (DICOM)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"104\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"CCSO Nameserver Protocol (Qi/Ph)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"105\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Remote TELNET Service[13] protocol\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"107\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"SNA Gateway Access Server [1]\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"108\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Post Office Protocol v2 (POP2)\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"109\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Post Office Protocol v3 (POP3)\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"110\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"ONC RPC (Sun RPC)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"111\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Identâ€”Authentication Service/Identification Protocol,[14] used by IRC servers to identify users\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"113\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Simple File Transfer Protocol (SFTP)\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"115\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"UUCP Path Service\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"117\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"SQL (Structured Query Language) Services\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"118\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Network News Transfer Protocol (NNTP)â€”retrieval of newsgroup messages\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"119\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Network Time Protocol (NTP)â€”used for time synchronization\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"123\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Formerly Unisys Unitary Login, renamed by Unisys to NXEdit. Used by Unisys Programmer's Workbench for Clearpath MCP, an IDE for Unisys MCP software development\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"126\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"DCE endpoint resolution\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"135\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"NetBIOS NetBIOS Name Service\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"137\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"NetBIOS NetBIOS Datagram Service\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"138\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"NetBIOS NetBIOS Session Service\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"139\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Internet Message Access Protocol (IMAP)â€”management of email messages\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"143\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Background File Transfer Program (BFTP)[16]\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"152\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"SGMP, Simple Gateway Monitoring Protocol\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"153\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"SQL Service\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"156\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"DMSP, Distributed Mail Service Protocol[17]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"158\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Simple Network Management Protocol (SNMP)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"161\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Simple Network Management Protocol Trap (SNMPTRAP)[18]\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"162\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Print-srv, Network PostScript\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"170\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"VMNET (IBM z/VM, z/OS & z/VSE - Network Job Entry(NJE))\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"175\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"X Display Manager Control Protocol (XDMCP)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"177\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"BGP (Border Gateway Protocol)\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"179\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Internet Relay Chat (IRC)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"194\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"SMUX, SNMP Unix Multiplexer\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"199\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"AppleTalk Routing Maintenance\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"201\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"The Quick Mail Transfer Protocol\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"209\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"ANSI Z39.50\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"210\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Internetwork Packet Exchange (IPX)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"213\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Message posting protocol (MPP)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"218\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Internet Message Access Protocol (IMAP), version 3\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"220\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"ESRO, Efficient Short Remote Operations\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"259\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"BGMP, Border Gateway Multicast Protocol\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"264\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"http-mgmt\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"280\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"ThinLinc Web Access\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"300\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Novastor Online Backup\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"308\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Mac OS X Server Admin (officially AppleShare IP Web administration)\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"311\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"PKIX TSP, Time Stamp Protocol\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"318\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Precision time protocol event messages\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"319\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Precision time protocol general messages\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"320\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"MATIP-Type A, Mapping of Airline Traffic over Internet Protocol\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"350\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"MATIP-Type B, Mapping of Airline Traffic over Internet Protocol\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"351\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"ODMR, On-Demand Mail Relay\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"366\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Rpc2portmap\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"369\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"codaauth2â€”Coda authentication server\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"370\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"ClearCase albd\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"371\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"HP data alarm manager\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"383\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"A Remote Network Server System\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"384\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"AURP, AppleTalk Update-based Routing Protocol[20]\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"387\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Lightweight Directory Access Protocol (LDAP)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"389\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Digital Equipment Corporation DECnet (Phase V+) over TCP/IP\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"399\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"UPS Uninterruptible Power Supply\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"401\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Service Location Protocol (SLP)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"427\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Hypertext Transfer Protocol over TLS/SSL (HTTPS)\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"443\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"SNPP, Simple Network Paging Protocol (RFC 1568)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"444\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Microsoft-DS Active Directory, Windows shares\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"445\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Kerberos Change/Set password\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"464\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"URL Rendesvous Directory for SSM (Cisco protocol)\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"465\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"tcpnethaspsrv (Aladdin Knowledge Systems Hasp services, TCP/IP version)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"475\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"GoGlobal TCP/IP version)\",\n            \"udp\": true,\n            \"status\": \"\",\n            \"port\": \"491\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Dantz Retrospect\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"497\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Internet Security Association and Key Management Protocol (ISAKMP)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"500\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Modbus, Protocol\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"502\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Citadelâ€”multiservice protocol for dedicated clients for the Citadel groupware system\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"504\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Rexec, Remote Process Execution\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"512\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"rlogin\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"513\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Shellâ€”used to execute non-interactive commands on a remote system (Remote Shell, rsh, remsh)\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"514\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Line Printer Daemonâ€”print service\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"515\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Talk\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"517\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"NTalk\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"518\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"efs, extended file name server\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"520\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"NetWare Core Protocol (NCP) is used for a variety things such as access to primary NetWare server resources, Time Synchronization, etc.\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"524\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Timed, Timeserver\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"525\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"RPC\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"530\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"AOL Instant Messenger\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"531\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"netnews\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"532\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"netwall, For Emergency Broadcasts\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"533\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"UUCP (Unix-to-Unix Copy Protocol)\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"540\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"commerce (Commerce Applications)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"542\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"klogin, Kerberos login\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"543\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"kshell, Kerberos Remote shell\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"544\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"OSIsoft PI (VMS), OSISoft PI Server Client Access\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"545\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"DHCPv6 client\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"546\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"DHCPv6 server\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"547\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Apple Filing Protocol (AFP) over TCP\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"548\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"new-rwho, new-who[21]\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"550\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Real Time Streaming Protocol (RTSP)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"554\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Remotefs, RFS, rfs_server\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"556\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"rmonitor, Remote Monitor\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"560\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"monitor\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"561\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"NNTP protocol over TLS/SSL (NNTPS)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"563\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"e-mail message submission[22] (SMTP)\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"587\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"FileMaker 6.0 (and later) Web Sharing (HTTP Alternate, also see port 80)\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"591\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"HTTP RPC Ep Map, Remote procedure call over Hypertext Transfer Protocol, often used by Distributed Component Object Model services and Microsoft Exchange Server\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"593\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"TUNNEL profile,[23] a protocol for BEEP peers to form an application layer tunnel\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"604\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"ASF Remote Management and Control Protocol (ASF-RMCP)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"623\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Internet Printing Protocol (IPP)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"631\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"RLZ DBase\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"635\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Lightweight Directory Access Protocol over TLS/SSL (LDAPS)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"636\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"MSDP, Multicast Source Discovery Protocol\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"639\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"SupportSoft Nexus Remote Command (control/listening): A proxy gateway connecting remote control traffic\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"641\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"LDP, Label Distribution Protocol, a routing protocol used in MPLS networks\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"646\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"DHCP Failover protocol[24]\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"647\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"RRP (Registry Registrar Protocol)[25]\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"648\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"IEEE-MMS\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"651\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"SupportSoft Nexus Remote Command (data): A proxy gateway connecting remote control traffic\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"653\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Media Management System (MMS) Media Management Protocol (MMP)[26]\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"654\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"IBM RMC (Remote monitoring and Control) protocol, used by System p5 AIX Integrated Virtualization Manager (IVM)[27] and Hardware Management Console to connect managed logical partitions (LPAR) to enable dynamic partition reconfiguration\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"657\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Mac OS X Server administration\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"660\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Doom, first online first-person shooter\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"666\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"ACAP (Application Configuration Access Protocol)\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"674\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"REALM-RUSD (ApplianceWare Server Appliance Management Protocol)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"688\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"MS Exchange Routing\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"691\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Linux-HA High availability Heartbeat\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"694\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"IEEE-MMS-SSL (IEEE Media Management System over SSL)[28]\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"695\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"OLSR (Optimized Link State Routing)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"698\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"EPP (Extensible Provisioning Protocol), a protocol for communication between domain name registries and registrars (RFC 5734)\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"700\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"LMP (Link Management Protocol (Internet)),[29] a protocol that runs between a pair of nodes and is used to manage traffic engineering (TE) links\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"701\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"IRIS[30][31] (Internet Registry Information Service) over BEEP (Blocks Extensible Exchange Protocol)[32] (RFC 3983)\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"702\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Secure Internet Live Conferencing (SILC)\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"706\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Cisco Tag Distribution Protocol[33][34][35]â€”being replaced by the MPLS Label Distribution Protocol[36]\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"711\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Topology Broadcast based on Reverse-Path Forwarding routing protocol (TBRPF) (RFC 3684)\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"712\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Kerberos (protocol) administration\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"749\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"kerberos-iv, Kerberos version IV\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"750\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"kerberos_master, Kerberos authentication\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"751\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"passwd_server, Kerberos Password (kpasswd) server\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"752\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Reverse Routing Header (rrh)[37]\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"753\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"tell send\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"754\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"krbupdate [kreg], Kerberos registration\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"760\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Conserver serial-console management server\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"782\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"SpamAssassin spamd daemon\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"783\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"mdbe daemon\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"800\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Microsoft Net.TCP Port Sharing Service\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"808\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Certificate Management Protocol[38]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"829\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Adobe Flash[39]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"843\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"DHCP Failover protocol\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"847\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Group Domain Of Interpretation (GDOI) protocol\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"848\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"iSCSI (RFC 3720)\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"860\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"OWAMP control (RFC 4656)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"861\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"TWAMP control (RFC 5357)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"862\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"rsync file synchronization protocol\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"873\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"cddbp, CD DataBase (CDDB) protocol (CDDBP)\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"888\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Brocade SMI-S RPC\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"897\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Brocade SMI-S RPC SSL\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"898\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Samba Web Administration Tool (SWAT)\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"901\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"ideafarm-door\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"902\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"VMware Remote Console [40]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"903\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"VMware Server Alternate (if 902 is in use, i.e. SUSE linux)\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"904\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Network Console on Acid (NCA)â€”local tty redirection over OpenSSH\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"911\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Network File System (protocol) Service\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"944\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Domain Name System (DNS) RNDC Service\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"953\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Network File System (protocol) over IPv6 Service\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"973\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"SofaWare Technologies Remote HTTPS management for firewall devices running embedded Check Point FireWall-1 software\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"981\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Microsoft Corporation Microsoft Windows SBS SharePoint\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"987\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"FTPS Protocol (data): FTP over TLS/SSL\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"989\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"FTPS Protocol (control): FTP over TLS/SSL\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"990\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"NAS (Netnews Administration System)[41]\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"991\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"TELNET protocol over TLS/SSL\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"992\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Internet Message Access Protocol over TLS/SSL (IMAPS)\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"993\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Post Office Protocol 3 over TLS/SSL (POP3S)\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"995\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"ScimoreDB Database System\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"999\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Opsware agent (aka cogbot)\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"1002\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"ThinLinc Web Administration\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"1010\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Reserved[1]\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1023\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Reserved[1]\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1024\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"NFS or IIS or Teradata\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"1025\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Often used by Microsoft DCOM services\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"1026\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Native IPv6 behind IPv4-to-IPv4 NAT Customer Premises Equipment (6a44)[42]\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1027\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Often used by Microsoft DCOM services\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"1029\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"nim, IBM AIX Network Installation Manager (NIM)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1058\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"nimreg, IBM AIX Network Installation Manager (NIM)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1059\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"SOCKS proxy\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"1080\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"WebObjects\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1085\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"rmiactivation, RMI Activation\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1098\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"rmiregistry, RMI Registry\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1099\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Reserved[1]\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1109\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"EasyBits School network discovery protocol (for Intel's CMPC platform)\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"1110\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Used by some Blizzard games[43]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"1119\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"AutoNOC protocol\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1140\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"phone, conference calling\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"1167\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Tripwire\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1169\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Perceptive Automation Indigo Home automation server\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"1176\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"AcceleNet Intelligent Transfer Protocol\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1182\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"OpenVPN\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1194\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"The cajo project Free dynamic transparent distributed computing in Java\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1198\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"scol, protocol used by SCOL 3D virtual worlds server to answer world name resolution client request[44]\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"1200\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Kazaa\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"1214\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Uvora Online\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"1217\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"QuickTime Streaming Server administration\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"1220\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"TGP, TrulyGlobal Protocol, also known as \\\"The Gur Protocol\\\" (named for Gur Kimchi of TrulyGlobal)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1223\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"first-defense, Remote systems monitoring service from Nexum, Inc\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1232\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"VLC media player default port for UDP/RTP stream\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"1234\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Symantec BindView Control UNIX Default port for TCP management server connections\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"1236\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Nessus Security Scanner\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1241\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Microsoft System Center Operations Manager (SCOM) (formerly Microsoft Operations Manager (MOM)) agent\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1270\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"IPSec (Internet Protocol Security)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1293\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Palmer Performance OBDNet\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"1301\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Altera Quartus jtagd\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"1309\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Dell OpenManage HTTPS\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"1311\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Xbiim (Canvii server)[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"1313\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Festival Speech Synthesis System\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"1314\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"AMX ICSP\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"1319\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Men and Mice DNS\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1337\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Internet Content Adaptation Protocol\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"1344\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"IBM Lotus Notes/Domino[45] (RPC) protocol\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"1352\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"cadsi-lm, LMS International (formerly Computer Aided Design Software, Inc. (CADSI)) LM\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1387\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"IBM WebSphere MQ (formerly known as MQSeries)\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"1414\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Timbuktu Service 1 Port\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1417\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Timbuktu Service 2 Port\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1418\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Timbuktu Service 3 Port\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1419\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Timbuktu Service 4 Port\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1420\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Reverse Gossip Transport Protocol (RGTP), used to access a General-purpose Reverse-Ordered Gossip Gathering System (GROGGS) bulletin board, such as that implemented on the Cambridge University's Phoenix system\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"1431\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"MSSQL (Microsoft SQL Server database management system) Server\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"1433\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"MSSQL (Microsoft SQL Server database management system) Monitor\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1434\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Solarwinds Kiwi Log Server\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"1470\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Citrix XenApp Independent Computing Architecture (ICA) thin client protocol[46]\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"1494\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"NetGuard GuardianPro firewall (NT4-based) Remote Management\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"1500\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"NetGuard GuardianPro firewall (NT4-based) Authentication Client\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"1501\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Windows Live Messenger (Whiteboard and Application Sharing)\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"1503\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Microsoft Windows Internet Name Service (WINS)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1512\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Garena Garena Gaming Client\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1513\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"nCube License Manager\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"1521\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"ingreslock, ingres\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1524\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Oracle database common alternative for listener\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"1526\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Apache Derby Network Server default port\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"1527\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"IBM Sametime IMâ€”Virtual Places Chat Microsoft SQL Server\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"1533\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Eclipse Target Communication Framework (TCF) agent discovery[47]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"1534\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Laplink\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1547\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"3m-image-lm Image Storage license manager 3M Company\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1550\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"MIL STD 2045-47001 VMF\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1581\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Pervasive PSQL\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"1583\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Cisco VQP (VLAN Query Protocol) / VMPS\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"1589\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"GE Smallworld Datastore Server (SWMFS/Smallworld Master Filesystem)[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"1590\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"iSketch[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"1627\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"radius auth, RADIUS authentication protocol (default for Cisco and Juniper Networks RADIUS servers, but see port 1812 below)\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"1645\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"radius acct, RADIUS authentication protocol (default for Cisco and Juniper Networks RADIUS servers, but see port 1813 below)\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"1646\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Perforce\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"1666\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Novell GroupWise clients in client/server access mode\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1677\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Microsoft Key Management Service for KMS Windows Activation\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"1688\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Cisco RADIUS Change of Authorization for TrustSec[citation needed]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"1700\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Layer 2 Forwarding Protocol (L2F) & Layer 2 Tunneling Protocol (L2TP)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1701\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Windward Studios\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1707\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"America's Army Massively multiplayer online game (MMO)\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"1716\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"H.323 Registration and alternate communication\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1719\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"H.323 Call signalling\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"1720\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Microsoft Point-to-Point Tunneling Protocol (PPTP)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1723\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Valve Steam Client\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"1725\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Microsoft Media Services (MMS, ms-streaming)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1755\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"cft-0\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1761\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"cft-1 to cft-7\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1762â€“1768\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Federal Emergency Management Information Systemhttp://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xml\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1776\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Moby[citation needed]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"1792\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Microsoft Message Queuing\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1801\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"radius, RADIUS authentication protocol\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1812\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"radacct, RADIUS accounting protocol\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1813\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"MSNP (Microsoft Notification Protocol), used by the Microsoft Messenger service and a number of Instant Messaging clients\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"1863\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"MQ Telemetry Transport (MQTT), formerly known as MQIsdp (MQSeries SCADA protocol)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1883\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Leonardo over IP Pro2col Ltd\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"1886\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Microsoft SSDP Enables discovery of UPnP devices\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1900\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"IBM Tivoli monitoring console\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"1920\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Adobe Systems Macromedia Flash Real Time Messaging Protocol (RTMP) \\\"plain\\\" protocol\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"1935\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"SentinelSRM (hasplm), Aladdin HASP License Manager\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1947\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Cisco IOS IP Service Level Agreements (IP SLAs) Control Protocol[citation needed]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"1967\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Netop Business Solutions Netop Remote Control\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1970\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Netop Business Solutions Netop School\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1971\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"InterSystems CachÃ©\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1972\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Cisco TCO (Documentation)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1975â€“1977\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Big Brother and related Xymon (formerly Hobbit) System and Network Monitor\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"1984\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Cisco HSRP\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1985\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Cisco STUN-SDLC (Serial Tunnelingâ€”Synchronous Data Link Control) protocol\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1994\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Chizmo Networks Transfer Tool[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"1997\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Cisco X.25 over TCP (XOT) service\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"1998\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Cisco SCCP (Skinny)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"2000\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"CAPTAN Test Stand System\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"2001\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Secure Access Control Server (ACS) for Windows[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"2002\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Artemis: Spaceship Bridge Simulator default port\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"2010\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Remoticus Server\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"2012-2013\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Oracle services for Microsoft Transaction Server\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"2030\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"mobrien-chat(http://chat.mobrien.com:2031)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"2031\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Mail.Ru Agent communication protocol[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"2041\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Network File System\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"2049\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"knetd Kerberos de-multiplexor\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"2053\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Civilization 4 multiplayer\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"2056\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Vertel VMF SA (i.e. App.. SpeakFreely)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"2074\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Autodesk NLM (FLEXlm)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"2080\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Infowave Mobility Server\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"2082\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Secure Radius Service (radsec)\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"2083\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"GNUnet\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"2086\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"WebHost Manager default SSL\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"2087\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"CPanel default Web mail\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"2095\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"CPanel default SSL Web mail\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"2096\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"zephyr-srv Project Athena Zephyr Notification Service server\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"2102\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"zephyr-clt Project Athena Zephyr Notification Service serv-hm connection\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"2103\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"zephyr-hm Project Athena Zephyr Notification Service hostmanager\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"2104\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"IBM MiniPay\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"2105\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"MIS Department\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"2115\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"FTP proxy[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"2121\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"TDMoIP (RFC 5087)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"2142\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Iron Mountain LiveVault Agent[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"2144\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Iron Mountain LiveVault Agent[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"2145\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Talari Reliable Protocol\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"2156\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"APC Agent\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"2160\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"APC Agent\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"2161\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"EForward-document transport system\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"2181\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"TiVoConnect Beacon[citation needed]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"2190\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Apple Push Notification service Link\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"2195\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Apple Push Notification - Feedback Link\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"2196\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Tuxanci game server[48]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"2200\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"NOAAPORT Broadcast Network\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"2210\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"EMWIN\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"2211\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"LeeCO POS Server Service\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"2212\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"NetIQ NCAP Protocol\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"2219\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"NetIQ End2End\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"2220\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"ESET Anti-virus updates\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"2221\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"DirectAdmin default & ESET Remote Administration\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"2222\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Microsoft Office OS X antipiracy network monitor[citation needed]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"2223\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"CoMotion Master\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"2261\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"CoMotion Backup\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"2262\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"HP System Management Redirect to port 2381[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"2301\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"ArmA multiplayer (default for game)\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"2302\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"ArmA multiplayer (default for server reporting) (default port for game +1)\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"2303\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"ArmA multiplayer (default for VoN) (default port for game +3)\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"2305\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Philips TVs based on jointSPACE [49]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"2323\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Default for BMC Software Control-M/Serverâ€”Configuration Agent, though often changed during installation\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"2369\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Default for BMC Software Control-M/Serverâ€”to allow the Control-M/Enterprise Manager to connect to the Control-M/Server, though often changed during installation\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"2370\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"KGS Go Server\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"2379\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"HP Insight Manager default for Web server[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"2381\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"FileMaker Data Access Layer (ODBC/JDBC)\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"2399\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"CVS version control system\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"2401\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"IEC 60870-5 -104, used to send electric power telecontrol messages between two systems via directly connected data circuits\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"2404\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Westell Remote Access\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"2420\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"OrientDB database listening for Binary client connections\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"2424\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Cisco MGCP\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"2427\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"ovwdbâ€”OpenView Network Node Manager (NNM) daemon\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"2447\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"LSI RAID Management formerly Symbios Logic\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"2463\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"OrientDB database listening for HTTP client connections\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"2480\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Oracle database listening for unsecure client connections to the listener, replaces port 1521\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"2483\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Oracle database listening for SSL client connections to the listener\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"2484\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"THEÃ’SMESSENGER listening for TheÃ²sMessenger client connections\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"2500\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"TheosNet-Admin listening for TheÃ²sMessenger client connections\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"2501\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Willy\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"2518\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"SMTP alternate[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"2525\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"MADCAP - Multicast Address Dynamic Client Allocation Protocol\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"2535\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"EVault data protection services\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"2546\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"RunUOâ€”Ultima Online server\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"2593\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"new ICA (Citrix) â€”when Session Reliability is enabled, TCP port 2598 replaces port 1494[46]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"2598\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"SonicWALL anti-spam traffic between Remote Analyzer (RA) and Control Center (CC)\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"2599\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"TrackiT mobile device monitoring\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"2610\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"QPasa from MQSoftware\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"2612\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Solve Service\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"2636\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Sybase database listener[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"2638\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"HDL Server from CNRI\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"2641\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Tragic\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"2642\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Citel / MCK IVPIP\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"2698\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"KnowShowGo P2P\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"2700â€“2800\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"XBT Tracker\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"2710\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"NetIQ Monitor Console\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"2735\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"corbaloc:iiop URL, per the CORBA 3.0.3 specification\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"2809\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"gsi ftp, per the GridFTP specification\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"2811\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"I2P Basic Open Bridge API\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"2827\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Norman Proprietary Event Protocol NPEP\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"2868\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Megaco text H.248\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"2944\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Megaco binary (ASN.1) H.248\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"2945\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"gpsd GPS daemon\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"2947\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"WAP-push Multimedia Messaging Service (MMS)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"2948\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"WAP-pushsecure Multimedia Messaging Service (MMS)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"2949\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Symantec AntiVirus Corporate Edition\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"2967\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Miralix License server[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"3000\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Miralix Phone Monitor[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"3001\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Miralix CSTA[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"3002\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Miralix GreenBox API[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"3003\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Miralix InfoLink[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"3004\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Miralix TimeOut[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"3005\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Miralix SMS Client Connector[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"3006\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Miralix OM Server[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"3007\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Miralix Proxy[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"3008\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Miralix IVR and Voicemail[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"3017\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"netpd.org[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"3025\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"NetPanzer\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"3030\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"PandaROM Update Service Port\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"3040\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"gds_db (Interbase/Firebird)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"3050\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Galaxy Server (Gateway Ticketing Systems)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"3051\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"APC PowerChute Network [1]\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"3052\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"NAT / Xbox LIVE and/or Games for Windows - LIVE\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"3074\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"SMAUSA OpCon Scheduler as the default listen port[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"3100\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"BlackBerry Enterprise Server communication to cloud\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"3101\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"D2000 Entis/Actis Application server\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"3119\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Web caches and the default for the Squid (software)\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"3128\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"devpi Python package server [51]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"3141\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"SFLM (Standard Floating License Manager)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"3162\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"FCIP (Fiber Channel over Internet Protocol)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"3225\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"WhiskerControl research control protocol\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"3233\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Galaxy Network Service (Gateway Ticketing Systems)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"3235\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"iSCSI target\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"3260\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"msft-gc, Microsoft Global Catalog (LDAP service which contains data from Active Directory forests)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"3268\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"msft-gc-ssl, Microsoft Global Catalog over SSL (similar to port 3268, LDAP over SSL)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"3269\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Apple Remote Desktop reporting (officially Net Assistant, referring to an earlier product)\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"3283\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Used by VATSIM, the Virtual Air Traffic Simulation network for voice communication.\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"3290\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"SAP-Router (routing application proxy for SAP R/3)\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"3299\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Debate Gopher backend database system[citation needed]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"3300\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"odette-ftp, Odette File Transfer Protocol (OFTP)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"3305\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"MySQL database system\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"3306\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Verisys file integrity monitoring software\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"3313\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Network Caller ID server\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"3333\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"GTP' 3GPP GSM/UMTS CDR logging protocol\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"3386\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Microsoft Terminal Server (RDP) officially registered as Windows Based Terminal (WBT) - Link\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"3389\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Novell NDPS Printer Agent\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"3396\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"xmlBlaster\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"3412\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Xware xTrm Communication Protocol\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"3423\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Xware xTrm Communication Protocol over SSL\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"3424\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"[RSVP] Reservation Protocol\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"3455\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"STUN, a protocol for NAT traversal[53]\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"3478\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Slim Devices discovery protocol\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"3483\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Network UPS Tools (NUT)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"3493\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Smartcard Port\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"3516\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Microsoft Message Queuing\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"3527\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"SMTP alternate[55]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"3535\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"ni-visa-remote[citation needed]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"3537\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Teredo tunneling\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"3544\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"ComCam IO Port\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"3605\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Splitlock Server\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"3606\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"distributed compiler\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"3632\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Digital Audio Access Protocol (DAAP)â€”used by Appleâ€™s iTunes and AirPort Express\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"3689\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Subversion (SVN) version control system\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"3690\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Web Services Dynamic Discovery (WS-Discovery), used by various components of Windows Vista\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"3702\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Used by some Blizzard games[43]\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"3724\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"VoIP program used by Ventrilo\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"3784\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"VoIP program used by Ventrilo\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"3785\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"RADIUS change of authorization\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"3799\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Used by HGG programs[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"3800\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Used by RedSeal Networks client/server connection[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"3825\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"WarMUX game server\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"3826\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Used by RedSeal Networks client/server connection[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"3835\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Diameter base protocol (RFC 3588)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"3868\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Oracle Management Remote Agent[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"3872\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"IGRS\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"3880\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Remote Administrator\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"3899\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"udt_os, IBM UniData UDT OS[56]\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"3900\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"EMCADS service, a Giritech product used by G/On\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"3945\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"OpenTTD game (masterserver and content service)\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"3978\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"OpenTTD game\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"3979\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Norman distributed scanning service\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"3999\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Diablo II game\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"4000\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Microsoft Ants game\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"4001\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"PrintBuzzer printer monitoring socket server[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"4007\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"protocol information and warnings\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"4018\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"IBM Rational Developer for System z Remote System Explorer Daemon\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"4035\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Solaris lockd NFS lock daemon/manager\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"4045\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Minger Email Address Verification Protocol[57]\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"4069\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"OpenCORE Remote Control Service\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"4089\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"PxPlus Client server interface ProvideX\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"4093\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Ascom Timeplex BRE (Bridge Relay Element)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"4096\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"WatchGuard authentication applet default\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"4100\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Shofar (ShofarNexus)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"4105\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Xgrid\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"4111\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Smartcard-TLS\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"4116\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Microsoft Remote Web Workplace administration\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"4125\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Teradici PCoIP\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"4172\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"TinyMUD and various derivatives\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"4201\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Cisco Audio Session Tunneling[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"4224\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Aleph One (game)\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"4226\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Reverse Battle Tetris\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"4242\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"CrashPlan\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"4243\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Referral Whois (RWhois) Protocol[58]\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"4321\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Lincoln Electric's ArcLink/XT[citation needed]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"4323\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Axence nVision [59]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"4433-4436\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"I2P HTTP/S proxy\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"4444-4445\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Integrated Client Message Service (ICMS)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"4486\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"IPSec NAT Traversal (RFC 3947)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"4500\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Microsoft Silverlight connectable ports under non-elevated trust\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"4502-4534\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Armagetron Advanced default server port\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"4534\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Sinatra default server port in development mode (HTTP)\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"4567\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Inter-Asterisk eXchange (IAX2)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"4569\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"QualiSystems TestShell Suite Services\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"4610â€“4640\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"OrbitNet Message Service\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"4662\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Google Desktop Search\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"4664\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Tardis Beacon Tcp-control of first worm that re-writes time by compiling from code in cleartext.\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"4665\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Default for older versions of eMule[60]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"4672\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"eMule optional web interface[60]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"4711\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"McAfee Web Gateway 7 - Default GUI Port HTTPS[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"4712\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"PulseAudio sound server\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"4713\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Computer Associates Desktop and Server Management (DMP)/Port Multiplexer [61]\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"4728\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Gearman' job server\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"4730\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Digital Airways' OHM server's commands to mobile devices (used mainly for binary SMS)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"4732\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Apprentice\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"4747\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"BladeLogic Agent\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"4750\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"SIMON (service and discovery)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"4753\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"OPC UA TCP Protocol for OPC Unified Architecture from OPC Foundation\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"4840\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"OPC UA TCP Protocol over TLS/SSL for OPC Unified Architecture from OPC Foundation\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"4843\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Web Fresh Communication, Quadrion Software & Odorless Entertainment\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"4847\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"LysKOM Protocol A\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"4894\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Radmin remote administration tool\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"4899\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Munin Resource Monitoring Tool\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"4949\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Cylon Controls UC32 Communications Port\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"4950\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Solar Data Log (JK client app for PV solar inverters)[citation needed]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"4982\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Home FTP Server web Interface Default Port[citation needed]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"4993\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"commplex-main\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"5000\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"commplex-link\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"5001\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"SOLICARD ARX[63]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"5002\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"FileMaker\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"5003\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"RTP (Real-time Transport Protocol) media data (RFC 3551, RFC 4571)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"5004\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"RTP (Real-time Transport Protocol) control protocol (RFC 3551, RFC 4571)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"5005\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Registered to: TelePath (the IBM FlowMark workflow-management system messaging platform)[65]\\nThe TCP port is now used for: IBM WebSphere MQ Workflow\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"5010\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"TelePath (the IBM FlowMark workflow-management system messaging platform)[65]\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"5011\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Sonic Robo Blast 2Â : Multiplayer[66]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"5029\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"AVM CAPI-over-TCP (ISDN over Ethernet tunneling)[citation needed]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"5031\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Android ADB server\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"5037\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Yahoo! Messenger\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"5050\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"ita-agent Symantec Intruder Alert[67]\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"5051\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Session Initiation Protocol (SIP)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"5060\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Session Initiation Protocol (SIP) over TLS\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"5061\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Binary Floor Control Protocol (BFCP),[68] published as RFC 4582, is a protocol that allows for an additional video channel (known as the content channel) alongside the main video channel in a video-conferencing call that uses SIP. Also used for Session Initiation Protocol (SIP) preferred port for PUBLISH on SIP Trunk to Cisco Unified Presence Server (CUPS)\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"5070\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Qpur Communication Protocol\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"5082\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Qpur File Protocol\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"5083\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"EPCglobal Low Level Reader Protocol (LLRP)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"5084\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"EPCglobal Low Level Reader Protocol (LLRP) over TLS\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"5085\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"SafeNet, Inc Sentinel LM, Sentinel RMS, License Manager, Client-to-Server\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"5093\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"SafeNet, Inc Sentinel LM, Sentinel RMS, License Manager, Server-to-Server\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"5099\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"IBM Tivoli Framework NetCOOL/Impact[69] HTTP Service\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"5104\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"A-Talk Common connection[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"5106\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"A-Talk Remote server connection[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"5107\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"VPOP3 Mail Server Webmail[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"5108\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"VPOP3 Mail Server Status[citation needed]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"5109\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"ProRat Server\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"5110\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Neverwinter Nights\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"5121\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"TorgaNET (Micronational Darknet)\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"5124\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"TorgaNET (Micronational Intelligence Darknet)\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"5125\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"ATMP Ascend Tunnel Management Protocol[70]\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"5150\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"ESRI SDE Instance\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"5151\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"BZFlag\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"5154\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"ConsoleWorks default UI interface[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"5176\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"ICQ and AOL Instant Messenger\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"5190\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Extensible Messaging and Presence Protocol (XMPP) client connection[71][72]\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"5222\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Extensible Messaging and Presence Protocol (XMPP) client connection over SSL\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"5223\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"HP Virtual Room Service\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"5228\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Control And Provisioning of Wireless Access Points (CAPWAP) CAPWAP control[73]\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"5246\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Control And Provisioning of Wireless Access Points (CAPWAP) CAPWAP data[73]\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"5247\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Extensible Messaging and Presence Protocol (XMPP) server connection[71][72]\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"5269\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Extensible Messaging and Presence Protocol (XMPP) XEP-0124: Bidirectional-streams Over Synchronous HTTP (BOSH)\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"5280\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Undo License Manager\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"5281\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Extensible Messaging and Presence Protocol (XMPP)[75]\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"5298\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Outlaws (1997 video game). Both UDP and TCP are reserved, but only UDP is used\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"5310\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"STUN, a protocol for NAT traversal (UDP is reserved)[53]\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"5349\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"NAT Port Mapping Protocolâ€”client-requested configuration for inbound connections through network address translators\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"5351\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Multicast DNS (mDNS)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"5353\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"LLMNRâ€”Link-Local Multicast Name Resolution, allows hosts to perform name resolution for hosts on the same local link (only provided by Windows Vista and Server 2008)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"5355\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Web Services for Devices (WSDAPI) (only provided by Windows Vista, Windows 7 and Server 2008)\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"5357\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"WSDAPI Applications to Use a Secure Channel (only provided by Windows Vista, Windows 7 and Server 2008)\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"5358\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Kega Fusion, a Sega multi-console emulator[76][77]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"5394\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"mftp, Stratacache OmniCast content delivery system MFTP file sharing protocol\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"5402\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"NetSupport Manager\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"5405\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"IBM Rational Synergy (Telelogic Synergy) (Continuus CM) Message Router\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"5412\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Wonderware SuiteLink service\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"5413\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"NetSupport Manager\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"5421\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"PostgreSQL database system\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"5432\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Bouwsoft file/webserver[78]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"5433\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Cisco Unified Video Advantage[citation needed]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"5445\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"OSIsoft PI Server Client Access\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"5450\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"OSIsoft PI Asset Framework Client Access\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"5457\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"OSIsoft PI Notifications Client Access\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"5458\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"IBM Cognos TM1 Admin server\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"5495\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Hotline tracker server connection\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"5498\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Hotline tracker server discovery\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"5499\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"VNC remote desktop protocolâ€”for incoming listening viewer, Hotline control connection\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"5500\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Hotline file transfer connection\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"5501\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Setiqueue Proxy server client for SETI@Home project\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"5517\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Hewlett-Packard Data Protector[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"5550\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Freeciv versions up to 2.0, Hewlett-Packard Data Protector, McAfee EndPoint Encryption Database Server, SAP, Default for Microsoft Dynamics CRM 4.0\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"5555\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Freeciv\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"5556\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Default for Tidal Enterprise Scheduler master-Socket used for communication between Agent-to-Master, though can be changed[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"5591\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"pcANYWHEREdata, Symantec pcAnywhere (version 7.52 and later[79])[80] data\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"5631\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"pcANYWHEREstat, Symantec pcAnywhere (version 7.52 and later) status\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"5632\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"IBM Lotus Sametime p2p file transfer\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"5656\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"NRPE (Nagios)\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"5666\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"NSCA (Nagios)\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"5667\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"AMQP\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"5672\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Mikrotik RouterOS Neighbor Discovery Protocol (MNDP)\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"5678\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Kaseya[citation needed]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"5721\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Operations Manager[81]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"5723\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"IDA Discover Port 1\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"5741\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"IDA Discover Port 2\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"5742\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"VNC remote desktop protocolâ€”for use over HTTP\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"5800\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Hewlett-Packard Support Automation (HP OpenView Self-Healing Services)[citation needed]\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"5814\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"COMIT SE (PCR)[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"5850\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Adeona client: communications to OpenDHT[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"5852\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Virtual Network Computing (VNC) remote desktop protocol (used by Apple Remote Desktop and others)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"5900\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Default for Tidal Enterprise Scheduler agent-Socket used for communication between Master-to-Agent, though can be changed[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"5912\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"TeamViewer remote desktop protocol\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"5938\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"CouchDB database server\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"5984\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"CVSup file update tool[82]\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"5999\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"X11â€”used between an X client and server over the network\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"6000\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"X11â€”used between an X client and server over the network\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"6001\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Default for BMC Software Control-M/Serverâ€”Socket used for communication between Control-M processesâ€”though often changed during installation\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"6005\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"JD Edwards EnterpriseOne ERP system JDENet messaging client listener\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"6009\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Arcserve backup\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"6050\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Arcserve backup\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"6051\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"iOperator Protocol Signal Port[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"6072\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"PDTPâ€”FTP like file server in a P2P network\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"6086\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Vizrt System\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"6100\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Backup Exec Agent Browser[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"6101\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"softcm, HP Softbench CM\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"6110\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"spc, HP Softbench Sub-Process Control\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"6111\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"\\\"dtspcd\\\"â€”a network daemon that accepts requests from clients to execute commands and launch applications remotely\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"6112\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Club Penguin Disney online game for kids, Used by some Blizzard games[43]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"6113\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"DameWare Remote Control\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"6129\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"WinMX (see also 6699)\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"6257\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"planet M.U.L.E.\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"6260\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Sybase Advantage Database Server\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"6262\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Hall Research Device discovery and configuration\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"6324\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"SFlow, sFlow traffic monitoring\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"6343\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"gnutella-svc, gnutella (FrostWire, Limewire, Shareaza, etc.)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"6346\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"gnutella-rtr, Gnutella alternate\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"6347\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"App Discovery and Access Protocol\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"6350\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"EMC CLARiiON\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"6389\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"PgBouncer - A connection pooler for PostgreSQL\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"6432\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Sun Grid Engineâ€”Qmaster Service\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"6444\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Sun Grid Engineâ€”Execution Service\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"6445\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Netop Business Solutions - NetOp Remote Control\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"6502\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Netop Business Solutions - NetOp School[citation needed]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"6503\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Syslog over TLS[83]\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"6514\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Elipse RPC Protocol (REC)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"6515\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Gobby (and other libobby-based software)\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"6522\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Gobby 0.5 (and other libinfinity-based software)\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"6523\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Paradigm Research & Development Jetnet[84] default\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"6543\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Speech-Dispatcher daemon\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"6560-6561\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"SANE (Scanner Access Now Easy)â€”SANE network scanner daemon\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"6566\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Windows Live FolderShare client\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"6571\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Music Player Daemon (MPD)\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"6600\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"odette-ftps, Odette File Transfer Protocol (OFTP) over TLS/SSL\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"6619\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"McAfee Network Agent[citation needed]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"6646\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Internet Relay Chat (IRC)\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"6660â€“6664\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Internet Relay Chat (IRC)\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"6665â€“6669\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Osorno Automation Protocol (OSAUT)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"6679\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"IRC SSL (Secure Internet Relay Chat)â€”often used\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"6697\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"WinMX (see also 6257)\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"6699\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Default for Tidal Enterprise Scheduler client-Socket used for communication between Client-to-Master, though can be changed[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"6702\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"AberMUD and derivatives default port\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"6715\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Polycom server broadcast[citation needed]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"6771\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Campbell Scientific Loggernet Software[85]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"6789\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"BitTorrent part of full range of ports used most often\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"6881â€“6887\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"MUSE\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"6888\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"BitTorrent part of full range of ports used most often\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"6889â€“6890\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"BitTorrent part of full range of ports used most often\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"6891â€“6900\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Windows Live Messenger (Voice)\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"6901\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"BitTorrent part of full range of ports used most often\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"6902â€“6968\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"acmsoda\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"6969\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"BitTorrent part of full range of ports used most often\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"6970â€“6999\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Default for Vuze's built in HTTPS Bittorrent Tracker\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"7000\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Avira Server Management Console\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"7001\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Default for BEA WebLogic Server's HTTPS server, though often changed during installation\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"7002\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Default for BMC Software Control-M/Server and Control-M/Agent for Agent-to-Server, though often changed during installation\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"7005\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Default for BMC Software Control-M/Server and Control-M/Agent for Server-to-Agent, though often changed during installation\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"7006\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Default for Cisco AON AMC (AON Management Console) [86]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"7010\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Database mirroring endpoints[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"7022\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Bryan Wilcutt T2-NMCS Protocol for SatCom Modems\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"7023\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Zimbra LMTP [mailbox]â€”local mail delivery\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"7025\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Zimbra conversion server\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"7047\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Sepialine Argos Communications port\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"7080\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Enemy Territory: Quake Wars\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"7133\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Peercast[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"7144\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Peercast[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"7145\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Tibia\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"7171\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Zimbra mysql [mailbox][citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"7306\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Zimbra mysql [logger][citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"7307\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Sibelius License Server\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"7312\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Web control interface for Folding@home v7.3.6 and later[87]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"7396\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"RTPS (Real Time Publish Subscribe) DDS Discovery\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"7400\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"RTPS (Real Time Publish Subscribe) DDS User-Traffic\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"7401\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"RTPS (Real Time Publish Subscribe) DDS Meta-Traffic\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"7402\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Rise: The Vieneo Province\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"7473\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"CPE WAN Management Protocol Technical Report 069\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"7547\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"ISL Online[88] communication protocol\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"7615\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Instrument Neutral Distributed Interface\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"7624\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"hddtemp - Utility to monitor hard drive temperature\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"7634\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"I2P anonymizing overlay network\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"7652-7654\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"I2P SAM Bridge Socket API\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"7655\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"I2P anonymizing overlay network\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"7656-7660\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"BrettspielWelt BSW Boardgame Portal\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"7670\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Aqumin AlphaVision Remote Command Interface[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"7676\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"P2P DC (RedHub)[citation needed]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"7700\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Killing Floor\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"7707\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Killing Floor\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"7708\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Killing Floor\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"7717\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"iChat server file transfer proxy\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"7777\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Bad Trip MUD[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"7778\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"GFI EventsManager 7 & 8[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"7787-7788\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Default used by Smartlaunch Internet Cafe Administration[89] software\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"7831\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"PowerSchool Gradebook Server[citation needed]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"7880\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Default that will be used by the iControl Internet Cafe Suite Administration software\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"7890\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Default for YSFlight server[90]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"7915\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Fixed port used for Adobe Flash Debug Player to communicate with a debugger (Flash IDE, Flex Builder or fdb).[91]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"7935\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"EMC2 (Legato) Networker or Sun Solstice Backup\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"7937-9936\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"iRDMI (Intel Remote Desktop Management Interface)[92]â€”sometimes erroneously used instead of port 8080\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"8000\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Commonly used for internet radio streams such as those using SHOUTcast\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8001\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Cisco Systems Unified Call Manager Intercluster[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8002\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"HTTP Alternate\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"8008\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"ajp13â€”Apache JServ Protocol AJP Connector\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8009\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"XMPP File transfers\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8010\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"HTTP/TCP Symon Communications Event and Query Engine[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8011-8013\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"HTTP/TCP Symon Communications Event and Query Engine[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8014\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"360Works SuperContainer[94]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8020\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Orthanc - Default HTTP Port for GUI\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8042\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"OpenERP Default HTTP port (web interface and xmlrpc calls)\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8069\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"OpenERP Legacy netrpc protocol\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8070\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Gadu-Gadu\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8074\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Killing Floor\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8075\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Default port for most Endless Online-based servers[citation needed]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"8078\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"HTTP alternate (http_alt)â€”commonly used for Web proxy and caching server, or for running a Web server as a non-root user\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"8080\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"HTTP alternate, VibeStreamer, e.g. McAfee ePolicy Orchestrator (ePO)\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8081\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"HELM Web Host Automation Windows Control Panel\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8086\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Hosting Accelerator Control Panel\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8087\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Asterisk (PBX) Web Configuration utility (GUI Addon)\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8088\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Splunk Daemon\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8089\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"HTTP Alternate (http_alt_alt)â€”used as an alternative to port 8080[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8090\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Console Gateway License Verification\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8100\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"JOSM Remote Control\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8111\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Check Point Cluster Control Protocol\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"8116\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Privoxyâ€”advertisement-filtering Web proxy\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"8118\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Polipo Web proxy\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"8123\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Sophos Remote Management System\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8192\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Sophos Remote Management System\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8193\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Sophos Remote Management System\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8194\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Bloomberg Application[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8195\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"GoToMyPC\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8200\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"VMware Server Management User Interface[95] (insecure Web interface).[96] See also port 8333\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8222\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"HTTPS listener for Apache Synapse [97]\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"8243\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"HTTP listener for Apache Synapse [97]\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"8280\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Winboxâ€”Default on a MikroTik RouterOS for a Windows application used to administer MikroTik RouterOS[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8291\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Teeworlds Server\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"8303\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"MultiBit, [8]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8331\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Bitcoin JSON-RPC server[98]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8332\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Bitcoin[99]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8333\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"cvp, Commvault Unified Data Management\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"8400\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"CyBro A-bus, Cybrotech Ltd.\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"8442\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"SW Soft Plesk Control Panel, Apache Tomcat SSL, Promise WebPAM SSL, McAfee ePolicy Orchestrator (ePO)\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8443\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"MapleStory Login Server\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8484\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"ColdFusion Macromedia/Adobe ColdFusion default and Duke Nukem 3Dâ€”default\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"8500\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"[9] DukesterX â€”default[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8501\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"MapleStory Game Server\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8585\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"MapleStory Game Server\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8586\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"MapleStory Game Server\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8587\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"MapleStory Game Server\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8588\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"MapleStory Game Server\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8589\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Wavestore CCTV protocol[100]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8601\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Wavestore Notification protocol[100]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"8602\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Lotus Traveller[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8642\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Ultra Fractal default server port for distributing calculations over network computers\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8691\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"SoftPerfect Bandwidth Manager\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"8701\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"SoftPerfect Bandwidth Manager\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"8702\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"TeamSpeakâ€”default\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"8767\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"TeamSpeakâ€”alternate\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"8768\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"EPOS Speech Synthesis System\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8778\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Nessus web\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8834\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Opera Unite server\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8840\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"cddbp-alt, CD DataBase (CDDB) protocol (CDDBP) alternate\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"8880\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Atlasz Informatics Research Ltd Secure Application Server[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8881\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Atlasz Informatics Research Ltd Secure Application Server[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8882\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Secure MQ Telemetry Transport (MQTT over SSL)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"8883\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"PPM3 (Padtec Management Protocol version 3)\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8886\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"HyperVM HTTP\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"8887\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"HyperVM HTTPS\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"8888\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"MAMP Server\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8889\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Transaction Warehouse Data Service (TWDS)\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"8937\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Default for Apache Solr [101]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8983\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"I2P Monotone Repository\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"8998\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Buffalo LinkSystem Web access[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"9000\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"ETL Service Manager[102]\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"9001\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Newforma Server comms\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"9002\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Pichat Serverâ€”Peer to peer chat software\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"9009\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"TISERVICEMANAGEMENT Numara Track-It!\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"9010\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"WiT WiT Services\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"9020\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"WiT WiT Services\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"9025\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Tor often used\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"9030\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"WebSphere Application Server Administration Console secure\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"9043\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Tor\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"9050\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Tor\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"9051\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"WebSphere Application Server Administration Console\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"9060\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"glrpc, Groove Collaboration software GLRPC\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"9080\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"WebSM\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"9090\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Openfire Administration Console (SSL Secured)\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"9091\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"PDL Data Stream\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"9100\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Bacula Director\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"9101\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Bacula File Daemon\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"9102\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Bacula Storage Daemon\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"9103\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Xadmin Control Daemon\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"9105\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Astergate Control Daemon\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"9106\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Astergate-FAX Control Daemon\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"9107\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"SSMP Message protocol\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"9110\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"MXit Instant Messenger\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"9119\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Catamount Software - PocketMoney Sync[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"9191\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Avtex LLC - qStats\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"9199\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Sony PlayStation RemotePlay[103]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"9293\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"IBM Cognos 8 SOAP Business Intelligence and Performance Management\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"9300\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"D-Link Shareport Share storage and MFP printers\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"9303\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Sphinx Native API\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"9306\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Sony PlayStation Vita Host Collaboration WiFi Data Transfer[104]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"9309\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Sphinx SphinxQL\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"9312\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"git, Git pack transfer service\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"9418\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"MooseFS distributed file systemâ€”master server to chunk servers\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"9420\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"MooseFS distributed file systemâ€”master server to clients\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"9421\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"MooseFS distributed file systemâ€”chunk servers to clients\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"9422\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"mngsuite, LANDesk Management Suite Remote Control\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"9535\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"laes-bf, IP Fabrics Surveillance buffering function\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"9536\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Omron FINS, OMRON FINS PLC communication\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"9600\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Spiceworks Desktop, IT Helpdesk Software\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"9675\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Spiceworks Desktop, IT Helpdesk Software\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"9676\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"CCNx\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"9695\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"WebDAV Source\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"9800\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Club Penguin Disney online game for kids\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"9875\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"MonkeyCom[citation needed]\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"9898\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"TeamSpeak 3 server default (voice) port (for the conflicting service see the IANA list)\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"9987\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Ryan's App \\\"Ryan's App\\\" Trading Software\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"9996\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"The Palace \\\"The Palace\\\" Virtual Reality Chat software.â€”5\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"9998\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Hydranodeâ€”edonkey2000 TELNET control\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"9999\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Webminâ€”Web-based administration tool for Unix-like systems\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"10000\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Lantronix UDS-10/UDS100[106] RS-485 to Ethernet Converter default\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"10001\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Octopus Multiplexer, primary port for the CROMP protocol, which provides a platform-independent means for communication of objects across a network\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"10008\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Cross Fire, a multiplayer online First Person Shooter[citation needed]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"10009\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Open Object Rexx (ooRexx) rxapi daemon\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"10010\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"AIX,NeXT, HPUXâ€”rexd daemon control[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"10017\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Zimbra smtp [mta]â€”to amavis from postfix[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"10024\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Zimbra smtp [mta]â€”back to postfix from amavis[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"10025\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Zabbix-Agent\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"10050\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Zabbix-Trapper\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"10051\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"NMEA 0183 Navigational Data. Transport of NMEA 0183 sentences over TCP or UDP\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"10110\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"NetIQ Endpoint\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"10113\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"NetIQ Qcheck\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"10114\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"NetIQ Endpoint\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"10115\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"NetIQ VoIP Assessor\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"10116\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Intuit Quickbooks client\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"10172\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"FRISK Software International's fpscand virus scanning daemon for Unix platforms [107]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"10200\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"FRISK Software International's f-protd virus scanning daemon for Unix platforms [108]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"10201â€“10204\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"VoiceIP-ACS UMP default device provisioning endpoint[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"10301\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"VoiceIP-ACS UMP default device provisioning endpoint (SSL)[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"10302\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Lock-on: Modern Air Combat[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"10308\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"SWAT 4 Dedicated Server[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"10480\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Farming Simulator 2011 Default Server[citation needed]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"10823\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Jungle Disk (this port is opened by the Jungle Disk Monitor service on the localhost)[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"10891\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"metasys ( Johnson Controls Metasys java AC control environment )[citation needed]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"11001\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"ACR/NEMA Digital Imaging and Communications in Medicine (DICOM)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"11112\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Tunngle\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"11155\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"memcached\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"11211\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Savage:Battle for Newerth Server Hosting[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"11235\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Blood Quest Online Server[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"11294\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"OpenPGP HTTP key server\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"11371\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"IPStor Server management communication\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"11576\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"ElevateDB default database port [109]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"12010\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Axence nVision [59]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"12011\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Axence nVision [59]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"12012\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Audition Online Dance Battle, Korea Server\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"12013\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Linden Lab viewer to sim on SecondLife[citation needed]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"12035\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"GELF Protocol\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"12201\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Light Weight Access Point Protocol (LWAPP) LWAPP data (RFC 5412)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"12222\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Light Weight Access Point Protocol (LWAPP) LWAPP control (RFC 5412)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"12223\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"NetBusâ€”remote administration tool (often Trojan horse). Also used by NetBuster. Little Fighter 2 (TCP).\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"12345\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"NSClient/NSClient++/NC_Net (Nagios)\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"12489\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"LogMeIn Hamachi (VPN tunnel software; also port 32976)â€”used to connect to Mediation Server (bibi.hamachi.cc); will attempt to use SSL (TCP port 443) if both 12975 & 32976 fail to connect\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"12975\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Takenaka RDI Mirror World on SecondLife[citation needed]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"12998â€“12999\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Linden Lab viewer to sim on SecondLife[citation needed]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"13000â€“13050\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Cross Fire, a multiplayer online First Person Shooter[citation needed]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"13008\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Default[110] for BMC Software Control-M/Enterprise Manager Corba communication, though often changed during installation\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"13075\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Ontolux Ontolux 2D\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"13195-13196\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Ã†therNet peer-to-peer networking[citation needed]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"13337-13340\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Symantec NetBackupâ€”bprd (formerly VERITAS)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"13720\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Symantec NetBackupâ€”bpdbm (formerly VERITAS)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"13721\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Symantec Network Utilityâ€”vnetd (formerly VERITAS)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"13724\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Symantec NetBackupâ€”bpcd (formerly VERITAS)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"13782\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Symantec VOPIED protocol (formerly VERITAS)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"13783\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Symantec NetBackup Databaseâ€”nbdb (formerly VERITAS)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"13785\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Symantec nomdb (formerly VERITAS)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"13786\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"APRS UI-View Amateur Radio[111] UI-WebServer\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"14439\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Battlefield 1942 and mods\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"14567\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"K3 SYSPRO K3 Framework WCF Backbone[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"14900\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"psyBNC\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"15000\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"XPilot Contact\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"15345\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Jeex.EU Artesia (direct client-to-db.service)\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"15556\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Battlefield Vietnam and mods\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"15567\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"shroudBNC\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"16000\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Mac OS X Server Web (HTTP) service with performance cache[112]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"16080\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Oracle Universal Content Management Content Server\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"16200\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Oracle Universal Content Management Inbound Refinery\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"16250\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Iron Mountain Digital online backup[citation needed]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"16384\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Battlefield 2 and mods\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"16567\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Dropbox LanSync Protocol (db-lsp); used to synchronize file catalogs between Dropbox clients on your local network.\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"17500\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Super Dancer Online Extreme(SDO-X)â€”CiB Net Station Malaysia Server[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"18010\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"RAD PDF Service\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"18104\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"DART Reporting server[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"18180\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Audition Online Dance Battle, AsiaSoft Thailand Serverâ€”Status/Version Check\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"18200\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Audition Online Dance Battle, AsiaSoft Thailand Server\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"18201\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Audition Online Dance Battle, AsiaSoft Thailand Serverâ€”FAM Database\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"18206\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Audition Online Dance Battle, AsiaSoft SEA Serverâ€”Status/Version Check\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"18300\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Audition Online Dance Battle, AsiaSoft SEA Server\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"18301\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Audition Online Dance Battle, AsiaSoft SEA Serverâ€”FAM Database\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"18306\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Bitcoin testnet[99]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"18333\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Audition Online Dance Battle, KAIZEN Brazil Serverâ€”Status/Version Check\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"18400\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Audition Online Dance Battle, KAIZEN Brazil Server\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"18401\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Audition Online Dance Battle R4p3 Server, Nexon Serverâ€”Status/Version Check\",\n            \"udp\": true,\n            \"status\": \"Unofficial R4p3 Server\",\n            \"port\": \"18505\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Audition Online Dance Battle, Nexon Server\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"18506\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"X-BEATâ€”Status/Version Check\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"18605\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"X-BEAT\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"18606\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Audition Online Dance Battle, G10/alaplaya Serverâ€”Status/Version Check\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"19000\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Audition Online Dance Battle, G10/alaplaya Server\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"19001\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Standard Minecraft Pocket Edition LAN Server\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"19132\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Gkrellm Server\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"19150\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Panda Software AdminSecure Communication Agent\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"19226\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"K2 - KeyAuditor & KeyServer, Sassafras Software Inc. Software Asset Management tools\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"19283\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Google Talk Voice and Video connections [113]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"19294\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Google Talk Voice and Video connections [113]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"19295\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Google Talk Voice and Video connections [113]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"19302\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"KeyShadow for K2 - KeyAuditor & KeyServer, Sassafras Software Inc. Software Asset Management tools\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"19315\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Belkin Network USB Hub[citation needed]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"19540\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Ensim Control Panel[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"19638\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"4D database SQL Communication[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"19812\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"4D database Client Server Communication[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"19813\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"4D database DB4D Communication[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"19814\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"DNP - Secure (Distributed Network Protocol - Secure), a secure version of the protocol used in SCADA systems between communicating RTU's and IED's\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"19999\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"DNP (Distributed Network Protocol), a protocol used in SCADA systems between communicating RTU's and IED's\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"20000\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"DART Reporting server[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"20014\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Killing Floor\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"20560\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Precise TPM Listener Agent\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"20702\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Symantec i3 Web GUI server\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"20720\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Precise TPM Web GUI server\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"20790\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"AMLFilter, AMLFilter Inc. amlf-admin default port\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"21001\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"AMLFilter, AMLFilter Inc. amlf-engine-01 default http port\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"21011\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"AMLFilter, AMLFilter Inc. amlf-engine-01 default https port\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"21012\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"AMLFilter, AMLFilter Inc. amlf-engine-02 default http port\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"21021\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"AMLFilter, AMLFilter Inc. amlf-engine-02 default https port\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"21022\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"FLIR Systems Camera Resource Protocol\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"22136\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Davis Instruments, WeatherLink IP\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"22222\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"WibuKey, WIBU-SYSTEMS AG Software protection system\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"22347\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Wolfson Microelectronics WISCEBridge Debug Protocol[114]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"22349\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"CodeMeter, WIBU-SYSTEMS AG Software protection system\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"22350\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Soldat Dedicated Server\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"23073\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Skype Default Protocol\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"23399\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Duke Nukem 3D#Source code Duke Nukem Ports\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"23513\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"NetBeans integrated development environment\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"24444\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Tonido Directory Server for Tonido which is a Personal Web App and P2P platform\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"24465\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"BINKP, Fidonet mail transfers over TCP/IP\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"24554\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Synergy: keyboard/mouse sharing software\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"24800\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"StepMania: Online: Dance Dance Revolution Simulator\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"24842\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Teamware Office standard client connection\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"25000\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Teamware Office client notifier\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"25003\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Teamware Office message transfer\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"25005\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Teamware Office MIME Connector\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"25007\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Teamware Office Agent server\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"25010\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"codeheart.js Relay Server\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"25560\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Standard Minecraft (Dedicated) Server\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"25565\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Manic Digger default single player port\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"25570\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"collectd default port[115]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"25826\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Xfire (Firewall Report, UDP_IN) IP Address (206.220.40.146) resolves to gameservertracking.xfire.com. Use unknown.\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"25888\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Xfire\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"25999\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"id Software's Quake server\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"26000\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"War of No Return Server Port[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"26850\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"CCP's EVE Online Online gaming MMORPG\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"26900\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"CCP's EVE Online Online gaming MMORPG\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"26901\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Steam Client\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"27000-27030\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Source engine dedicated server port\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"27010\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Steam Downloads\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"27014-27050\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"GoldSrc and Source engine dedicated server port\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"27015\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Magicka server port\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"27016\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"mongoDB server port\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"27017\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Sub7 default.\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"27374\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"id Software's QuakeWorld\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"27500-27900\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Kaillera server\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"27888\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Nintendo Wi-Fi Connection\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"27900-27901\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"id Software's Quake II master server\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"27901-27910\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"OpenArena outgoing\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"27950\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Activision's Enemy Territory and id Software's Quake III Arena, Quake III and Quake Live and some ioquake3 derived games (OpenArena incoming)\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"27960-27969\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Bitfighter Common/default Bitfighter Server\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"28000\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Starsiege: Tribes Common/default Tribes v.1 Server\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"28001\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"www.SmartSystemsLLC.com Used by Smart Sale 5.0[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"28395\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Cube 2 Sauerbraten[116]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"28785\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Cube 2 Sauerbraten Port 2[116]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"28786\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Red Eclipse (Cube 2 derivative) default ports [117]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"28801 - 28802\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Killing Floor\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"28852\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Nintendo Wi-Fi Connection[118]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"28910\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Call of Duty; Call of Duty: United Offensive; Call of Duty 2; Call of Duty 4: Modern Warfare; Call of Duty: World at War (PC Version)\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"28960\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Perfect World International Used by the Perfect World International Client\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"29000\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Game titled \\\"Jedi Knight: Jedi Academy\\\" by Ravensoft\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"29070\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"TMO Integration Service Communications Port, Used by Transaction Manager SaaS (HighJump Software)[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"29292\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Nintendo Wi-Fi Connection[118]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"29900-29901\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Nintendo Wi-Fi Connection[118]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"29920\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"PokÃ©mon Netbattle\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"30000\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"BitTorrent\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"30301\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Multiplicity: keyboard/mouse/clipboard sharing software\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"30564\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Lantronix Discovery for Lantronix serial-to-ethernet devices\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"30718\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"ZangZing agent\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"30777\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"electric imp node<>server communication (TLS)\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"31314\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Back Orificeâ€”remote administration tool (often Trojan horse)\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"31337\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"ThoughtSignalâ€”Server Communication Service (often Informational)\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"31415\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"TetriNET IRC gateway on some servers\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"31456\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"TetriNET\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"31457\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"TetriNET Used for game spectators\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"31458\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"LM-MON (Standard Floating License Manager LM-MON)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"31620\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"x3Lobby Used by x3Lobby, an internet application.\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"32123\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Immunet Protect (UDP in version 2.0,[119] TCP since version 3.0[120])\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"32137\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"MMTSG-mutualed over MMT (encrypted transmission)\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"32245\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"FileNet RPC\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"32769\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Used by \\\"Ace of Spades\\\" game\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"32887\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"LogMeIn Hamachi (VPN tunnel software; also port 12975)â€”used to connect to Mediation Server (bibi.hamachi.cc); will attempt to use SSL (TCP port 443) if both 12975 & 32976 fail to connect\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"32976\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"traceroute\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"33434\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Dezta software\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"33982\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"MasterPort - WarZ\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"34000\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"ClientPort - WarZ\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"34001\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"PortStart - WarZ\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"34010\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Linksys PSUS4 print server[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"34443\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"EDI service[121]\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"34567\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Folding@home v7 default for client control interface\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"36330\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Any of the USGN online games, most notably Counter Strike 2D multiplayer (2D clone of popular CounterStrike computer game)\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"36963\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Axence nVision[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"37659\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Digital Video Recorder hardware[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"37777\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"SafetyNET p Real-time Industrial Ethernet protocol\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"40000\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Flatcast[122]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"40123\",\n            \"tcp\": false\n        },\n        {\n            \"description\": \"Murealm Client[citation needed]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"41823\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"LarmX.comâ„¢ database update mtr port[citation needed]\",\n            \"udp\": true,\n            \"status\": \"Unofficial\",\n            \"port\": \"43034\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"TheÃ²sMessenger second port for service TheÃ²sMessenger[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"43047\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"TheÃ²sMessenger third port for service TheÃ²sMessenger[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"43048\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"RuneScape, FunOrb, Runescape Private Servers game servers\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"43594\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"RuneScape JAGGRAB servers\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"43595\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Mu Online Connect Server\",\n            \"udp\": false,\n            \"status\": \"Unofficial\",\n            \"port\": \"44405\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Server for the DAI family of client-server products[citation needed]\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"45824\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"WinRM - Windows Remote Management Service [123]\",\n            \"udp\": false,\n            \"status\": \"Official\",\n            \"port\": \"47001\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"BACnet Building Automation and Control Networks (4780810 = BAC016)\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"47808\",\n            \"tcp\": true\n        },\n        {\n            \"description\": \"Reserved[1]\",\n            \"udp\": true,\n            \"status\": \"Official\",\n            \"port\": \"49151\",\n            \"tcp\": true\n        }\n    ]\n}"
    },
    {
      "name": "scanClientData",
      "type": "file",
      "extension": ".js",
      "content": "const crypto = require(\"crypto\");\r\nconst axios = require('axios');\r\nconst API_KEY = 'd55435107bbfb1235bdeb3457aa0cc7ca48ce7cba06aeb2fd8b3e8cc82096187';\r\nconst https = require('https')\r\nconst {\r\n  passwordkeys,\r\n  sensitivedata,\r\n} = require(\"../sensitive/availableapikeys\");\r\n// regular expression paterns\r\n// OPTIONS method\r\n\r\nasync function scanDirectoryOptionMethod(routes, hostname) {\r\n  const results = [];\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      routes.forEach((item) => {\r\n        if (item.methods.includes(\"OPTIONS\")) {\r\n          results.push(`The path '${item.path}' uses the OPTIONS method`);\r\n        }\r\n      });\r\n      if (results.length > 0) {\r\n        resolve(results); // OPTIONS method enabled\r\n      } else {\r\n        resolve(null); // OPTIONS method disabled\r\n      }\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n}\r\n// application_accepts_arbitrary_methods\r\nasync function ScanDangerousMethods(routes, hostname) {\r\n  const results = [];\r\n  const dangerousMethods = [\"DELETE\", \"PUT\", \"PATCH\"];\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      routes.forEach((item) => {\r\n\r\n        const hasDangerousMethod = dangerousMethods.some((method) =>\r\n          item.methods.includes(method)\r\n        );\r\n        if (hasDangerousMethod) {\r\n          const dangerousMethod = item.methods.find((method) =>\r\n            dangerousMethods.includes(method)\r\n          );\r\n          results.push(\r\n            `The path '${item.path}' uses the '${dangerousMethod}' method`\r\n          );\r\n        }\r\n      });\r\n      if (results.length > 0) {\r\n        resolve(results); //application_accepts_arbitrary_methods\r\n      } else {\r\n        resolve(null); //application_ not_accepts_arbitrary_methods\r\n      }\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n}\r\nasync function DefaultWebPage(routes, hostname) {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      const results = [];\r\n\r\n      let defaultWebpage = routes.filter((val) => {\r\n        return val.path === \"/\" && val.methods.includes(\"GET\");\r\n      });\r\n      if (defaultWebpage.length > 0) {\r\n        // consoleColorText(\"Default web page present in the server\", \"blue\");\r\n        results.push(\"Available\");\r\n      } else {\r\n        // consoleColorText(\"Default web page not present in the server\", \"red\");\r\n        results.push(\r\n          \"Not Avaialble\"\r\n        );\r\n      }\r\n      resolve(results);\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n}\r\nfunction containsSequelizeCode(fileContent) {\r\n  // Check if the file content contains Sequelize-related code\r\n  // You can implement your own logic based on your project's coding patterns\r\n  // This can include checking for import/require statements, specific function calls, etc.\r\n  const sequelizeImportRegex =\r\n    /require\\(['\"]sequelize['\"]\\)|import.*['\"]sequelize['\"]/;\r\n  const sequelizeFunctionRegex =\r\n    /Sequelize\\.(define|query|findAll|findOne|create|update|destroy)/;\r\n\r\n  if (\r\n    sequelizeImportRegex.test(fileContent) ||\r\n    sequelizeFunctionRegex.test(fileContent)\r\n  ) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\nfunction containsMySQLCode(fileContent) {\r\n  // Check if the file content contains MySQL-related code\r\n  // You can implement your own logic based on your project's coding patterns\r\n  // This can include checking for import/require statements, specific function calls, etc.\r\n  const mysqlImportRegex = /require\\(['\"]mysql['\"]\\)|import.*['\"]mysql['\"]/;\r\n  const mysqlFunctionRegex = /mysql\\.(connect|query|execute|prepare|escape)/;\r\n  if (\r\n    mysqlImportRegex.test(fileContent) ||\r\n    mysqlFunctionRegex.test(fileContent)\r\n  ) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction missingSecurityHeaders(content) {\r\n  // Example: Check for missing security headers\r\n  const securityHeaders = [\"Content-Security-Policy\", \"X-XSS-Protection\"];\r\n  return !securityHeaders.every((header) => content.includes(header));\r\n}\r\nfunction AccessControlAllowOriginisSetToStar(content) {\r\n  // Example: Check for missing security headers\r\n  const securityHeaders = [\"Access-Control-Allow-Origin\", \"*\"];\r\n  return securityHeaders.every((header) => content.includes(header));\r\n}\r\n\r\nfunction isUnsafeRegexEvaluation(content) {\r\n  // Example: Check for unsafe regex patterns\r\n  const unsafePatterns = [\"\\\\b(eval|Function)\\\\b\"];\r\n  return unsafePatterns.some((pattern) => content.match(pattern));\r\n}\r\nfunction InformationExposure(content) {\r\n  // Example: Check for unsafe regex patterns\r\n  const expressPatterns = [\"\\\\b(express)\\\\b\"];\r\n  return expressPatterns.some((pattern) => content.match(pattern));\r\n}\r\nasync function scanHardCodedData(content, file) {\r\n  const results = [];\r\n  content = content; // Replace double quotes with single quotes\r\n  const sensitiveFields = sensitivedata;\r\n\r\n  for (const field of sensitiveFields) {\r\n    const regexIsEqualTo = new RegExp(`${field}\\\\s*=\\\\s*['\"](.*?)['\"]`, \"g\");\r\n    const regexIsObject = new RegExp(`${field}\\\\s*:\\\\s*['\"]([^'\"]*)['\"]`, \"g\");\r\n\r\n    let match;\r\n    while ((match = regexIsEqualTo.exec(content)) !== null) {\r\n      const hardcodedValue = match[1];\r\n      const lineNumber = getLineNumber(content, match.index);\r\n      results.push(`find ${hardcodedValue}  in a ${field} at line ${lineNumber} in ${file}`);\r\n    }\r\n\r\n    while ((match = regexIsObject.exec(content)) !== null) {\r\n      const hardcodedValue = match[1];\r\n      const lineNumber = getLineNumber(content, match.index);\r\n      results.push(`find ${hardcodedValue}  in a ${field} at line ${lineNumber} in ${file}`);\r\n    }\r\n  }\r\n\r\n  return results;\r\n}\r\n\r\nasync function scanHardPasswordHashing(content, file) {\r\n  console.log(\"content\", content)\r\n  const listOfSupportedHashes = crypto.getHashes();\r\n  const results = [];\r\n  content = content.toLowerCase();\r\n  const crypto_createHashRegex = /createhash\\('([^']*)'/g;\r\n  const CryptoJsRegx = /(md5|sha256)\\(/g;\r\n  // cryptojs module\r\n  let CryptoJsRegxmatch;\r\n  if ((CryptoJsRegxmatch = CryptoJsRegx.exec(content)) !== null) {\r\n    const keyword = CryptoJsRegxmatch[1];\r\n    results.push(`found a file where ${keyword} password hashing is used in ${file}`);\r\n  }\r\n  // crypto module\r\n  let crypto_createHashRegexmatch;\r\n  if (\r\n    (crypto_createHashRegexmatch = crypto_createHashRegex.exec(content)) !==\r\n    null\r\n  ) {\r\n    const keyword = crypto_createHashRegexmatch[1];\r\n    if (listOfSupportedHashes.includes(keyword)) {\r\n      console.log({ keyword });\r\n      results.push(`found a file where ${keyword} password hashing is used in ${file}`);\r\n    }\r\n  }\r\n  return results;\r\n}\r\nasync function scanXSSvulnerability(content, file) {\r\n  const results = [];\r\n  // Check for potential XSS vulnerabilities\r\n  // 4. Security Headers\r\n  if (missingSecurityHeaders(content)) {\r\n    results.push(`Potential XSS vulnerability: Missing security headers at ${file}`\r\n    );\r\n  }\r\n  if (InformationExposure(content)) {\r\n    results.push(`Disable X-Powered-By header for your Express app (consider using Helmet middleware),because it exposes information about the used framework to potential attackers.`);\r\n  }\r\n  // 5. Regular Expression Evaluation\r\n\r\n  // 5. Server Side Evaluation\r\n  const serversideinjex = /(eval|setTimeout|setInterval)\\s*\\(/gi;\r\n  let serversideinjexmatch;\r\n  if ((serversideinjexmatch = serversideinjex.exec(content)) !== null) {\r\n    const matchedKeyword = serversideinjexmatch[0];\r\n    results.push(`Potential Server Side Injection Code: ${matchedKeyword.replace(\"(\", \"\")}\\n`);\r\n  }\r\n  return results;\r\n}\r\nasync function scanRedirectvulnerability(content, file) {\r\n  const results = [];\r\n  content = content.toLowerCase();\r\n  //  redirect vunurability\r\n  const redirectmatches = content.match(/\\.redirect\\s*\\(([^)]+)\\)/g);\r\n  if (redirectmatches && Array.isArray(redirectmatches)) {\r\n    for (const match of redirectmatches) {\r\n      const dataMatch = match.match(/\\(([^)]+)\\)/);\r\n      if (dataMatch && dataMatch[1]) {\r\n        const data = dataMatch[1];\r\n        // Check if third-party URLs are used in the redirection\r\n        const thirdPartyURLs = data.match(/(?:https?:\\/\\/)?([^\\s\\/]+)/g);\r\n        if (thirdPartyURLs && thirdPartyURLs.length > 0) {\r\n          for (const url of thirdPartyURLs) {\r\n            if (url.includes(\"http\") || url.includes(\"https\")) {\r\n              results.push(`Found a third-party URL: ${url} at file ${file}`);\r\n              // Perform further actions or checks as needed\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return results;\r\n}\r\nasync function scanSessionvulnerability(content, file, middlewares) {\r\n  const results = []\r\n  // \r\n  const jsonwebtoken = /jsonwebtoken/g; // Change this to the desired pattern\r\n  if (jsonwebtoken.test(content)) {\r\n    results.push(\r\n      \"Session token being passed in other areas apart from a cookie:\" + file\r\n    );\r\n  }\r\n\r\n  // \r\n  if (middlewares.includes(\"session\")) {\r\n    content = content.toLowerCase();\r\n    //  session configuration\r\n    results.push(\"Session Found\")\r\n    const sessionIdRegeneration = content.includes(\".session.regenerate(\");\r\n    if (sessionIdRegeneration) {\r\n      results.push(`Regularly regenerating session IDs to prevent session fixation attack is not possible because session regeneration is used in this file: ${file}\\nApplication is not vulnerable to session hijacking attack`)\r\n    }\r\n    const cookieRegex = /cookie:\\s*{\\s*[\\s\\S]*?\\s*}/;\r\n    const cookieRegexmatch = content.match(cookieRegex);\r\n    if (cookieRegexmatch) {\r\n      const sevenDays = 86400000 * 7;\r\n      const oneMinute = 60000;\r\n      const sessionConfig = cookieRegexmatch[0].trim();\r\n      const cookieString = sessionConfig.replace(\"cookie:\", \"\");\r\n      const cookieObject = eval(`(${cookieString})`);\r\n      console.log(cookieObject);\r\n      const isSecureTransmission = cookieObject.secure;\r\n      results.push(isSecureTransmission ? \"session IDs are securely transmitted over encrypted channels (HTTPS)\" : \"session IDs are not  securely transmitted over encrypted channels (HTTPS)\");\r\n      if (cookieObject[\"maxage\"] === false || cookieObject[\"expires\"] === false) {\r\n        // consoleColorText( \"Session does not expire on closing the browser because is it means it will never expire\",'red')\r\n        results.push(\"Session does not expire on closing the browser\");\r\n      } else if (\r\n        cookieObject[\"maxage\"] === null ||\r\n        cookieObject[\"expires\"] === null\r\n      ) {\r\n        // consoleColorText(\"session is infinite\",\"red\")\r\n        results.push(\"Session is Infinite\");\r\n      } else if (\r\n        cookieObject[\"maxage\"] > sevenDays ||\r\n        cookieObject[\"expires\"] > sevenDays\r\n      ) {\r\n        // consoleColorText(\"session timeout is high\",'red')\r\n        results.push(\"Session_time_out is High\");\r\n      } else if (\r\n        cookieObject[\"maxage\"] < oneMinute ||\r\n        cookieObject[\"expires\"] < oneMinute\r\n      ) {\r\n        // consoleColorText(\"session timeout is Low\",'red')\r\n        results.push(\"Session_time_out is Low\");\r\n      } else {\r\n        // consoleColorText(\"session timeout is Normal\",\"blue\")\r\n        results.push(\"Session_time_out is Normal\");\r\n      }\r\n    }\r\n\r\n  } else {\r\n    results.push(\"Not Implemented\")\r\n  }\r\n  return results;\r\n}\r\nasync function scanSQLvulnerability(content, file) {\r\n  const results = [];\r\n  content = content.toLowerCase();\r\n  //  sql vunurability\r\n  if (containsSequelizeCode(content)) {\r\n    results.push(`Sequalize methods are Found it is good for block sql injections`);\r\n  } else if (containsMySQLCode(content)) {\r\n    results.push(`Mysql methods are Found it is not  good for prevent sql injections please use Sequalize Orm Function For Prevent Sql Injections/n but if you are use mysql queris then please use paramterize queries like this\r\n    const userId = 1;\r\n    const query = 'SELECT * FROM users WHERE id = ?';\r\n\r\n    connection.query(query, [userId], (error, results) => {\r\n      if (error) {\r\n        console.error('Error executing query:', error);\r\n        return;\r\n      }\r\n\r\n      console.log('Query results:', results);\r\n    });\r\n // Do not use queries like this because this will be dangerous \r\n const query = 'SELECT * FROM users';\r\n  connection.query(query, (error, results) => {\r\n    if (error) {\r\n      console.error('Error executing query:', error);\r\n      return;\r\n    }\r\n\r\n    consoleColorText('Query results:', results);\r\n  });\r\n    `);\r\n  } else if (!containsMySQLCode(content) || !containsSequelizeCode(content)) {\r\n    results.push(`Mysql Not Found`);\r\n  }\r\n  return results;\r\n}\r\nfunction getLineNumber(content, index) {\r\n  const lines = content.substr(0, index).split(\"\\n\");\r\n  return lines.length;\r\n}\r\nfunction scanDomain(domain) {\r\n  try {\r\n    const timestamp = Math.floor(Date.now() / 1000);\r\n    const url = `https://www.virustotal.com/vtapi/v2/domain/report?apikey=${API_KEY}&domain=${domain}&date=${timestamp}`;\r\n    const options = {\r\n      method: 'GET'\r\n    };\r\n    // Make the request\r\n    const request = https.request(url, options, (response) => {\r\n      const chunks = [];\r\n\r\n      // Collect the response data in chunks\r\n      response.on('data', (chunk) => {\r\n        chunks.push(chunk);\r\n      });\r\n\r\n      // When the response is complete, concatenate the chunks into a single buffer\r\n      response.on('end', () => {\r\n        const buffer = Buffer.concat(chunks);\r\n        // Parse the JSON response\r\n        const result = JSON.parse(buffer.toString());\r\n        if (result.response_code !== 1) {\r\n          console.log(`The domain ${domain} could not be scanned.`);\r\n          return;\r\n        }\r\n\r\n        if (result.detected_urls.length > 0) {\r\n          console.log(`The domain ${domain} contains a virus!`);\r\n          console.log(`The following URLs were detected as malicious:`);\r\n          for (const url of result.detected_urls) {\r\n            console.log(url.url);\r\n          }\r\n        } else {\r\n          console.log(`The domain ${domain} is clean.`);\r\n        }\r\n      });\r\n    });\r\n\r\n    // Handle errors\r\n    request.on('error', (error) => {\r\n      console.error(error);\r\n    });\r\n\r\n    request.end();\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\nasync function checkDirectoryListing(url) {\r\n  try {\r\n    const response = await axios.get(url);\r\n    console.log(response.status);\r\n    if (response.status === 200 && response.data.includes('Index of')) {\r\n      console.log('Directory listing is enabled.');\r\n      return 'Directory listing is enabled.';\r\n    } else {\r\n      console.log('Directory listing is disabled.');\r\n      return 'Directory listing is disabled.';\r\n    }\r\n  } catch (error) {\r\n\r\n    if (error?.response?.status >= 400) {\r\n      if (error?.response?.status === 404) {\r\n        console.log('Page not found.');\r\n        return 'Page not found.';\r\n      } else if (error?.response?.status === 403) {\r\n        console.log('Access forbidden.');\r\n        return 'Access forbidden.';\r\n      } else {\r\n        console.log('Directory listing is disabled.');\r\n        return 'Directory listing is disabled.';\r\n      }\r\n    }\r\n  }\r\n}\r\nasync function scanWebsite(url) {\r\n  // Launch a headless browser\r\n  const puppeteer = require('puppeteer');\r\n  const browser = await puppeteer.launch();\r\n  try {\r\n    // Open a new page\r\n    const page = await browser.newPage();\r\n\r\n    // Navigate to the specified URL\r\n    await page.goto(url);\r\n\r\n    // Take a screenshot\r\n    await page.screenshot({ path: 'screenshot.png' });\r\n\r\n    // Extract the page title\r\n    const title = await page.title();\r\n    console.log('Page title:', title);\r\n  } catch (error) {\r\n    console.error('An error occurred:', error);\r\n  } finally {\r\n    // Close the browser\r\n    await browser.close();\r\n  }\r\n}\r\nconst lighthouse = require('lighthouse');\r\nconst { launch } = require('chrome-launcher');\r\n\r\nasync function generateWebsiteReport(url) {\r\n  const chrome = await launch();\r\n  const options = { port: chrome.port };\r\n  const runnerResult = await lighthouse(url, options);\r\n\r\n  // Access the generated report\r\n  const report = runnerResult.report;\r\n  await chrome.kill();\r\n  return report\r\n}\r\n\r\n// Usage example\r\n\r\nmodule.exports = {\r\n  scanXSSvulnerability, generateWebsiteReport\r\n  , checkDirectoryListing, scanDomain, scanWebsite, scanRedirectvulnerability, scanSessionvulnerability, scanSQLvulnerability, scanHardCodedData, scanHardPasswordHashing, scanDirectoryOptionMethod, ScanDangerousMethods, DefaultWebPage,\r\n};\r\n"
    },
    {
      "name": "headerValidation",
      "type": "file",
      "extension": ".js",
      "content": "const { addError, addWarning, addInfo } = require('./report')\nconst { mandatory, optional, avoid, deprecated } = require('./rules.json')\n\n// Check for mandatory, avoid and deprecated ones.\nconst errorFields = (headers) => {\n  const currentHeaders = Object.keys(headers)\n  avoid.filter(field => currentHeaders.includes(field)).forEach(field => addError({Remove_field:field}))\n  mandatory.filter(field => !currentHeaders.includes(field)).forEach(field => addError({Missing_field:field}))\n}\nconst availableFields = (headers) => {\n  const currentHeaders = Object.keys(headers)\n  mandatory.filter(field => currentHeaders.includes(field)).forEach(field => addError({availableFields:field}))\n}\n\n// Check for optional\nconst warningFields = (headers) => {\n  const currentHeaders = Object.keys(headers)\n  optional.filter(field => !currentHeaders.includes(field)).forEach(field => addWarning({optional:field}))\n}\n\n// Check for extra headers\nconst infoFields = (headers) => {\n  const allHeaders = [].concat(optional, mandatory, avoid, deprecated)\n  const currentHeaders = Object.keys(headers)\n  currentHeaders.filter(field => !allHeaders.includes(field)).forEach(field => addInfo({Additional_information:field}))\n}\n\nconst headerValidation = (headers = {}) => [availableFields,errorFields, warningFields].forEach(item => item(headers))\n\nmodule.exports = { headerValidation, errorFields, warningFields, infoFields }\n"
    },
    {
      "name": "helpers",
      "type": "file",
      "extension": ".js",
      "content": "const { default: axios } = require('axios')\n\nconst isUrlValid = (url = '') => {\n  if (typeof (url) !== 'string') return false\n  const regex = /(?:^|[ \\t])((https?:\\/\\/)?(?:localhost|[\\w-]+(?:\\.[\\w-]+)+)(:\\d+)?(\\/\\S*)?)/g\n  return regex.test(url)\n}\n\nconst makeRequest = async(uri) => {\n  try {\n    const response = await axios.get(uri);\n    \n    const headers = response.headers;\n    const status = response.status;\n      headers['connection']=undefined\n    headers['HTTP/2']=status\n    return { headers, status };\n  } catch (error) {\n    if (error.response) {\n      const headers = error.response.headers;\n      const status = error.response.status;\n      headers['connection']=undefined\n      console.log({error:status});\n      headers['HTTP/2']=status \n      return { headers, status };\n    } else {\n      console.error(error);\n      return null;\n    }\n  }\n}\n\nmodule.exports = {\n  isUrlValid, makeRequest\n}\n"
    },
    {
      "name": "index",
      "type": "file",
      "extension": ".js",
      "content": "const { isUrlValid, makeRequest } = require('./helpers')\nconst { setHeaders, setStatus, getAll } = require('./report')\nconst { headerValidation } = require('./headerValidation')\n\nconst checkMyHeaders = async (url) => {\n  \n  const { headers, status } = await makeRequest(url)\n  console.log({status})\n  setHeaders(headers)\n  setStatus(status)\n  headerValidation(headers)\n  return getAll()\n}\n\nmodule.exports = checkMyHeaders\n"
    },
    {
      "name": "report",
      "type": "file",
      "extension": ".js",
      "content": "let messages = null\nlet status = null\nlet headers = null\n\nconst addMessage = (msg, type) => {\n  if (!Array.isArray(messages)) {\n    messages = []\n  }\n  messages.push({ msg, type })\n}\nconst filterMessages = (type) => {\n  const data = Array.isArray(messages) ? messages : []\n  return data.filter(item => item.type === type)\n}\n\nconst getAll = () => ({ messages, headers, status })\n\nconst addError = (msg) => addMessage(msg, 'error')\nconst addWarning = (msg) => addMessage(msg, 'warn')\nconst addInfo = (msg) => addMessage(msg, 'info')\n\nconst getWarnings = () => filterMessages('warn')\nconst getErrors = () => filterMessages('error')\nconst getInfo = () => filterMessages('info')\n\nconst setStatus = (currentStatus) => { status = currentStatus }\nconst getStatus = () => status\n\nconst setHeaders = (currentHeaders) => { headers = currentHeaders }\nconst getHeaders = () => headers\n\nconst resetReport = () => {\n  messages = null\n  status = null\n  headers = null\n}\n\nmodule.exports = { addError, addWarning, addInfo, getAll, getWarnings, getErrors, getInfo, resetReport, setStatus, getStatus, setHeaders, getHeaders }\n"
    },
    {
      "name": "rules",
      "type": "file",
      "extension": ".json",
      "content": "{\n    \"mandatory\":[\n      \"content-security-policy\",\n      \"referrer-policy\",\n      \"strict-transport-security\",\n      \"x-xss-protection\",\n      \"x-content-type-options\",\n      \"feature-policy\",\n      \"date\"\n    ],\n    \"optional\":[\n      \"access-control-allow-origin\",\n      \"access-control-allow-methods\",\n      \"access-control-allow-headers\",\n      \"cache-control\",\n      \"content-length\",\n      \"content-type\"\n    ],\n    \"avoid\":[\n      \"x-powered-by\",\n      \"x-aspnet-version\",\n      \"via\",\n      \"x-Cache\",\n      \"x-request-id\",\n      \"x-amzd-requestid\",\n      \"date\",\n      \"server\",\n      \"content-type\",\n      \"content-length\",\n      \"cache-control\",\n      \"connection\",\n      \"etag\",\n      \"last-modified\",\n      \"location\",\n      \"set-cookie\",\n      \"expires\",\n      \"access-control-allow-origin\",\n      \"content-encoding\",\n      \"strict-transport-security\",\n      \"x-content-type-options\"\n    ],\n    \"deprecated\":[\n      \"p3p\",\n      \"expires\",\n      \"x-frame-options\",\n      \"x-ua-compatible\",\n      \"pragma\"\n    ]\n  }"
    },
    {
      "name": "VpnChecker",
      "type": "file",
      "extension": ".js",
      "content": "const { fetchHttpsData } = require(\"../lib/fetchUrl\");\n  const VpnResponse = async (ip) => {\n    try {\n      const data = await fetchHttpsData('https://internetdb.shodan.io/' + ip);\n      if (data.statusCode === 200) {\n        return  true \n      } else if (data.statusCode === 404) {\n        return  false \n      }\n    } catch (e) {\n      return  false ;\n    }\n  };\n  \n  module.exports={VpnResponse}"
    },
    {
      "name": "404",
      "type": "file",
      "extension": ".ejs",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\">\n    <link href='https://fonts.googleapis.com/css?family=Anton|Passion+One|PT+Sans+Caption' rel='stylesheet' type='text/css'>\n    <link rel=\"stylesheet\"  type='text/css' href=\"/404.css\"\n</head>\n<body>\n     <!-- Error Page -->\n     <div class=\"error\">\n        <div class=\"container-floud\">\n            <div class=\"col-xs-12 ground-color text-center\">\n                <div class=\"container-error-404\">\n                    <div class=\"clip\"><div class=\"shadow\"><span class=\"digit thirdDigit\"></span></div></div>\n                    <div class=\"clip\"><div class=\"shadow\"><span class=\"digit secondDigit\"></span></div></div>\n                    <div class=\"clip\"><div class=\"shadow\"><span class=\"digit firstDigit\"></span></div></div>\n                    <div class=\"msg\">OH!<span class=\"triangle\"></span></div>\n                </div>\n                <h2 class=\"h1\">Sorry! Page not found</h2>\n            </div>\n        </div>\n    </div>\n<!-- Error Page -->\n<script src=\"/404.js\"></script>\n</body>\n</html>"
    },
    {
      "name": "block",
      "type": "file",
      "extension": ".ejs",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Security</title>\n  <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi\" crossorigin=\"anonymous\">\n</head>\n\n<body>\n  <div class=\"container col-lg-8 card bg-light\">        <br>\n    <div class=\"row d-flex justify-content-center\">\n  <center>\n    <div class=\"alert alert-danger\">\n                <h5 class=\"alert-heading\"><%= message %></h5>\n            </div><br>\n            <p class=\"font20\"><i class=\"fas fa-bug fa-4x\"></i></p>\n            <h6>Please contact with the webmaster of the website if you think something is wrong.</h6>\n            <br>\n          <a href=\"mailto:admin@mail.com\" class=\"btn btn-primary col-12\" target=\"_blank\"><i class=\"fas fa-envelope\"></i> Contact</a>\n            \n  </center>\n    </div>\n\n<br></div>\n</body>\n\n</html>"
    },
    {
      "name": "home",
      "type": "file",
      "extension": ".ejs",
      "content": "<!DOCTYPE html>\n<html>\n  <head>\n    <title><%= title %></title>\n  </head>\n  <body>\n    <h1><%= title %></h1>\n    <p>Welcome to <%= title %></p>\n  </body>\n</html>\n"
    },
    {
      "name": "index",
      "type": "file",
      "extension": ".ejs",
      "content": "<!DOCTYPE html>\n<html>\n  <head>\n    <title><%= title %></title>\n  \n  </head>\n  <body>\n    <h1><%= title %></h1>\n    <p>Welcome to <%= title %></p>\n  </body>\n</html>\n"
    },
    {
      "name": "login",
      "type": "file",
      "extension": ".ejs",
      "content": "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <title>Login Example</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\">\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js\"></script>\n    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"></script>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"wrapper\">\n            <form action=\"/login\" method=\"post\" name=\"Login_Form\" class=\"form-signin\">\n                <h3 class=\"form-signin-heading\">Welcome! Please Sign In</h3>\n                <input type=\"text\" class=\"form-control\" name=\"username\" value=\"shivam@mail.com\" placeholder=\"Email Address\" required=\"\" autofocus=\"\" />\n                <input type=\"password\" class=\"form-control\" value=\"1234\" name=\"password\" placeholder=\"Password\" required=\"\"/>\n                <button class=\"btn btn-lg btn-primary btn-block\" name=\"Submit\" value=\"Login\" type=\"Submit\">Login</button>\n            </form>\n        </div>\n        <h1><%= message %></h1>\n        <% if (!data.username) { %>\n            <span>username not exist</span>\n          <% } %>\n        <!-- <h1><%= username %></h1>\n        <h1><%= loggedin %></h1> -->\n    </div>\n</body>\n</html>"
    },
    {
      "name": "testcodes",
      "type": "file",
      "extension": ".js",
      "content": "const fs = require('fs');\r\nconst path = require('path');\r\nconsole.log(\"Current Working Directory:\", __filename);\r\nfunction scanDirectory(directoryPath) {\r\n    let result = [];\r\n\r\n    // Read the content of the directory\r\n    const files = fs.readdirSync(directoryPath);\r\n\r\n    // Iterate through each file in the directory\r\n    files.forEach(file => {\r\n        // Exclude specific files and folders\r\n        if (file === '.env' || file === 'package.json' || file === 'node_modules' || file === '.git' || file === '.gitignore' || file === __filename || file === 'package-lock.json' || file === 'yarn.lock' || file === \"directory.json\") {\r\n            return;\r\n        }\r\n\r\n        const filePath = path.join(directoryPath, file);\r\n\r\n        // Check if it's a directory\r\n        if (fs.statSync(filePath).isDirectory()) {\r\n            // Recursively scan subdirectories\r\n            const subdirectoryContent = scanDirectory(filePath);\r\n            result.push({\r\n                name: file,\r\n                type: 'folder',\r\n                content: subdirectoryContent,\r\n            });\r\n        } else {\r\n            // Get file extension and name\r\n            const fileExtension = path.extname(file);\r\n            const fileName = path.basename(file, fileExtension);\r\n\r\n            // Read file content\r\n            const fileContent = fs.readFileSync(filePath, 'utf-8');\r\n\r\n            // Add file information to the result array\r\n            result.push({\r\n                name: fileName,\r\n                type: 'file',\r\n                extension: fileExtension,\r\n                content: fileContent,\r\n            });\r\n        }\r\n    });\r\n\r\n    return result;\r\n}\r\n\r\n// Specify the directory path you want to scan\r\nconst directoryPath = process.cwd();\r\n\r\n// Call the function to scan the directory\r\nconst jsonData = scanDirectory(directoryPath);\r\n\r\n// Convert the result to JSON\r\nconst jsonString = JSON.stringify({ data: jsonData }, null, 2);\r\n\r\n// Print the JSON data\r\nfs.writeFileSync('directory.json', jsonString, 'utf-8');\r\n"
    }
  ]
}